
pracainz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b138  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  0800b2d8  0800b2d8  0001b2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb8c  0800bb8c  00020834  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb8c  0800bb8c  0001bb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb94  0800bb94  00020834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb94  0800bb94  0001bb94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb98  0800bb98  0001bb98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000834  20000000  0800bb9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c0  20000834  0800c3d0  00020834  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cf4  0800c3d0  00021cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020834  2**0
                  CONTENTS, READONLY
 12 .debug_line   00034cf2  00000000  00000000  00020864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00048264  00000000  00000000  00055556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007bf4  00000000  00000000  0009d7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  000a53b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b064b  00000000  00000000  000a6b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000037d0  00000000  00000000  00157158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00021bf5  00000000  00000000  0015a928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00021940  00000000  00000000  0017c51d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  0019de5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056a0  00000000  00000000  0019df30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000834 	.word	0x20000834
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b2c0 	.word	0x0800b2c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000838 	.word	0x20000838
 80001dc:	0800b2c0 	.word	0x0800b2c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f7a:	f003 fd69 	bl	8004a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f007 fadf 	bl	8008540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f000 fe49 	bl	8001c18 <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000834 	.word	0x20000834
  ldr r2, =_sidata
 8000f94:	0800bb9c 	.word	0x0800bb9c
  ldr r2, =_sbss
 8000f98:	20000834 	.word	0x20000834
  ldr r4, =_ebss
 8000f9c:	20001cf4 	.word	0x20001cf4

08000fa0 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <BusFault_Handler>
	...

08000fa4 <ASPEP_start>:

    return crc == 0;
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000fa4:	b510      	push	{r4, lr}
  pHandle->fASPEP_HWInit ( pHandle->HWIp );
 8000fa6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 8000fa8:	4604      	mov	r4, r0
  pHandle->fASPEP_HWInit ( pHandle->HWIp );
 8000faa:	6940      	ldr	r0, [r0, #20]
 8000fac:	4798      	blx	r3
  pHandle->ASPEP_State = ASPEP_IDLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pHandle->ASPEP_TL_State = WAITING_PACKET;
  pHandle -> syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000fb4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

  /* Configure UART to receive first packet*/
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000fb8:	6960      	ldr	r0, [r4, #20]
 8000fba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000fbc:	f104 011c 	add.w	r1, r4, #28
 8000fc0:	2204      	movs	r2, #4
}
 8000fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8000fc6:	4718      	bx	r3

08000fc8 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon (ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000fc8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t * packet = (uint32_t*) pHandle->ctrlBuffer.buffer;
  *packet =( BEACON |
           (capabilities->version <<4) |
           (capabilities->DATA_CRC << 7) |
 8000fca:	780b      	ldrb	r3, [r1, #0]
           (capabilities->version <<4) |
 8000fcc:	790a      	ldrb	r2, [r1, #4]
           (((uint32_t)capabilities->RX_maxSize) << 8) |
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 8000fce:	788c      	ldrb	r4, [r1, #2]
           (((uint32_t)capabilities->RX_maxSize) << 8) |
 8000fd0:	784f      	ldrb	r7, [r1, #1]
           (((uint32_t)capabilities->TXA_maxSize) << 21));
 8000fd2:	78ce      	ldrb	r6, [r1, #3]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000fd4:	4d1b      	ldr	r5, [pc, #108]	; (8001044 <ASPEP_sendBeacon+0x7c>)
           (capabilities->DATA_CRC << 7) |
 8000fd6:	01db      	lsls	r3, r3, #7
           (capabilities->version <<4) |
 8000fd8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000fdc:	f043 0205 	orr.w	r2, r3, #5
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 8000fe0:	03a3      	lsls	r3, r4, #14
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8000fe2:	f002 01f5 	and.w	r1, r2, #245	; 0xf5
           (((uint32_t)capabilities->TXS_maxSize) << 14) |
 8000fe6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8000fea:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
 8000fee:	4313      	orrs	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000ff0:	5c69      	ldrb	r1, [r5, r1]
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8000ff2:	4c15      	ldr	r4, [pc, #84]	; (8001048 <ASPEP_sendBeacon+0x80>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8000ff4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000ff8:	404a      	eors	r2, r1
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8000ffa:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8000ffe:	5caa      	ldrb	r2, [r5, r2]
 8001000:	4051      	eors	r1, r2
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8001002:	f3c3 6603 	ubfx	r6, r3, #24, #4
 8001006:	5c6a      	ldrb	r2, [r5, r1]
 8001008:	4072      	eors	r2, r6
    *headerPtr |= (uint32_t)crc << 28;
 800100a:	5ca2      	ldrb	r2, [r4, r2]
 800100c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001010:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001012:	b672      	cpsid	i
uint8_t ASPEP_TXframeProcess (ASPEP_Handle_t *pHandle, uint8_t dataType, void *txBuffer, uint16_t bufferLength)
{
  uint8_t result = ASPEP_OK;
  ASPEP_ComputeHeaderCRC  ((uint32_t*)txBuffer); /* Insert CRC header in the packet to send */
  __disable_irq(); /*TODO: Disable High frequency task is enough */
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 8001014:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001016:	b143      	cbz	r3, 800102a <ASPEP_sendBeacon+0x62>
  __ASM volatile ("cpsie i" : : : "memory");
 8001018:	b662      	cpsie	i
        pHandle -> syncBuffer.length = bufferLength;
      }
    }
    else  if ( dataType == ASPEP_CTRL )
    {
     if ( pHandle -> ctrlBuffer.state != free ) {
 800101a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800101e:	b913      	cbnz	r3, 8001026 <ASPEP_sendBeacon+0x5e>
        result = ASPEP_BUFFER_ERROR;
      }
      else {
        pHandle -> ctrlBuffer.state = pending;
 8001020:	2302      	movs	r3, #2
 8001022:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8001026:	bcf0      	pop	{r4, r5, r6, r7}
 8001028:	4770      	bx	lr
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800102a:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 800102e:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8001030:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 8001032:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8001036:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8001038:	2204      	movs	r2, #4
 800103a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800103c:	6940      	ldr	r0, [r0, #20]
}
 800103e:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8001040:	4718      	bx	r3
 8001042:	bf00      	nop
 8001044:	0800b2e8 	.word	0x0800b2e8
 8001048:	0800b2d8 	.word	0x0800b2d8

0800104c <ASPEP_sendPing>:
{
 800104c:	b470      	push	{r4, r5, r6}
  uint8_t ipID = pHandle->liid &0xF;
 800104e:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
  uint8_t Nbit = pHandle->syncPacketCount & 0x1; /* Keep only LSB */
 8001052:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 8001056:	014c      	lsls	r4, r1, #5
 8001058:	f003 060f 	and.w	r6, r3, #15
 800105c:	ea44 1301 	orr.w	r3, r4, r1, lsl #4
 8001060:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8001064:	f005 0401 	and.w	r4, r5, #1
 8001068:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 800106c:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 8001070:	f043 0306 	orr.w	r3, r3, #6
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8001074:	4c16      	ldr	r4, [pc, #88]	; (80010d0 <ASPEP_sendPing+0x84>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8001076:	4d17      	ldr	r5, [pc, #92]	; (80010d4 <ASPEP_sendPing+0x88>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8001078:	f003 01f6 	and.w	r1, r3, #246	; 0xf6
  *packet = PING|(cBit <<4)|(cBit <<5)|(Nbit<<6)|(Nbit<<7)|(ipID<<8)|(((uint32_t) packetNumber) <<12);
 800107c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 8001080:	5c61      	ldrb	r1, [r4, r1]
 8001082:	ea81 2112 	eor.w	r1, r1, r2, lsr #8
 8001086:	b2c9      	uxtb	r1, r1
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8001088:	5c63      	ldrb	r3, [r4, r1]
 800108a:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 800108e:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8001090:	5ce3      	ldrb	r3, [r4, r3]
 8001092:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    *headerPtr |= (uint32_t)crc << 28;
 8001096:	5ceb      	ldrb	r3, [r5, r3]
 8001098:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
 800109c:	6202      	str	r2, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800109e:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 80010a0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80010a2:	b143      	cbz	r3, 80010b6 <ASPEP_sendPing+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80010a4:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 80010a6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80010aa:	b913      	cbnz	r3, 80010b2 <ASPEP_sendPing+0x66>
        pHandle -> ctrlBuffer.state = pending;
 80010ac:	2302      	movs	r3, #2
 80010ae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80010b2:	bc70      	pop	{r4, r5, r6}
 80010b4:	4770      	bx	lr
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80010b6:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 80010ba:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 80010bc:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 80010be:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80010c2:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 80010c4:	2204      	movs	r2, #4
 80010c6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80010c8:	6940      	ldr	r0, [r0, #20]
}
 80010ca:	bc70      	pop	{r4, r5, r6}
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 80010cc:	4718      	bx	r3
 80010ce:	bf00      	nop
 80010d0:	0800b2e8 	.word	0x0800b2e8
 80010d4:	0800b2d8 	.word	0x0800b2d8

080010d8 <ASPEP_getBuffer>:
  if (syncAsync == MCTL_SYNC)
 80010d8:	2a0a      	cmp	r2, #10
{
 80010da:	b410      	push	{r4}
 80010dc:	4603      	mov	r3, r0
  if (syncAsync == MCTL_SYNC)
 80010de:	d00b      	beq.n	80010f8 <ASPEP_getBuffer+0x20>
    if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock ))
 80010e0:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 80010e4:	2a01      	cmp	r2, #1
 80010e6:	d921      	bls.n	800112c <ASPEP_getBuffer+0x54>
 80010e8:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80010ec:	2a01      	cmp	r2, #1
 80010ee:	d911      	bls.n	8001114 <ASPEP_getBuffer+0x3c>
      result = false;
 80010f0:	2000      	movs	r0, #0
}
 80010f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010f6:	4770      	bx	lr
    if (pHandle->syncBuffer.state <= writeLock ) /* Possible values are free or writeLock*/
 80010f8:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80010fc:	2a01      	cmp	r2, #1
 80010fe:	d8f7      	bhi.n	80010f0 <ASPEP_getBuffer+0x18>
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8001100:	6a82      	ldr	r2, [r0, #40]	; 0x28
      pHandle->syncBuffer.state = writeLock;
 8001102:	2401      	movs	r4, #1
      *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8001104:	3204      	adds	r2, #4
 8001106:	600a      	str	r2, [r1, #0]
      pHandle->syncBuffer.state = writeLock;
 8001108:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 800110c:	4620      	mov	r0, r4
}
 800110e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001112:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001114:	6b82      	ldr	r2, [r0, #56]	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 8001116:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8001118:	f103 0438 	add.w	r4, r3, #56	; 0x38
        pHandle->asyncBufferB.state = writeLock;
 800111c:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001120:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8001122:	641c      	str	r4, [r3, #64]	; 0x40
}
 8001124:	f85d 4b04 	ldr.w	r4, [sp], #4
        *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001128:	600a      	str	r2, [r1, #0]
}
 800112a:	4770      	bx	lr
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800112c:	6b02      	ldr	r2, [r0, #48]	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 800112e:	2001      	movs	r0, #1
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8001130:	f103 0430 	add.w	r4, r3, #48	; 0x30
        pHandle->asyncBufferA.state = writeLock;
 8001134:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8001138:	3204      	adds	r2, #4
        pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800113a:	641c      	str	r4, [r3, #64]	; 0x40
}
 800113c:	f85d 4b04 	ldr.w	r4, [sp], #4
        *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8001140:	600a      	str	r2, [r1, #0]
}
 8001142:	4770      	bx	lr

08001144 <ASPEP_sendPacket>:
{
 8001144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pHandle-> ASPEP_State == ASPEP_CONNECTED)
 8001146:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 800114a:	2c02      	cmp	r4, #2
 800114c:	d002      	beq.n	8001154 <ASPEP_sendPacket+0x10>
    result = ASPEP_NOT_CONNECTED;
 800114e:	2102      	movs	r1, #2
}
 8001150:	4608      	mov	r0, r1
 8001152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpHeader =  (txDataLength << 4) | syncAsync;
 8001154:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
    *header = tmpHeader;
 8001158:	f841 4c04 	str.w	r4, [r1, #-4]
    if (pHandle->Capabilities.DATA_CRC == 1)
 800115c:	f890 4067 	ldrb.w	r4, [r0, #103]	; 0x67
 8001160:	2c01      	cmp	r4, #1
    packet = packet - ASPEP_HEADER_SIZE; /* Header ues 4*8 bits on top of txBuffer*/
 8001162:	f1a1 0504 	sub.w	r5, r1, #4
    if (pHandle->Capabilities.DATA_CRC == 1)
 8001166:	d106      	bne.n	8001176 <ASPEP_sendPacket+0x32>
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8001168:	18ac      	adds	r4, r5, r2
      *(packet+ASPEP_HEADER_SIZE+txDataLength) = (uint8_t) 0xCA; /* Dummy CRC */
 800116a:	26ca      	movs	r6, #202	; 0xca
 800116c:	548e      	strb	r6, [r1, r2]
      txDataLength+=ASPEP_DATACRC_SIZE;
 800116e:	1c97      	adds	r7, r2, #2
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8001170:	26fe      	movs	r6, #254	; 0xfe
      txDataLength+=ASPEP_DATACRC_SIZE;
 8001172:	b2ba      	uxth	r2, r7
      *(packet+ASPEP_HEADER_SIZE+txDataLength+1) = (uint8_t) 0xFE; /* Dummy CRC */
 8001174:	7166      	strb	r6, [r4, #5]
    if (syncAsync == MCTL_SYNC )
 8001176:	2b0a      	cmp	r3, #10
 8001178:	d103      	bne.n	8001182 <ASPEP_sendPacket+0x3e>
      if ( pSupHandle->MCP_PacketAvailable)
 800117a:	7c04      	ldrb	r4, [r0, #16]
 800117c:	b37c      	cbz	r4, 80011de <ASPEP_sendPacket+0x9a>
        pSupHandle-> MCP_PacketAvailable = false; /* CMD from master is processed*/
 800117e:	2400      	movs	r4, #0
 8001180:	7404      	strb	r4, [r0, #16]
    uint32_t header = *headerPtr;
 8001182:	f851 4c04 	ldr.w	r4, [r1, #-4]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8001186:	4f34      	ldr	r7, [pc, #208]	; (8001258 <ASPEP_sendPacket+0x114>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 8001188:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 800125c <ASPEP_sendPacket+0x118>
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 800118c:	b2e6      	uxtb	r6, r4
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 800118e:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 8001192:	5dbe      	ldrb	r6, [r7, r6]
 8001194:	ea8e 0e06 	eor.w	lr, lr, r6
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8001198:	f3c4 4607 	ubfx	r6, r4, #16, #8
 800119c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80011a0:	ea86 060e 	eor.w	r6, r6, lr
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 80011a4:	3204      	adds	r2, #4
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 80011a6:	5dbe      	ldrb	r6, [r7, r6]
 80011a8:	f3c4 6703 	ubfx	r7, r4, #24, #4
 80011ac:	407e      	eors	r6, r7
      result = ASPEP_TXframeProcess (pHandle, syncAsync, packet, txDataLength+ASPEP_HEADER_SIZE);
 80011ae:	b292      	uxth	r2, r2
    *headerPtr |= (uint32_t)crc << 28;
 80011b0:	f81c 6006 	ldrb.w	r6, [ip, r6]
 80011b4:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
 80011b8:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 80011be:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80011c0:	b1e9      	cbz	r1, 80011fe <ASPEP_sendPacket+0xba>
  __ASM volatile ("cpsie i" : : : "memory");
 80011c2:	b662      	cpsie	i
    if ( dataType == MCTL_ASYNC )
 80011c4:	2b09      	cmp	r3, #9
 80011c6:	d00d      	beq.n	80011e4 <ASPEP_sendPacket+0xa0>
    else if (dataType == MCTL_SYNC )
 80011c8:	2b0a      	cmp	r3, #10
 80011ca:	d02f      	beq.n	800122c <ASPEP_sendPacket+0xe8>
    else  if ( dataType == ASPEP_CTRL )
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d133      	bne.n	8001238 <ASPEP_sendPacket+0xf4>
     if ( pHandle -> ctrlBuffer.state != free ) {
 80011d0:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 80011d4:	bb71      	cbnz	r1, 8001234 <ASPEP_sendPacket+0xf0>
        pHandle -> ctrlBuffer.state = pending;
 80011d6:	2302      	movs	r3, #2
 80011d8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80011dc:	e7b8      	b.n	8001150 <ASPEP_sendPacket+0xc>
        result = MCTL_SYNC_NOT_EXPECTED;
 80011de:	2101      	movs	r1, #1
}
 80011e0:	4608      	mov	r0, r1
 80011e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (pHandle->asyncNextBuffer == NULL)
 80011e4:	e9d0 3410 	ldrd	r3, r4, [r0, #64]	; 0x40
      if ( txBuffer != (uint8_t *) pHandle->lastRequestedAsyncBuff->buffer)
 80011e8:	6819      	ldr	r1, [r3, #0]
        result = ASPEP_BUFFER_ERROR;
 80011ea:	428d      	cmp	r5, r1
 80011ec:	bf14      	ite	ne
 80011ee:	2103      	movne	r1, #3
 80011f0:	2100      	moveq	r1, #0
      if (pHandle->asyncNextBuffer == NULL)
 80011f2:	b37c      	cbz	r4, 8001254 <ASPEP_sendPacket+0x110>
      pHandle->lastRequestedAsyncBuff->state = pending;
 80011f4:	2402      	movs	r4, #2
 80011f6:	719c      	strb	r4, [r3, #6]
      pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80011f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80011fa:	809a      	strh	r2, [r3, #4]
 80011fc:	e7a8      	b.n	8001150 <ASPEP_sendPacket+0xc>
    if (dataType == MCTL_ASYNC )
 80011fe:	2b09      	cmp	r3, #9
 8001200:	d022      	beq.n	8001248 <ASPEP_sendPacket+0x104>
    else if (dataType == MCTL_SYNC )
 8001202:	2b0a      	cmp	r3, #10
      pHandle->syncBuffer.state = readLock;
 8001204:	f04f 0103 	mov.w	r1, #3
      pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8001208:	bf0b      	itete	eq
 800120a:	f100 0328 	addeq.w	r3, r0, #40	; 0x28
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 800120e:	f100 0320 	addne.w	r3, r0, #32
      pHandle->syncBuffer.state = readLock;
 8001212:	f880 102e 	strbeq.w	r1, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = readLock;
 8001216:	f880 1024 	strbne.w	r1, [r0, #36]	; 0x24
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 800121a:	6483      	str	r3, [r0, #72]	; 0x48
 800121c:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 800121e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001220:	6940      	ldr	r0, [r0, #20]
 8001222:	4629      	mov	r1, r5
 8001224:	4798      	blx	r3
  uint8_t result = ASPEP_OK;
 8001226:	2100      	movs	r1, #0
}
 8001228:	4608      	mov	r0, r1
 800122a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( pHandle -> syncBuffer.state != writeLock ) {
 800122c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8001230:	2b01      	cmp	r3, #1
 8001232:	d003      	beq.n	800123c <ASPEP_sendPacket+0xf8>
        result = ASPEP_BUFFER_ERROR;
 8001234:	2103      	movs	r1, #3
 8001236:	e78b      	b.n	8001150 <ASPEP_sendPacket+0xc>
  uint8_t result = ASPEP_OK;
 8001238:	2100      	movs	r1, #0
 800123a:	e789      	b.n	8001150 <ASPEP_sendPacket+0xc>
        pHandle -> syncBuffer.state = pending;
 800123c:	2302      	movs	r3, #2
        pHandle -> syncBuffer.length = bufferLength;
 800123e:	8582      	strh	r2, [r0, #44]	; 0x2c
        pHandle -> syncBuffer.state = pending;
 8001240:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
  uint8_t result = ASPEP_OK;
 8001244:	2100      	movs	r1, #0
 8001246:	e783      	b.n	8001150 <ASPEP_sendPacket+0xc>
      pHandle->lastRequestedAsyncBuff->state = readLock;
 8001248:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800124a:	2103      	movs	r1, #3
 800124c:	7199      	strb	r1, [r3, #6]
      pHandle->lockBuffer = (void *) pHandle->lastRequestedAsyncBuff;
 800124e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001250:	6483      	str	r3, [r0, #72]	; 0x48
 8001252:	e7e3      	b.n	800121c <ASPEP_sendPacket+0xd8>
        pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8001254:	6443      	str	r3, [r0, #68]	; 0x44
 8001256:	e7cd      	b.n	80011f4 <ASPEP_sendPacket+0xb0>
 8001258:	0800b2e8 	.word	0x0800b2e8
 800125c:	0800b2d8 	.word	0x0800b2d8

08001260 <ASPEP_RXframeProcess>:
  bool validCRCData = true;
  uint16_t packetNumber;
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);

  *packetLength = 0;
  if (pHandle->NewPacketAvailable)
 8001260:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
  uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader);
 8001264:	69c2      	ldr	r2, [r0, #28]
{
 8001266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  *packetLength = 0;
 800126a:	2500      	movs	r5, #0
{
 800126c:	4604      	mov	r4, r0
  *packetLength = 0;
 800126e:	800d      	strh	r5, [r1, #0]
  if (pHandle->NewPacketAvailable)
 8001270:	b193      	cbz	r3, 8001298 <ASPEP_RXframeProcess+0x38>
  {
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
    switch (pHandle->ASPEP_State)
 8001272:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
    pHandle -> NewPacketAvailable = false; /* Consumes new packet*/
 8001276:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
    switch (pHandle->ASPEP_State)
 800127a:	2e01      	cmp	r6, #1
 800127c:	d056      	beq.n	800132c <ASPEP_RXframeProcess+0xcc>
 800127e:	2e02      	cmp	r6, #2
 8001280:	d03f      	beq.n	8001302 <ASPEP_RXframeProcess+0xa2>
 8001282:	2e00      	cmp	r6, #0
 8001284:	d033      	beq.n	80012ee <ASPEP_RXframeProcess+0x8e>
      }

      break;
    }
    /* The valid received packet is now safely consumes, we are ready to receive a new packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader , ASPEP_HEADER_SIZE );
 8001286:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001288:	6960      	ldr	r0, [r4, #20]
 800128a:	2204      	movs	r2, #4
 800128c:	f104 011c 	add.w	r1, r4, #28
 8001290:	4798      	blx	r3
  else
  {
    /* Nothing to do, no response is due to the master */
  }
  return result;
}
 8001292:	4628      	mov	r0, r5
 8001294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (pHandle->badPacketFlag > ASPEP_OK )
 8001298:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 800129c:	2d00      	cmp	r5, #0
 800129e:	d0f8      	beq.n	8001292 <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 80012a0:	042b      	lsls	r3, r5, #16
 80012a2:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 80012a6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80012aa:	4a96      	ldr	r2, [pc, #600]	; (8001504 <ASPEP_RXframeProcess+0x2a4>)
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 80012ac:	4996      	ldr	r1, [pc, #600]	; (8001508 <ASPEP_RXframeProcess+0x2a8>)
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 80012ae:	f083 0309 	eor.w	r3, r3, #9
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 80012b2:	5cd3      	ldrb	r3, [r2, r3]
 80012b4:	ea83 4315 	eor.w	r3, r3, r5, lsr #16
  *packet = NACK | (((uint32_t) error) << 8) |(((uint32_t) error) << 16);
 80012b8:	f045 050f 	orr.w	r5, r5, #15
    crc = CRC4_Lookup4[ crc ^ (uint8_t)((header >> 24) & 0x0f) ];
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
    *headerPtr |= (uint32_t)crc << 28;
 80012be:	5ccb      	ldrb	r3, [r1, r3]
 80012c0:	ea45 7503 	orr.w	r5, r5, r3, lsl #28
 80012c4:	6205      	str	r5, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80012c6:	b672      	cpsid	i
  if (pHandle->lockBuffer == NULL ) /* Communication Ip free to send data*/
 80012c8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d03d      	beq.n	800134a <ASPEP_RXframeProcess+0xea>
  __ASM volatile ("cpsie i" : : : "memory");
 80012ce:	b662      	cpsie	i
     if ( pHandle -> ctrlBuffer.state != free ) {
 80012d0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80012d4:	b913      	cbnz	r3, 80012dc <ASPEP_RXframeProcess+0x7c>
        pHandle -> ctrlBuffer.state = pending;
 80012d6:	2302      	movs	r3, #2
 80012d8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    pHandle->badPacketFlag = ASPEP_OK;
 80012dc:	2500      	movs	r5, #0
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 80012de:	6960      	ldr	r0, [r4, #20]
 80012e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    pHandle->badPacketFlag = ASPEP_OK;
 80012e2:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
    pHandle->fASPEP_HWSync (pHandle->HWIp);
 80012e6:	4798      	blx	r3
}
 80012e8:	4628      	mov	r0, r5
 80012ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (pHandle->rxPacketType == beacon )
 80012ee:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	f000 8097 	beq.w	8001426 <ASPEP_RXframeProcess+0x1c6>
      else if (pHandle->rxPacketType == ping)
 80012f8:	2b06      	cmp	r3, #6
 80012fa:	f000 80d7 	beq.w	80014ac <ASPEP_RXframeProcess+0x24c>
  uint8_t* result = NULL;
 80012fe:	4635      	mov	r5, r6
 8001300:	e7c1      	b.n	8001286 <ASPEP_RXframeProcess+0x26>
      if (pHandle->rxPacketType == beacon )
 8001302:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8001306:	2b05      	cmp	r3, #5
 8001308:	d060      	beq.n	80013cc <ASPEP_RXframeProcess+0x16c>
      else if (pHandle->rxPacketType == ping )
 800130a:	2b06      	cmp	r3, #6
 800130c:	f000 80d5 	beq.w	80014ba <ASPEP_RXframeProcess+0x25a>
      else if (pHandle->rxPacketType == data )
 8001310:	2b09      	cmp	r3, #9
 8001312:	d1b8      	bne.n	8001286 <ASPEP_RXframeProcess+0x26>
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8001314:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
          *packetLength = pHandle->rxLength;
 8001318:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
          result = pHandle->rxBuffer;
 800131c:	6985      	ldr	r5, [r0, #24]
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 800131e:	3301      	adds	r3, #1
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8001320:	2001      	movs	r0, #1
        { pHandle -> syncPacketCount++; /* this counter is incremented at each valid data packet received from the master */
 8001322:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
          pSupHandle ->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8001326:	7420      	strb	r0, [r4, #16]
          *packetLength = pHandle->rxLength;
 8001328:	800a      	strh	r2, [r1, #0]
          result = pHandle->rxBuffer;
 800132a:	e7ac      	b.n	8001286 <ASPEP_RXframeProcess+0x26>
      if (pHandle->rxPacketType == beacon )
 800132c:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8001330:	2b05      	cmp	r3, #5
 8001332:	d016      	beq.n	8001362 <ASPEP_RXframeProcess+0x102>
      else if (pHandle->rxPacketType == ping)
 8001334:	2b06      	cmp	r3, #6
 8001336:	d1a6      	bne.n	8001286 <ASPEP_RXframeProcess+0x26>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 8001338:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800133c:	4631      	mov	r1, r6
 800133e:	f7ff fe85 	bl	800104c <ASPEP_sendPing>
        pHandle->ASPEP_State = ASPEP_CONNECTED;
 8001342:	2302      	movs	r3, #2
 8001344:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8001348:	e79d      	b.n	8001286 <ASPEP_RXframeProcess+0x26>
  ASPEP_TXframeProcess (pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800134a:	f100 0120 	add.w	r1, r0, #32
      pHandle->ctrlBuffer.state = readLock;
 800134e:	2303      	movs	r3, #3
      pHandle->lockBuffer = (void *) &pHandle->ctrlBuffer;
 8001350:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->ctrlBuffer.state = readLock;
 8001352:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8001356:	b662      	cpsie	i
    pHandle->fASPEP_send  (pHandle ->HWIp, txBuffer, bufferLength);
 8001358:	2204      	movs	r2, #4
 800135a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800135c:	6940      	ldr	r0, [r0, #20]
 800135e:	4798      	blx	r3
 8001360:	e7bc      	b.n	80012dc <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8001362:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001364:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8001368:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800136a:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800136e:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001372:	f894 c06a 	ldrb.w	ip, [r4, #106]	; 0x6a
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8001376:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 8001378:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800137c:	42ab      	cmp	r3, r5
 800137e:	4698      	mov	r8, r3
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 8001380:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001384:	bf28      	it	cs
 8001386:	46a8      	movcs	r8, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001388:	4281      	cmp	r1, r0
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 800138a:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800138e:	bf28      	it	cs
 8001390:	4601      	movcs	r1, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001392:	42b7      	cmp	r7, r6
 8001394:	46b9      	mov	r9, r7
 8001396:	bf28      	it	cs
 8001398:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800139a:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800139c:	f884 8067 	strb.w	r8, [r4, #103]	; 0x67
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80013a0:	46f0      	mov	r8, lr
 80013a2:	bf28      	it	cs
 80013a4:	46e0      	movcs	r8, ip
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 80013a6:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80013a8:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80013ac:	f884 9069 	strb.w	r9, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80013b0:	f884 806a 	strb.w	r8, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 80013b4:	f240 8086 	bls.w	80014c4 <ASPEP_RXframeProcess+0x264>
          pHandle->ASPEP_State = ASPEP_IDLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        ASPEP_sendBeacon (pHandle, &pHandle->Capabilities);
 80013be:	f104 0167 	add.w	r1, r4, #103	; 0x67
 80013c2:	4620      	mov	r0, r4
 80013c4:	f7ff fe00 	bl	8000fc8 <ASPEP_sendBeacon>
  uint8_t* result = NULL;
 80013c8:	2500      	movs	r5, #0
 80013ca:	e75c      	b.n	8001286 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 80013cc:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80013ce:	f894 6067 	ldrb.w	r6, [r4, #103]	; 0x67
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80013d2:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80013d4:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80013d8:	f894 7069 	ldrb.w	r7, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80013dc:	f894 e06a 	ldrb.w	lr, [r4, #106]	; 0x6a
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 80013e0:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 80013e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80013e6:	42b3      	cmp	r3, r6
 80013e8:	4699      	mov	r9, r3
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 80013ea:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80013ee:	bf28      	it	cs
 80013f0:	46b1      	movcs	r9, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80013f2:	4281      	cmp	r1, r0
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 80013f4:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80013f8:	bf28      	it	cs
 80013fa:	4601      	movcs	r1, r0
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80013fc:	45bc      	cmp	ip, r7
 80013fe:	46e2      	mov	sl, ip
 8001400:	bf28      	it	cs
 8001402:	46ba      	movcs	sl, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001404:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001406:	f884 9067 	strb.w	r9, [r4, #103]	; 0x67
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800140a:	46c1      	mov	r9, r8
 800140c:	bf28      	it	cs
 800140e:	46f1      	movcs	r9, lr
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8001410:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001412:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001416:	f884 a069 	strb.w	sl, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800141a:	f884 906a 	strb.w	r9, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 800141e:	d962      	bls.n	80014e6 <ASPEP_RXframeProcess+0x286>
 8001420:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8001424:	e7cb      	b.n	80013be <ASPEP_RXframeProcess+0x15e>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 8001426:	7f03      	ldrb	r3, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001428:	f890 7067 	ldrb.w	r7, [r0, #103]	; 0x67
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 800142c:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800142e:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001432:	f890 c069 	ldrb.w	ip, [r0, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001436:	f890 806a 	ldrb.w	r8, [r0, #106]	; 0x6a
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7 ;      /*Bit 7 */
 800143a:	09db      	lsrs	r3, r3, #7
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3F; /*Bits 8 to  13*/
 800143c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001440:	42bb      	cmp	r3, r7
  MasterCapabilities.TXS_maxSize = (packetHeader&0x1FC000)  >> 14; /*Bits 14 to 20 */
 8001442:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001446:	469a      	mov	sl, r3
 8001448:	bf28      	it	cs
 800144a:	46ba      	movcs	sl, r7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800144c:	42a9      	cmp	r1, r5
  MasterCapabilities.TXA_maxSize = (packetHeader&0xFE00000) >> 21; /*Bits 21 to 27  */
 800144e:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001452:	bf28      	it	cs
 8001454:	4629      	movcs	r1, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001456:	45e6      	cmp	lr, ip
 8001458:	4670      	mov	r0, lr
 800145a:	bf28      	it	cs
 800145c:	4660      	movcs	r0, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800145e:	45c1      	cmp	r9, r8
 8001460:	464e      	mov	r6, r9
 8001462:	bf28      	it	cs
 8001464:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8001466:	42bb      	cmp	r3, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001468:	f884 a067 	strb.w	sl, [r4, #103]	; 0x67
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800146c:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001470:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001474:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 8001478:	d8a1      	bhi.n	80013be <ASPEP_RXframeProcess+0x15e>
 800147a:	428d      	cmp	r5, r1
 800147c:	d89f      	bhi.n	80013be <ASPEP_RXframeProcess+0x15e>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 800147e:	45e6      	cmp	lr, ip
 8001480:	d89d      	bhi.n	80013be <ASPEP_RXframeProcess+0x15e>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 8001482:	45c1      	cmp	r9, r8
 8001484:	d89b      	bhi.n	80013be <ASPEP_RXframeProcess+0x15e>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 8001486:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
 800148a:	f3c2 1302 	ubfx	r3, r2, #4, #3
 800148e:	429d      	cmp	r5, r3
 8001490:	d195      	bne.n	80013be <ASPEP_RXframeProcess+0x15e>
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8001492:	1c4b      	adds	r3, r1, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 8001494:	1c42      	adds	r2, r0, #1
 8001496:	0152      	lsls	r2, r2, #5
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 8001498:	015b      	lsls	r3, r3, #5
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 800149a:	01b6      	lsls	r6, r6, #6
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 800149c:	2101      	movs	r1, #1
          pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize+1)*32;
 800149e:	81a2      	strh	r2, [r4, #12]
          pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize+1)*32;
 80014a0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
          pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize)*64;
 80014a4:	81e6      	strh	r6, [r4, #14]
          pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80014a6:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 80014aa:	e788      	b.n	80013be <ASPEP_RXframeProcess+0x15e>
        ASPEP_sendPing (pHandle,ASPEP_PING_RESET,packetNumber);
 80014ac:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80014b0:	4631      	mov	r1, r6
 80014b2:	f7ff fdcb 	bl	800104c <ASPEP_sendPing>
  uint8_t* result = NULL;
 80014b6:	4635      	mov	r5, r6
 80014b8:	e6e5      	b.n	8001286 <ASPEP_RXframeProcess+0x26>
        ASPEP_sendPing (pHandle,ASPEP_PING_CFG,packetNumber);
 80014ba:	7f42      	ldrb	r2, [r0, #29]
 80014bc:	2101      	movs	r1, #1
 80014be:	f7ff fdc5 	bl	800104c <ASPEP_sendPing>
 80014c2:	e6e0      	b.n	8001286 <ASPEP_RXframeProcess+0x26>
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 80014c4:	4288      	cmp	r0, r1
 80014c6:	f63f af77 	bhi.w	80013b8 <ASPEP_RXframeProcess+0x158>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 80014ca:	42b7      	cmp	r7, r6
 80014cc:	f63f af74 	bhi.w	80013b8 <ASPEP_RXframeProcess+0x158>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 80014d0:	45e6      	cmp	lr, ip
 80014d2:	f63f af71 	bhi.w	80013b8 <ASPEP_RXframeProcess+0x158>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 80014d6:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80014da:	f3c2 1302 	ubfx	r3, r2, #4, #3
 80014de:	4299      	cmp	r1, r3
 80014e0:	f47f af6a 	bne.w	80013b8 <ASPEP_RXframeProcess+0x158>
 80014e4:	e76b      	b.n	80013be <ASPEP_RXframeProcess+0x15e>
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC) ||
 80014e6:	4288      	cmp	r0, r1
 80014e8:	d89a      	bhi.n	8001420 <ASPEP_RXframeProcess+0x1c0>
      (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize) || /* Data packet the master can send is bigger than slave can receive */
 80014ea:	45bc      	cmp	ip, r7
 80014ec:	d898      	bhi.n	8001420 <ASPEP_RXframeProcess+0x1c0>
      (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize ) || /*Sync packet size alignement is required in order for the master to be able to store it, and to not request a response bigger than slave capability */
 80014ee:	45f0      	cmp	r8, lr
 80014f0:	d896      	bhi.n	8001420 <ASPEP_RXframeProcess+0x1c0>
      (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize ) || /*Async packet the slave can send is bigger than the master can receive (but master must not request a bigger packet than slave can transmit */
 80014f2:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
 80014f6:	f3c2 1302 	ubfx	r3, r2, #4, #3
          pHandle->ASPEP_State = ASPEP_IDLE;
 80014fa:	1aeb      	subs	r3, r5, r3
 80014fc:	425d      	negs	r5, r3
 80014fe:	415d      	adcs	r5, r3
 8001500:	e78e      	b.n	8001420 <ASPEP_RXframeProcess+0x1c0>
 8001502:	bf00      	nop
 8001504:	0800b2e8 	.word	0x0800b2e8
 8001508:	0800b2d8 	.word	0x0800b2d8

0800150c <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT (ASPEP_Handle_t *pHandle)
{
 800150c:	b538      	push	{r3, r4, r5, lr}
/* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.*/
/* This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_RXframeProcess*/
/* If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.*/
  switch (pHandle->ASPEP_TL_State) {
 800150e:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8001512:	4604      	mov	r4, r0
  switch (pHandle->ASPEP_TL_State) {
 8001514:	b13b      	cbz	r3, 8001526 <ASPEP_HWDataReceivedIT+0x1a>
 8001516:	2b01      	cmp	r3, #1
 8001518:	d104      	bne.n	8001524 <ASPEP_HWDataReceivedIT+0x18>
    {
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
    }
    break;
  case WAITING_PAYLOAD:
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 800151a:	2200      	movs	r2, #0
    // Payload received,
    pHandle->NewPacketAvailable = true;
 800151c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001520:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    /*The receiver is not reconfigure right now on purpose to avoid race condition when the packet will be processed in ASPEP_RXframeProcess */
    break;
  }
}
 8001524:	bd38      	pop	{r3, r4, r5, pc}
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 8001526:	69c2      	ldr	r2, [r0, #28]
    crc = CRC4_Lookup8[ crc ^ (uint8_t)( header        & 0xff) ];
 8001528:	491f      	ldr	r1, [pc, #124]	; (80015a8 <ASPEP_HWDataReceivedIT+0x9c>)
 800152a:	b2d3      	uxtb	r3, r2
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 8 ) & 0xff) ];
 800152c:	5ccb      	ldrb	r3, [r1, r3]
 800152e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
 8001532:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 16) & 0xff) ];
 8001534:	5ccb      	ldrb	r3, [r1, r3]
 8001536:	ea83 4312 	eor.w	r3, r3, r2, lsr #16
 800153a:	b2db      	uxtb	r3, r3
    crc = CRC4_Lookup8[ crc ^ (uint8_t)((header >> 24) & 0xff) ];
 800153c:	5ccb      	ldrb	r3, [r1, r3]
 800153e:	ea83 6312 	eor.w	r3, r3, r2, lsr #24
    if (ASPEP_CheckHeaderCRC (*(uint32_t*)pHandle->rxHeader) == true )
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	b963      	cbnz	r3, 8001560 <ASPEP_HWDataReceivedIT+0x54>
       pHandle->rxPacketType = (ASPEP_packetType_def) (pHandle->rxHeader[0] & ID_MASK);
 8001546:	7f03      	ldrb	r3, [r0, #28]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	2b06      	cmp	r3, #6
 800154e:	f880 3066 	strb.w	r3, [r0, #102]	; 0x66
       switch (pHandle->rxPacketType) {
 8001552:	d809      	bhi.n	8001568 <ASPEP_HWDataReceivedIT+0x5c>
 8001554:	2b04      	cmp	r3, #4
 8001556:	d81e      	bhi.n	8001596 <ASPEP_HWDataReceivedIT+0x8a>
         pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8001558:	2301      	movs	r3, #1
 800155a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 800155e:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8001560:	2304      	movs	r3, #4
 8001562:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8001566:	bd38      	pop	{r3, r4, r5, pc}
 8001568:	2b09      	cmp	r3, #9
 800156a:	d1f5      	bne.n	8001558 <ASPEP_HWDataReceivedIT+0x4c>
         pHandle->rxLength = (*((uint32_t *)pHandle->rxHeader) & 0x0001FFF0) >> 4;
 800156c:	f3c2 120c 	ubfx	r2, r2, #4, #13
 8001570:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
         if (pHandle->rxLength == 0) /* data packet with length 0 is a valid packet*/
 8001574:	b17a      	cbz	r2, 8001596 <ASPEP_HWDataReceivedIT+0x8a>
         else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8001576:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800157a:	4293      	cmp	r3, r2
 800157c:	d30f      	bcc.n	800159e <ASPEP_HWDataReceivedIT+0x92>
           pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer , pHandle->rxLength+ASPEP_DATACRC_SIZE*pHandle->Capabilities.DATA_CRC); /* need to read + 2 bytes CRC*/
 800157e:	f890 5067 	ldrb.w	r5, [r0, #103]	; 0x67
 8001582:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001584:	eb02 0245 	add.w	r2, r2, r5, lsl #1
 8001588:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
 800158c:	4798      	blx	r3
           pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 800158e:	2301      	movs	r3, #1
 8001590:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8001594:	bd38      	pop	{r3, r4, r5, pc}
         pHandle->NewPacketAvailable = true;
 8001596:	2301      	movs	r3, #1
 8001598:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 800159c:	bd38      	pop	{r3, r4, r5, pc}
           pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 800159e:	2302      	movs	r3, #2
 80015a0:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 80015a4:	bd38      	pop	{r3, r4, r5, pc}
 80015a6:	bf00      	nop
 80015a8:	0800b2e8 	.word	0x0800b2e8

080015ac <Ds_Init>:
#include <stdio.h>
#include <math.h>


void Ds_Init(struct Ds_MotorInfo *Motor)
{
 80015ac:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(&huart2, Motor->buffer, 6);
 80015ae:	1c41      	adds	r1, r0, #1
{
 80015b0:	4604      	mov	r4, r0
	HAL_UART_Receive_IT(&huart2, Motor->buffer, 6);
 80015b2:	2206      	movs	r2, #6
 80015b4:	4808      	ldr	r0, [pc, #32]	; (80015d8 <Ds_Init+0x2c>)
 80015b6:	f004 fd5b 	bl	8006070 <HAL_UART_Receive_IT>
	MC_ProgramSpeedRampMotor1(3000 / 6, 1000);
 80015ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c2:	f000 fcf3 	bl	8001fac <MC_ProgramSpeedRampMotor1>
	Motor->zadanawartosc=3000;
	Motor->kierunek = 1;
	Motor->stan = Idle;
 80015c6:	2300      	movs	r3, #0
	Motor->zadanawartosc=3000;
 80015c8:	f640 31b8 	movw	r1, #3000	; 0xbb8
	Motor->kierunek = 1;
 80015cc:	2201      	movs	r2, #1
	Motor->stan = Idle;
 80015ce:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	Motor->zadanawartosc=3000;
 80015d2:	6421      	str	r1, [r4, #64]	; 0x40
	Motor->kierunek = 1;
 80015d4:	64a2      	str	r2, [r4, #72]	; 0x48
}
 80015d6:	bd10      	pop	{r4, pc}
 80015d8:	2000086c 	.word	0x2000086c
 80015dc:	00000000 	.word	0x00000000

080015e0 <Ds_ObslugaKomunikacji>:

void Ds_ObslugaKomunikacji(struct Ds_MotorInfo *Motor)
{
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e2:	ed2d 8b02 	vpush	{d8}
	BusVoltageSensor_Handle_t *pHandle;
	const MotorConfig_reg_t *MotorConfig = *MotorConfig_reg;
 80015e6:	4b82      	ldr	r3, [pc, #520]	; (80017f0 <Ds_ObslugaKomunikacji+0x210>)
	uint8_t motorID;
	MCI_Handle_t *pMCI = &Mci[motorID];
	PID_Handle_t *pPIDSpeed[NBR_OF_MOTORS] = { &PIDSpeedHandle_M1 };

	Motor->Rshunt = MotorConfig->rs;
 80015e8:	681a      	ldr	r2, [r3, #0]

	if (Motor->stan == Monitor)
 80015ea:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
	Motor->Rshunt = MotorConfig->rs;
 80015ee:	6892      	ldr	r2, [r2, #8]
 80015f0:	6542      	str	r2, [r0, #84]	; 0x54
	if (Motor->stan == Monitor)
 80015f2:	2b01      	cmp	r3, #1
{
 80015f4:	4604      	mov	r4, r0
	if (Motor->stan == Monitor)
 80015f6:	d008      	beq.n	800160a <Ds_ObslugaKomunikacji+0x2a>
				Motor->temperature);
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
		HAL_Delay(10);
	}

	else if (Motor->stan == PIValues)
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	f000 809c 	beq.w	8001736 <Ds_ObslugaKomunikacji+0x156>
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "KIM:%dIMIAN",
				Motor->KI_mian);
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
		HAL_Delay(10);
	}
	else if (Motor->stan == Graph)
 80015fe:	2b03      	cmp	r3, #3
 8001600:	f000 80d8 	beq.w	80017b4 <Ds_ObslugaKomunikacji+0x1d4>
		Motor->speed = MC_GetMecSpeedAverageMotor1() * 6;
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "SPEED:%dRPM",
				Motor->speed);
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
	}
}
 8001604:	ecbd 8b02 	vpop	{d8}
 8001608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Motor->speed = MC_GetMecSpeedAverageMotor1() * 6;
 800160a:	f000 fcd7 	bl	8001fbc <MC_GetMecSpeedAverageMotor1>
 800160e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001612:	0042      	lsls	r2, r0, #1
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "SPEED:%dRPM",
 8001614:	1de5      	adds	r5, r4, #7
		Motor->speed = MC_GetMecSpeedAverageMotor1() * 6;
 8001616:	b212      	sxth	r2, r2
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "SPEED:%dRPM",
 8001618:	4976      	ldr	r1, [pc, #472]	; (80017f4 <Ds_ObslugaKomunikacji+0x214>)
		Motor->speed = MC_GetMecSpeedAverageMotor1() * 6;
 800161a:	85a2      	strh	r2, [r4, #44]	; 0x2c
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "SPEED:%dRPM",
 800161c:	4628      	mov	r0, r5
 800161e:	f007 fc33 	bl	8008e88 <siprintf>
 8001622:	b282      	uxth	r2, r0
 8001624:	84e2      	strh	r2, [r4, #38]	; 0x26
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
 8001626:	4629      	mov	r1, r5
 8001628:	4873      	ldr	r0, [pc, #460]	; (80017f8 <Ds_ObslugaKomunikacji+0x218>)
 800162a:	f004 fcff 	bl	800602c <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 800162e:	200a      	movs	r0, #10
 8001630:	f003 fa68 	bl	8004b04 <HAL_Delay>
		Motor->current = (MC_GetPhaseCurrentAmplitudeMotor1() * 3.3)
 8001634:	f000 fcc8 	bl	8001fc8 <MC_GetPhaseCurrentAmplitudeMotor1>
				/ (65536 * Motor->Rshunt * 5.18);
 8001638:	f7fe ff7c 	bl	8000534 <__aeabi_i2d>
 800163c:	a368      	add	r3, pc, #416	; (adr r3, 80017e0 <Ds_ObslugaKomunikacji+0x200>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe ffe1 	bl	8000608 <__aeabi_dmul>
 8001646:	ed94 7a15 	vldr	s14, [r4, #84]	; 0x54
 800164a:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80017fc <Ds_ObslugaKomunikacji+0x21c>
 800164e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001652:	4606      	mov	r6, r0
 8001654:	ee17 0a90 	vmov	r0, s15
 8001658:	460f      	mov	r7, r1
 800165a:	f7fe ff7d 	bl	8000558 <__aeabi_f2d>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4630      	mov	r0, r6
 8001664:	4639      	mov	r1, r7
 8001666:	f7ff f8f9 	bl	800085c <__aeabi_ddiv>
 800166a:	f7ff faa5 	bl	8000bb8 <__aeabi_d2f>
		Motor->current = (MC_GetPhaseCurrentAmplitudeMotor1() * 3.3)
 800166e:	6520      	str	r0, [r4, #80]	; 0x50
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "CURRENT:%.4fAMP",
 8001670:	f7fe ff72 	bl	8000558 <__aeabi_f2d>
 8001674:	460b      	mov	r3, r1
 8001676:	4602      	mov	r2, r0
 8001678:	4961      	ldr	r1, [pc, #388]	; (8001800 <Ds_ObslugaKomunikacji+0x220>)
 800167a:	4628      	mov	r0, r5
 800167c:	f007 fc04 	bl	8008e88 <siprintf>
 8001680:	b282      	uxth	r2, r0
 8001682:	84e2      	strh	r2, [r4, #38]	; 0x26
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
 8001684:	4629      	mov	r1, r5
 8001686:	485c      	ldr	r0, [pc, #368]	; (80017f8 <Ds_ObslugaKomunikacji+0x218>)
 8001688:	f004 fcd0 	bl	800602c <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 800168c:	200a      	movs	r0, #10
 800168e:	f003 fa39 	bl	8004b04 <HAL_Delay>
				pHandle->AvBusVoltage_d)
 8001692:	2300      	movs	r3, #0
 8001694:	88d8      	ldrh	r0, [r3, #6]
		Motor->voltage = (float) (((float) VBS_GetAvBusVoltage_V(
 8001696:	f004 ff15 	bl	80064c4 <VBS_GetAvBusVoltage_V>
 800169a:	ee08 0a10 	vmov	s16, r0
				* (float) MC_GetPhaseVoltageAmplitudeMotor1())
 800169e:	f000 fc99 	bl	8001fd4 <MC_GetPhaseVoltageAmplitudeMotor1>
 80016a2:	ee07 0a90 	vmov	s15, r0
		Motor->voltage = (float) (((float) VBS_GetAvBusVoltage_V(
 80016a6:	eeb8 8a48 	vcvt.f32.u32	s16, s16
				* (float) MC_GetPhaseVoltageAmplitudeMotor1())
 80016aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ae:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016b2:	ee17 0a90 	vmov	r0, s15
 80016b6:	f7fe ff4f 	bl	8000558 <__aeabi_f2d>
				/ (sqrt(3) * 32768));
 80016ba:	a34b      	add	r3, pc, #300	; (adr r3, 80017e8 <Ds_ObslugaKomunikacji+0x208>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ffa2 	bl	8000608 <__aeabi_dmul>
		Motor->voltage = (float) (((float) VBS_GetAvBusVoltage_V(
 80016c4:	f7ff fa78 	bl	8000bb8 <__aeabi_d2f>
 80016c8:	65a0      	str	r0, [r4, #88]	; 0x58
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "VOLTAGE:%.2fVLT",
 80016ca:	f7fe ff45 	bl	8000558 <__aeabi_f2d>
 80016ce:	460b      	mov	r3, r1
 80016d0:	4602      	mov	r2, r0
 80016d2:	494c      	ldr	r1, [pc, #304]	; (8001804 <Ds_ObslugaKomunikacji+0x224>)
 80016d4:	4628      	mov	r0, r5
 80016d6:	f007 fbd7 	bl	8008e88 <siprintf>
 80016da:	b282      	uxth	r2, r0
 80016dc:	84e2      	strh	r2, [r4, #38]	; 0x26
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
 80016de:	4629      	mov	r1, r5
 80016e0:	4845      	ldr	r0, [pc, #276]	; (80017f8 <Ds_ObslugaKomunikacji+0x218>)
 80016e2:	f004 fca3 	bl	800602c <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 80016e6:	200a      	movs	r0, #10
 80016e8:	f003 fa0c 	bl	8004b04 <HAL_Delay>
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "VALUE:%dSET",
 80016ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016ee:	4946      	ldr	r1, [pc, #280]	; (8001808 <Ds_ObslugaKomunikacji+0x228>)
 80016f0:	4628      	mov	r0, r5
 80016f2:	f007 fbc9 	bl	8008e88 <siprintf>
 80016f6:	b282      	uxth	r2, r0
 80016f8:	84e2      	strh	r2, [r4, #38]	; 0x26
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
 80016fa:	4629      	mov	r1, r5
 80016fc:	483e      	ldr	r0, [pc, #248]	; (80017f8 <Ds_ObslugaKomunikacji+0x218>)
 80016fe:	f004 fc95 	bl	800602c <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 8001702:	200a      	movs	r0, #10
 8001704:	f003 f9fe 	bl	8004b04 <HAL_Delay>
		Motor->temperature = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8001708:	4b40      	ldr	r3, [pc, #256]	; (800180c <Ds_ObslugaKomunikacji+0x22c>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	f005 f9be 	bl	8006a8c <NTC_GetAvTemp_C>
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "TEMP:%dCEL",
 8001710:	493f      	ldr	r1, [pc, #252]	; (8001810 <Ds_ObslugaKomunikacji+0x230>)
		Motor->temperature = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8001712:	8620      	strh	r0, [r4, #48]	; 0x30
 8001714:	4602      	mov	r2, r0
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "TEMP:%dCEL",
 8001716:	4628      	mov	r0, r5
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "KIM:%dIMIAN",
 8001718:	f007 fbb6 	bl	8008e88 <siprintf>
 800171c:	b282      	uxth	r2, r0
 800171e:	84e2      	strh	r2, [r4, #38]	; 0x26
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
 8001720:	4629      	mov	r1, r5
 8001722:	4835      	ldr	r0, [pc, #212]	; (80017f8 <Ds_ObslugaKomunikacji+0x218>)
 8001724:	f004 fc82 	bl	800602c <HAL_UART_Transmit_IT>
}
 8001728:	ecbd 8b02 	vpop	{d8}
		HAL_Delay(10);
 800172c:	200a      	movs	r0, #10
}
 800172e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_Delay(10);
 8001732:	f003 b9e7 	b.w	8004b04 <HAL_Delay>
		Motor->KP_licz = PID_GetKP(pPIDSpeed[motorID]);
 8001736:	4837      	ldr	r0, [pc, #220]	; (8001814 <Ds_ObslugaKomunikacji+0x234>)
 8001738:	f005 f9ca 	bl	8006ad0 <PID_GetKP>
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "KPL:%dPLICZ",
 800173c:	1de5      	adds	r5, r4, #7
		Motor->KP_licz = PID_GetKP(pPIDSpeed[motorID]);
 800173e:	b282      	uxth	r2, r0
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "KPL:%dPLICZ",
 8001740:	4935      	ldr	r1, [pc, #212]	; (8001818 <Ds_ObslugaKomunikacji+0x238>)
		Motor->KP_licz = PID_GetKP(pPIDSpeed[motorID]);
 8001742:	8522      	strh	r2, [r4, #40]	; 0x28
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "KPL:%dPLICZ",
 8001744:	4628      	mov	r0, r5
 8001746:	f007 fb9f 	bl	8008e88 <siprintf>
 800174a:	b282      	uxth	r2, r0
 800174c:	84e2      	strh	r2, [r4, #38]	; 0x26
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
 800174e:	4629      	mov	r1, r5
 8001750:	4829      	ldr	r0, [pc, #164]	; (80017f8 <Ds_ObslugaKomunikacji+0x218>)
 8001752:	f004 fc6b 	bl	800602c <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 8001756:	200a      	movs	r0, #10
 8001758:	f003 f9d4 	bl	8004b04 <HAL_Delay>
		Motor->KP_mian = PID_GetKPDivisor(pPIDSpeed[motorID]);
 800175c:	482d      	ldr	r0, [pc, #180]	; (8001814 <Ds_ObslugaKomunikacji+0x234>)
 800175e:	f005 f9c9 	bl	8006af4 <PID_GetKPDivisor>
 8001762:	b202      	sxth	r2, r0
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "KPM:%dPMIAN",
 8001764:	492d      	ldr	r1, [pc, #180]	; (800181c <Ds_ObslugaKomunikacji+0x23c>)
		Motor->KP_mian = PID_GetKPDivisor(pPIDSpeed[motorID]);
 8001766:	8662      	strh	r2, [r4, #50]	; 0x32
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "KPM:%dPMIAN",
 8001768:	4628      	mov	r0, r5
 800176a:	f007 fb8d 	bl	8008e88 <siprintf>
 800176e:	b282      	uxth	r2, r0
 8001770:	84e2      	strh	r2, [r4, #38]	; 0x26
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
 8001772:	4629      	mov	r1, r5
 8001774:	4820      	ldr	r0, [pc, #128]	; (80017f8 <Ds_ObslugaKomunikacji+0x218>)
 8001776:	f004 fc59 	bl	800602c <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 800177a:	200a      	movs	r0, #10
 800177c:	f003 f9c2 	bl	8004b04 <HAL_Delay>
		Motor->KI_licz = PID_GetKI(pPIDSpeed[motorID]);
 8001780:	4824      	ldr	r0, [pc, #144]	; (8001814 <Ds_ObslugaKomunikacji+0x234>)
 8001782:	f005 f9a9 	bl	8006ad8 <PID_GetKI>
 8001786:	b282      	uxth	r2, r0
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "KIL:%dILICZ",
 8001788:	4925      	ldr	r1, [pc, #148]	; (8001820 <Ds_ObslugaKomunikacji+0x240>)
		Motor->KI_licz = PID_GetKI(pPIDSpeed[motorID]);
 800178a:	8562      	strh	r2, [r4, #42]	; 0x2a
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "KIL:%dILICZ",
 800178c:	4628      	mov	r0, r5
 800178e:	f007 fb7b 	bl	8008e88 <siprintf>
 8001792:	b282      	uxth	r2, r0
 8001794:	84e2      	strh	r2, [r4, #38]	; 0x26
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
 8001796:	4629      	mov	r1, r5
 8001798:	4817      	ldr	r0, [pc, #92]	; (80017f8 <Ds_ObslugaKomunikacji+0x218>)
 800179a:	f004 fc47 	bl	800602c <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 800179e:	200a      	movs	r0, #10
 80017a0:	f003 f9b0 	bl	8004b04 <HAL_Delay>
		Motor->KI_mian = PID_GetKIDivisor(pPIDSpeed[motorID]);
 80017a4:	481b      	ldr	r0, [pc, #108]	; (8001814 <Ds_ObslugaKomunikacji+0x234>)
 80017a6:	f005 f9b1 	bl	8006b0c <PID_GetKIDivisor>
 80017aa:	b202      	sxth	r2, r0
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "KIM:%dIMIAN",
 80017ac:	491d      	ldr	r1, [pc, #116]	; (8001824 <Ds_ObslugaKomunikacji+0x244>)
		Motor->KI_mian = PID_GetKIDivisor(pPIDSpeed[motorID]);
 80017ae:	86a2      	strh	r2, [r4, #52]	; 0x34
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "KIM:%dIMIAN",
 80017b0:	4628      	mov	r0, r5
 80017b2:	e7b1      	b.n	8001718 <Ds_ObslugaKomunikacji+0x138>
		Motor->speed = MC_GetMecSpeedAverageMotor1() * 6;
 80017b4:	f000 fc02 	bl	8001fbc <MC_GetMecSpeedAverageMotor1>
 80017b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80017bc:	0042      	lsls	r2, r0, #1
 80017be:	b212      	sxth	r2, r2
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "SPEED:%dRPM",
 80017c0:	1de5      	adds	r5, r4, #7
		Motor->speed = MC_GetMecSpeedAverageMotor1() * 6;
 80017c2:	85a2      	strh	r2, [r4, #44]	; 0x2c
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "SPEED:%dRPM",
 80017c4:	490b      	ldr	r1, [pc, #44]	; (80017f4 <Ds_ObslugaKomunikacji+0x214>)
 80017c6:	4628      	mov	r0, r5
 80017c8:	f007 fb5e 	bl	8008e88 <siprintf>
}
 80017cc:	ecbd 8b02 	vpop	{d8}
		Motor->dl_kom = sprintf((char*) Motor->komunikat, "SPEED:%dRPM",
 80017d0:	b282      	uxth	r2, r0
 80017d2:	84e2      	strh	r2, [r4, #38]	; 0x26
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
 80017d4:	4629      	mov	r1, r5
 80017d6:	4808      	ldr	r0, [pc, #32]	; (80017f8 <Ds_ObslugaKomunikacji+0x218>)
}
 80017d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_UART_Transmit_IT(&huart2, Motor->komunikat, Motor->dl_kom);
 80017dc:	f004 bc26 	b.w	800602c <HAL_UART_Transmit_IT>
 80017e0:	7993462d 	.word	0x7993462d
 80017e4:	3fe462d7 	.word	0x3fe462d7
 80017e8:	4590331d 	.word	0x4590331d
 80017ec:	3ef279a7 	.word	0x3ef279a7
 80017f0:	20000580 	.word	0x20000580
 80017f4:	0800b3e8 	.word	0x0800b3e8
 80017f8:	2000086c 	.word	0x2000086c
 80017fc:	47800000 	.word	0x47800000
 8001800:	0800b3f4 	.word	0x0800b3f4
 8001804:	0800b404 	.word	0x0800b404
 8001808:	0800b414 	.word	0x0800b414
 800180c:	20000574 	.word	0x20000574
 8001810:	0800b420 	.word	0x0800b420
 8001814:	20000134 	.word	0x20000134
 8001818:	0800b42c 	.word	0x0800b42c
 800181c:	0800b438 	.word	0x0800b438
 8001820:	0800b444 	.word	0x0800b444
 8001824:	0800b450 	.word	0x0800b450

08001828 <Ds_Interrupt>:

void Ds_Interrupt(struct Ds_MotorInfo *Motor)
{
 8001828:	b570      	push	{r4, r5, r6, lr}
	char pom;

	if (Motor->buffer[0] == 's' && Motor->stan != Graph)
 800182a:	7843      	ldrb	r3, [r0, #1]
 800182c:	2b73      	cmp	r3, #115	; 0x73
{
 800182e:	4604      	mov	r4, r0
	if (Motor->buffer[0] == 's' && Motor->stan != Graph)
 8001830:	d029      	beq.n	8001886 <Ds_Interrupt+0x5e>
		pom = (char) Motor->buffer[5];
		Motor->zadanawartosc += (pom - '0');
		Motor->zadanawartosc = Motor->zadanawartosc * Motor->kierunek;
		MC_ProgramSpeedRampMotor1(Motor->zadanawartosc / 6, 1000);
	}
	else if (Motor->buffer[0] == 'e')
 8001832:	2b65      	cmp	r3, #101	; 0x65
 8001834:	d065      	beq.n	8001902 <Ds_Interrupt+0xda>
	{
		MC_StartMotor1();
	}
	else if (Motor->buffer[0] == 'd' && !(Motor->buffer[1] == 'e'))
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d01e      	beq.n	8001878 <Ds_Interrupt+0x50>
	{
		MC_StopMotor1();

	}
	else if (Motor->buffer[0] == 'k')
 800183a:	2b6b      	cmp	r3, #107	; 0x6b
 800183c:	461a      	mov	r2, r3
 800183e:	d050      	beq.n	80018e2 <Ds_Interrupt+0xba>
			Motor->kierunek = -1;
		}

	}

	else if (Motor->buffer[0] == 'p')
 8001840:	2b70      	cmp	r3, #112	; 0x70
 8001842:	f000 80cf 	beq.w	80019e4 <Ds_Interrupt+0x1bc>
		Motor->wartosc_KP += (pom - '0') * 10;
		pom = (char) Motor->buffer[5];
		Motor->wartosc_KP += (pom - '0') * 1;

	}
	else if (Motor->buffer[0] == 'i')
 8001846:	2b69      	cmp	r3, #105	; 0x69
 8001848:	f000 808e 	beq.w	8001968 <Ds_Interrupt+0x140>
		Motor->wartosc_KI += (pom - '0') * 10;
		pom = (char) Motor->buffer[5];
		Motor->wartosc_KI += (pom - '0') * 1;
	}

	else if (Motor->buffer[0] == 'c')
 800184c:	2b63      	cmp	r3, #99	; 0x63
 800184e:	f000 810e 	beq.w	8001a6e <Ds_Interrupt+0x246>
		PID_Handle_t *pPIDSpeed[NBR_OF_MOTORS] = { &PIDSpeedHandle_M1 };
		PID_SetKP(pPIDSpeed[motorID], Motor->wartosc_KP);
		PID_SetKI(pPIDSpeed[motorID], Motor->wartosc_KI);
	}

	else if (Motor->buffer[0] == 'f')
 8001852:	2b66      	cmp	r3, #102	; 0x66
 8001854:	f000 813d 	beq.w	8001ad2 <Ds_Interrupt+0x2aa>
		MCI_Handle_t *pMCI = &Mci[motorID];
		PID_Handle_t *pPIDSpeed[NBR_OF_MOTORS] = { &PIDSpeedHandle_M1 };
		PID_SetKP(pPIDSpeed[motorID], PID_GetDefaultKP(pPIDSpeed[motorID]));
		PID_SetKI(pPIDSpeed[motorID], PID_GetDefaultKI(pPIDSpeed[motorID]));
	}
	else if (Motor->buffer[0] == 'g')
 8001858:	2b67      	cmp	r3, #103	; 0x67
 800185a:	f000 8124 	beq.w	8001aa6 <Ds_Interrupt+0x27e>
	{
		Motor->stan = 3;
	}
	else if (Motor->buffer[0] == 'm')
 800185e:	2b6d      	cmp	r3, #109	; 0x6d
 8001860:	f040 814e 	bne.w	8001b00 <Ds_Interrupt+0x2d8>
	{
		Motor->stan = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
		Motor->zadanawartosc += (pom - '0');
		Motor->zadanawartosc = Motor->zadanawartosc * Motor->kierunek;
		MC_ProgramSpeedRampMotor1(Motor->zadanawartosc / 6, Motor->czas);
	}

	HAL_UART_Receive_IT(&huart2, Motor->buffer, 6);
 800186a:	1c61      	adds	r1, r4, #1
 800186c:	48bc      	ldr	r0, [pc, #752]	; (8001b60 <Ds_Interrupt+0x338>)

}
 800186e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Receive_IT(&huart2, Motor->buffer, 6);
 8001872:	2206      	movs	r2, #6
 8001874:	f004 bbfc 	b.w	8006070 <HAL_UART_Receive_IT>
	else if (Motor->buffer[0] == 'd' && !(Motor->buffer[1] == 'e'))
 8001878:	7883      	ldrb	r3, [r0, #2]
 800187a:	2b65      	cmp	r3, #101	; 0x65
 800187c:	d0f5      	beq.n	800186a <Ds_Interrupt+0x42>
		MC_StopMotor1();
 800187e:	f000 fb8f 	bl	8001fa0 <MC_StopMotor1>
 8001882:	7863      	ldrb	r3, [r4, #1]
 8001884:	e040      	b.n	8001908 <Ds_Interrupt+0xe0>
	if (Motor->buffer[0] == 's' && Motor->stan != Graph)
 8001886:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800188a:	2b03      	cmp	r3, #3
 800188c:	d143      	bne.n	8001916 <Ds_Interrupt+0xee>
		Motor->zadanawartosc += (pom - '0') * 1000;
 800188e:	78e0      	ldrb	r0, [r4, #3]
		Motor->zadanawartosc += (pom - '0') * 10000;
 8001890:	78a3      	ldrb	r3, [r4, #2]
		Motor->zadanawartosc += (pom - '0') * 100;
 8001892:	7922      	ldrb	r2, [r4, #4]
		Motor->zadanawartosc += (pom - '0') * 10;
 8001894:	7961      	ldrb	r1, [r4, #5]
		Motor->zadanawartosc += (pom - '0') * 1000;
 8001896:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 800189a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800189e:	fb00 f005 	mul.w	r0, r0, r5
		Motor->zadanawartosc += (pom - '0') * 10000;
 80018a2:	3b30      	subs	r3, #48	; 0x30
 80018a4:	f242 7510 	movw	r5, #10000	; 0x2710
		Motor->zadanawartosc += (pom - '0') * 1000;
 80018a8:	fb05 0303 	mla	r3, r5, r3, r0
		Motor->zadanawartosc += (pom - '0') * 100;
 80018ac:	3a30      	subs	r2, #48	; 0x30
		Motor->zadanawartosc += (pom - '0');
 80018ae:	79a5      	ldrb	r5, [r4, #6]
		Motor->zadanawartosc += (pom - '0') * 100;
 80018b0:	2064      	movs	r0, #100	; 0x64
		Motor->zadanawartosc += (pom - '0') * 10;
 80018b2:	3930      	subs	r1, #48	; 0x30
		Motor->zadanawartosc += (pom - '0') * 100;
 80018b4:	fb00 3302 	mla	r3, r0, r2, r3
		Motor->zadanawartosc += (pom - '0') * 10;
 80018b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
		Motor->zadanawartosc = Motor->zadanawartosc * Motor->kierunek;
 80018bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
		MC_ProgramSpeedRampMotor1(Motor->zadanawartosc / 6, Motor->czas);
 80018be:	48a9      	ldr	r0, [pc, #676]	; (8001b64 <Ds_Interrupt+0x33c>)
		Motor->zadanawartosc += (pom - '0') * 10;
 80018c0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
		Motor->zadanawartosc += (pom - '0');
 80018c4:	3d30      	subs	r5, #48	; 0x30
 80018c6:	442b      	add	r3, r5
		Motor->zadanawartosc = Motor->zadanawartosc * Motor->kierunek;
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
		MC_ProgramSpeedRampMotor1(Motor->zadanawartosc / 6, Motor->czas);
 80018cc:	fb80 2003 	smull	r2, r0, r0, r3
 80018d0:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 80018d4:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
		Motor->zadanawartosc = Motor->zadanawartosc * Motor->kierunek;
 80018d8:	6423      	str	r3, [r4, #64]	; 0x40
		MC_ProgramSpeedRampMotor1(Motor->zadanawartosc / 6, Motor->czas);
 80018da:	b200      	sxth	r0, r0
 80018dc:	f000 fb66 	bl	8001fac <MC_ProgramSpeedRampMotor1>
 80018e0:	e7c3      	b.n	800186a <Ds_Interrupt+0x42>
		if (Motor->buffer[1] == '1')
 80018e2:	7883      	ldrb	r3, [r0, #2]
 80018e4:	2b31      	cmp	r3, #49	; 0x31
 80018e6:	f000 80ba 	beq.w	8001a5e <Ds_Interrupt+0x236>
		if (Motor->buffer[1] == '0')
 80018ea:	2b30      	cmp	r3, #48	; 0x30
 80018ec:	d1bd      	bne.n	800186a <Ds_Interrupt+0x42>
			if (Motor->speed > 0)
 80018ee:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f300 80d4 	bgt.w	8001aa0 <Ds_Interrupt+0x278>
			Motor->kierunek = -1;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
 80018fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80018fe:	7863      	ldrb	r3, [r4, #1]
 8001900:	e002      	b.n	8001908 <Ds_Interrupt+0xe0>
		MC_StartMotor1();
 8001902:	f000 fb47 	bl	8001f94 <MC_StartMotor1>
 8001906:	7863      	ldrb	r3, [r4, #1]
	if (Motor->buffer[0] == 's' && Motor->stan == Graph)
 8001908:	2b73      	cmp	r3, #115	; 0x73
 800190a:	d1ae      	bne.n	800186a <Ds_Interrupt+0x42>
 800190c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8001910:	2b03      	cmp	r3, #3
 8001912:	d1aa      	bne.n	800186a <Ds_Interrupt+0x42>
 8001914:	e7bb      	b.n	800188e <Ds_Interrupt+0x66>
		Motor->zadanawartosc += (pom - '0') * 1000;
 8001916:	78c5      	ldrb	r5, [r0, #3]
		Motor->zadanawartosc += (pom - '0') * 10000;
 8001918:	7880      	ldrb	r0, [r0, #2]
		Motor->zadanawartosc += (pom - '0') * 100;
 800191a:	7923      	ldrb	r3, [r4, #4]
		Motor->zadanawartosc += (pom - '0') * 10;
 800191c:	7962      	ldrb	r2, [r4, #5]
		Motor->zadanawartosc += (pom - '0') * 1000;
 800191e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001922:	3d30      	subs	r5, #48	; 0x30
 8001924:	fb01 f505 	mul.w	r5, r1, r5
		Motor->zadanawartosc += (pom - '0') * 10000;
 8001928:	3830      	subs	r0, #48	; 0x30
 800192a:	f242 7610 	movw	r6, #10000	; 0x2710
		Motor->zadanawartosc += (pom - '0') * 1000;
 800192e:	fb06 5000 	mla	r0, r6, r0, r5
		Motor->zadanawartosc += (pom - '0') * 100;
 8001932:	3b30      	subs	r3, #48	; 0x30
 8001934:	2564      	movs	r5, #100	; 0x64
 8001936:	fb05 0303 	mla	r3, r5, r3, r0
		Motor->zadanawartosc += (pom - '0') * 10;
 800193a:	3a30      	subs	r2, #48	; 0x30
		Motor->zadanawartosc += (pom - '0');
 800193c:	79a0      	ldrb	r0, [r4, #6]
		Motor->zadanawartosc = Motor->zadanawartosc * Motor->kierunek;
 800193e:	6ca5      	ldr	r5, [r4, #72]	; 0x48
		Motor->zadanawartosc += (pom - '0') * 10;
 8001940:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001944:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		Motor->zadanawartosc += (pom - '0');
 8001948:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 800194c:	4413      	add	r3, r2
		MC_ProgramSpeedRampMotor1(Motor->zadanawartosc / 6, 1000);
 800194e:	4885      	ldr	r0, [pc, #532]	; (8001b64 <Ds_Interrupt+0x33c>)
		Motor->zadanawartosc = Motor->zadanawartosc * Motor->kierunek;
 8001950:	fb05 f303 	mul.w	r3, r5, r3
		MC_ProgramSpeedRampMotor1(Motor->zadanawartosc / 6, 1000);
 8001954:	fb80 2003 	smull	r2, r0, r0, r3
 8001958:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
		Motor->zadanawartosc = Motor->zadanawartosc * Motor->kierunek;
 800195c:	6423      	str	r3, [r4, #64]	; 0x40
		MC_ProgramSpeedRampMotor1(Motor->zadanawartosc / 6, 1000);
 800195e:	b200      	sxth	r0, r0
 8001960:	f000 fb24 	bl	8001fac <MC_ProgramSpeedRampMotor1>
 8001964:	7863      	ldrb	r3, [r4, #1]
 8001966:	e7cf      	b.n	8001908 <Ds_Interrupt+0xe0>
		if (Motor->speed != 0)
 8001968:	f9b0 202c 	ldrsh.w	r2, [r0, #44]	; 0x2c
 800196c:	2a00      	cmp	r2, #0
 800196e:	f040 80c3 	bne.w	8001af8 <Ds_Interrupt+0x2d0>
		Motor->wartosc_KI += (pom - '0') * 10000;
 8001972:	78a2      	ldrb	r2, [r4, #2]
		Motor->wartosc_KI += (pom - '0') * 1000;
 8001974:	78e5      	ldrb	r5, [r4, #3]
		Motor->wartosc_KI += (pom - '0') * 1;
 8001976:	79a0      	ldrb	r0, [r4, #6]
		Motor->wartosc_KI += (pom - '0') * 10000;
 8001978:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800197c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001980:	fb02 f201 	mul.w	r2, r2, r1
		Motor->wartosc_KI += (pom - '0') * 1000;
 8001984:	3d30      	subs	r5, #48	; 0x30
 8001986:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800198a:	fb01 f105 	mul.w	r1, r1, r5
		Motor->wartosc_KI += (pom - '0') * 10000;
 800198e:	ee07 2a90 	vmov	s15, r2
		Motor->wartosc_KI += (pom - '0') * 1000;
 8001992:	ee06 1a90 	vmov	s13, r1
		Motor->wartosc_KI += (pom - '0') * 100;
 8001996:	7921      	ldrb	r1, [r4, #4]
		Motor->wartosc_KI += (pom - '0') * 10;
 8001998:	7962      	ldrb	r2, [r4, #5]
		Motor->wartosc_KI += (pom - '0') * 1;
 800199a:	3830      	subs	r0, #48	; 0x30
		Motor->wartosc_KI += (pom - '0') * 10000;
 800199c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
		Motor->wartosc_KI += (pom - '0') * 1000;
 80019a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		Motor->wartosc_KI += (pom - '0') * 1;
 80019a4:	ee07 0a10 	vmov	s14, r0
		Motor->wartosc_KI += (pom - '0') * 100;
 80019a8:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80019ac:	2164      	movs	r1, #100	; 0x64
 80019ae:	fb01 f100 	mul.w	r1, r1, r0
		Motor->wartosc_KI += (pom - '0') * 1;
 80019b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		Motor->wartosc_KI += (pom - '0') * 1000;
 80019b6:	ee35 6aa6 	vadd.f32	s12, s11, s13
		Motor->wartosc_KI += (pom - '0') * 100;
 80019ba:	ee07 1a90 	vmov	s15, r1
		Motor->wartosc_KI += (pom - '0') * 10;
 80019be:	3a30      	subs	r2, #48	; 0x30
		Motor->wartosc_KI += (pom - '0') * 100;
 80019c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		Motor->wartosc_KI += (pom - '0') * 1;
 80019c4:	ee76 6a07 	vadd.f32	s13, s12, s14
		Motor->wartosc_KI += (pom - '0') * 10;
 80019c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019cc:	0052      	lsls	r2, r2, #1
		Motor->wartosc_KI += (pom - '0') * 1;
 80019ce:	ee36 7aa7 	vadd.f32	s14, s13, s15
		Motor->wartosc_KI += (pom - '0') * 10;
 80019d2:	ee07 2a90 	vmov	s15, r2
 80019d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		Motor->wartosc_KI += (pom - '0') * 1;
 80019da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019de:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80019e2:	e791      	b.n	8001908 <Ds_Interrupt+0xe0>
		if (Motor->speed != 0)
 80019e4:	f9b0 202c 	ldrsh.w	r2, [r0, #44]	; 0x2c
 80019e8:	2a00      	cmp	r2, #0
 80019ea:	d16e      	bne.n	8001aca <Ds_Interrupt+0x2a2>
		Motor->wartosc_KP += (pom - '0') * 10000;
 80019ec:	78a2      	ldrb	r2, [r4, #2]
		Motor->wartosc_KP += (pom - '0') * 1000;
 80019ee:	78e5      	ldrb	r5, [r4, #3]
		Motor->wartosc_KP += (pom - '0') * 1;
 80019f0:	79a0      	ldrb	r0, [r4, #6]
		Motor->wartosc_KP += (pom - '0') * 10000;
 80019f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80019f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80019fa:	fb02 f201 	mul.w	r2, r2, r1
		Motor->wartosc_KP += (pom - '0') * 1000;
 80019fe:	3d30      	subs	r5, #48	; 0x30
 8001a00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a04:	fb01 f105 	mul.w	r1, r1, r5
		Motor->wartosc_KP += (pom - '0') * 10000;
 8001a08:	ee07 2a90 	vmov	s15, r2
		Motor->wartosc_KP += (pom - '0') * 1000;
 8001a0c:	ee06 1a90 	vmov	s13, r1
		Motor->wartosc_KP += (pom - '0') * 100;
 8001a10:	7921      	ldrb	r1, [r4, #4]
		Motor->wartosc_KP += (pom - '0') * 10;
 8001a12:	7962      	ldrb	r2, [r4, #5]
		Motor->wartosc_KP += (pom - '0') * 1;
 8001a14:	3830      	subs	r0, #48	; 0x30
		Motor->wartosc_KP += (pom - '0') * 10000;
 8001a16:	eef8 5ae7 	vcvt.f32.s32	s11, s15
		Motor->wartosc_KP += (pom - '0') * 1000;
 8001a1a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		Motor->wartosc_KP += (pom - '0') * 1;
 8001a1e:	ee07 0a10 	vmov	s14, r0
		Motor->wartosc_KP += (pom - '0') * 100;
 8001a22:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8001a26:	2164      	movs	r1, #100	; 0x64
 8001a28:	fb01 f100 	mul.w	r1, r1, r0
		Motor->wartosc_KP += (pom - '0') * 1;
 8001a2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		Motor->wartosc_KP += (pom - '0') * 1000;
 8001a30:	ee35 6aa6 	vadd.f32	s12, s11, s13
		Motor->wartosc_KP += (pom - '0') * 100;
 8001a34:	ee07 1a90 	vmov	s15, r1
		Motor->wartosc_KP += (pom - '0') * 10;
 8001a38:	3a30      	subs	r2, #48	; 0x30
		Motor->wartosc_KP += (pom - '0') * 100;
 8001a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		Motor->wartosc_KP += (pom - '0') * 1;
 8001a3e:	ee76 6a07 	vadd.f32	s13, s12, s14
		Motor->wartosc_KP += (pom - '0') * 10;
 8001a42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a46:	0052      	lsls	r2, r2, #1
		Motor->wartosc_KP += (pom - '0') * 1;
 8001a48:	ee36 7aa7 	vadd.f32	s14, s13, s15
		Motor->wartosc_KP += (pom - '0') * 10;
 8001a4c:	ee07 2a90 	vmov	s15, r2
 8001a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		Motor->wartosc_KP += (pom - '0') * 1;
 8001a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a58:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 8001a5c:	e754      	b.n	8001908 <Ds_Interrupt+0xe0>
			if (Motor->speed < 0)
 8001a5e:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db26      	blt.n	8001ab4 <Ds_Interrupt+0x28c>
			Motor->kierunek = 1;
 8001a66:	2301      	movs	r3, #1
 8001a68:	6483      	str	r3, [r0, #72]	; 0x48
		if (Motor->buffer[1] == '0')
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	e74c      	b.n	8001908 <Ds_Interrupt+0xe0>
		if (Motor->speed != 0)
 8001a6e:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 8001a72:	b9e3      	cbnz	r3, 8001aae <Ds_Interrupt+0x286>
		PID_SetKP(pPIDSpeed[motorID], Motor->wartosc_KP);
 8001a74:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8001a78:	483b      	ldr	r0, [pc, #236]	; (8001b68 <Ds_Interrupt+0x340>)
 8001a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7e:	ee17 3a90 	vmov	r3, s15
 8001a82:	b219      	sxth	r1, r3
 8001a84:	f005 f820 	bl	8006ac8 <PID_SetKP>
		PID_SetKI(pPIDSpeed[motorID], Motor->wartosc_KI);
 8001a88:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 8001a8c:	4836      	ldr	r0, [pc, #216]	; (8001b68 <Ds_Interrupt+0x340>)
 8001a8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a92:	ee17 3a90 	vmov	r3, s15
 8001a96:	b219      	sxth	r1, r3
 8001a98:	f005 f818 	bl	8006acc <PID_SetKI>
 8001a9c:	7863      	ldrb	r3, [r4, #1]
 8001a9e:	e733      	b.n	8001908 <Ds_Interrupt+0xe0>
				MC_StopMotor1();
 8001aa0:	f000 fa7e 	bl	8001fa0 <MC_StopMotor1>
 8001aa4:	e728      	b.n	80018f8 <Ds_Interrupt+0xd0>
		Motor->stan = 3;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8001aac:	e6dd      	b.n	800186a <Ds_Interrupt+0x42>
			MC_StopMotor1();
 8001aae:	f000 fa77 	bl	8001fa0 <MC_StopMotor1>
 8001ab2:	e7df      	b.n	8001a74 <Ds_Interrupt+0x24c>
				MC_StopMotor1();
 8001ab4:	f000 fa74 	bl	8001fa0 <MC_StopMotor1>
 8001ab8:	78a3      	ldrb	r3, [r4, #2]
			Motor->kierunek = 1;
 8001aba:	2201      	movs	r2, #1
		if (Motor->buffer[1] == '0')
 8001abc:	2b30      	cmp	r3, #48	; 0x30
			Motor->kierunek = 1;
 8001abe:	64a2      	str	r2, [r4, #72]	; 0x48
		if (Motor->buffer[1] == '0')
 8001ac0:	f43f af15 	beq.w	80018ee <Ds_Interrupt+0xc6>
 8001ac4:	7862      	ldrb	r2, [r4, #1]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	e71e      	b.n	8001908 <Ds_Interrupt+0xe0>
			MC_StopMotor1();
 8001aca:	f000 fa69 	bl	8001fa0 <MC_StopMotor1>
 8001ace:	7863      	ldrb	r3, [r4, #1]
 8001ad0:	e78c      	b.n	80019ec <Ds_Interrupt+0x1c4>
		if (Motor->speed != 0)
 8001ad2:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 8001ad6:	b9cb      	cbnz	r3, 8001b0c <Ds_Interrupt+0x2e4>
		PID_SetKP(pPIDSpeed[motorID], PID_GetDefaultKP(pPIDSpeed[motorID]));
 8001ad8:	4823      	ldr	r0, [pc, #140]	; (8001b68 <Ds_Interrupt+0x340>)
 8001ada:	f005 f801 	bl	8006ae0 <PID_GetDefaultKP>
 8001ade:	4601      	mov	r1, r0
 8001ae0:	4821      	ldr	r0, [pc, #132]	; (8001b68 <Ds_Interrupt+0x340>)
 8001ae2:	f004 fff1 	bl	8006ac8 <PID_SetKP>
		PID_SetKI(pPIDSpeed[motorID], PID_GetDefaultKI(pPIDSpeed[motorID]));
 8001ae6:	4820      	ldr	r0, [pc, #128]	; (8001b68 <Ds_Interrupt+0x340>)
 8001ae8:	f004 fffe 	bl	8006ae8 <PID_GetDefaultKI>
 8001aec:	4601      	mov	r1, r0
 8001aee:	481e      	ldr	r0, [pc, #120]	; (8001b68 <Ds_Interrupt+0x340>)
 8001af0:	f004 ffec 	bl	8006acc <PID_SetKI>
 8001af4:	7863      	ldrb	r3, [r4, #1]
 8001af6:	e707      	b.n	8001908 <Ds_Interrupt+0xe0>
			MC_StopMotor1();
 8001af8:	f000 fa52 	bl	8001fa0 <MC_StopMotor1>
 8001afc:	7863      	ldrb	r3, [r4, #1]
 8001afe:	e738      	b.n	8001972 <Ds_Interrupt+0x14a>
	else if (Motor->buffer[0] == 'v')
 8001b00:	2b76      	cmp	r3, #118	; 0x76
 8001b02:	d106      	bne.n	8001b12 <Ds_Interrupt+0x2ea>
		Motor->stan = 2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8001b0a:	e6ae      	b.n	800186a <Ds_Interrupt+0x42>
			MC_StopMotor1();
 8001b0c:	f000 fa48 	bl	8001fa0 <MC_StopMotor1>
 8001b10:	e7e2      	b.n	8001ad8 <Ds_Interrupt+0x2b0>
	else if (Motor->buffer[0] == 't' && Motor->stan == Graph)
 8001b12:	2b74      	cmp	r3, #116	; 0x74
 8001b14:	f47f aea9 	bne.w	800186a <Ds_Interrupt+0x42>
 8001b18:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	f47f aea4 	bne.w	800186a <Ds_Interrupt+0x42>
		Motor->czas += (pom - '0') * 1000;
 8001b22:	78c0      	ldrb	r0, [r0, #3]
		Motor->czas += (pom - '0') * 10000;
 8001b24:	78a1      	ldrb	r1, [r4, #2]
		Motor->czas += (pom - '0') * 100;
 8001b26:	7923      	ldrb	r3, [r4, #4]
		Motor->czas += (pom - '0') * 10;
 8001b28:	7962      	ldrb	r2, [r4, #5]
		Motor->czas += (pom - '0') * 1000;
 8001b2a:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
 8001b2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b32:	fb00 f005 	mul.w	r0, r0, r5
		Motor->czas += (pom - '0') * 10000;
 8001b36:	3930      	subs	r1, #48	; 0x30
 8001b38:	f242 7510 	movw	r5, #10000	; 0x2710
		Motor->czas += (pom - '0') * 1000;
 8001b3c:	fb05 0101 	mla	r1, r5, r1, r0
		Motor->czas += (pom - '0') * 100;
 8001b40:	3b30      	subs	r3, #48	; 0x30
		Motor->czas += (pom - '0');
 8001b42:	79a0      	ldrb	r0, [r4, #6]
		Motor->czas += (pom - '0') * 100;
 8001b44:	2564      	movs	r5, #100	; 0x64
		Motor->czas += (pom - '0') * 10;
 8001b46:	3a30      	subs	r2, #48	; 0x30
 8001b48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
		Motor->czas += (pom - '0') * 100;
 8001b4c:	fb05 1303 	mla	r3, r5, r3, r1
		Motor->czas += (pom - '0') * 10;
 8001b50:	eb03 0342 	add.w	r3, r3, r2, lsl #1
		Motor->czas += (pom - '0');
 8001b54:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8001b58:	4413      	add	r3, r2
 8001b5a:	6463      	str	r3, [r4, #68]	; 0x44
 8001b5c:	e685      	b.n	800186a <Ds_Interrupt+0x42>
 8001b5e:	bf00      	nop
 8001b60:	2000086c 	.word	0x2000086c
 8001b64:	2aaaaaab 	.word	0x2aaaaaab
 8001b68:	20000134 	.word	0x20000134

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6e:	2300      	movs	r3, #0
{
 8001b70:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8001b76:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001b7e:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4923      	ldr	r1, [pc, #140]	; (8001c10 <SystemClock_Config+0xa4>)
 8001b84:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b86:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b88:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b8a:	4a22      	ldr	r2, [pc, #136]	; (8001c14 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001b90:	6408      	str	r0, [r1, #64]	; 0x40
 8001b92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b94:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001b98:	9100      	str	r1, [sp, #0]
 8001b9a:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	6813      	ldr	r3, [r2, #0]
 8001ba0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	6813      	ldr	r3, [r2, #0]
 8001bac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bb0:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bb2:	2401      	movs	r4, #1
 8001bb4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb8:	2202      	movs	r2, #2
 8001bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bbe:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001bc6:	2404      	movs	r4, #4
 8001bc8:	2554      	movs	r5, #84	; 0x54
 8001bca:	2202      	movs	r2, #2
 8001bcc:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 84;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bce:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8001bd4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bd8:	9901      	ldr	r1, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bda:	f003 fba7 	bl	800532c <HAL_RCC_OscConfig>
 8001bde:	b108      	cbz	r0, 8001be4 <SystemClock_Config+0x78>
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001be4:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be6:	240f      	movs	r4, #15
 8001be8:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bea:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bf2:	a802      	add	r0, sp, #8
 8001bf4:	2102      	movs	r1, #2
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001bfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bfe:	f003 fdb7 	bl	8005770 <HAL_RCC_ClockConfig>
 8001c02:	b108      	cbz	r0, 8001c08 <SystemClock_Config+0x9c>
 8001c04:	b672      	cpsid	i
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <SystemClock_Config+0x9a>
  HAL_RCC_EnableCSS();
 8001c08:	f003 fd76 	bl	80056f8 <HAL_RCC_EnableCSS>
}
 8001c0c:	b015      	add	sp, #84	; 0x54
 8001c0e:	bd30      	pop	{r4, r5, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40007000 	.word	0x40007000

08001c18 <main>:
{
 8001c18:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	2400      	movs	r4, #0
{
 8001c1c:	b09c      	sub	sp, #112	; 0x70
  HAL_Init();
 8001c1e:	f002 ff45 	bl	8004aac <HAL_Init>
  SystemClock_Config();
 8001c22:	f7ff ffa3 	bl	8001b6c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c26:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8001c2a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2e:	4ba4      	ldr	r3, [pc, #656]	; (8001ec0 <main+0x2a8>)
 8001c30:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c32:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c36:	48a3      	ldr	r0, [pc, #652]	; (8001ec4 <main+0x2ac>)
  hadc1.Instance = ADC1;
 8001c38:	4da3      	ldr	r5, [pc, #652]	; (8001ec8 <main+0x2b0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	f042 0204 	orr.w	r2, r2, #4
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c42:	f002 0204 	and.w	r2, r2, #4
 8001c46:	9200      	str	r2, [sp, #0]
 8001c48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4a:	9401      	str	r4, [sp, #4]
 8001c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
 8001c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c56:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001c5a:	9201      	str	r2, [sp, #4]
 8001c5c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	9402      	str	r4, [sp, #8]
 8001c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
 8001c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c6a:	f002 0201 	and.w	r2, r2, #1
 8001c6e:	9202      	str	r2, [sp, #8]
 8001c70:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	9403      	str	r4, [sp, #12]
 8001c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c76:	f042 0202 	orr.w	r2, r2, #2
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c84:	4622      	mov	r2, r4
 8001c86:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c88:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c8a:	f003 fb4b 	bl	8005324 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001c96:	488d      	ldr	r0, [pc, #564]	; (8001ecc <main+0x2b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001c9c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ca0:	2600      	movs	r6, #0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f003 fa53 	bl	800514c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ca6:	2700      	movs	r7, #0
 8001ca8:	2301      	movs	r3, #1
 8001caa:	2220      	movs	r2, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cac:	4885      	ldr	r0, [pc, #532]	; (8001ec4 <main+0x2ac>)
 8001cae:	a914      	add	r1, sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001cb0:	f04f 0920 	mov.w	r9, #32
  GPIO_InitStruct.Pin = LD2_Pin;
 8001cb4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8001cb8:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cbc:	f003 fa46 	bl	800514c <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	464a      	mov	r2, r9
 8001cc4:	a814      	add	r0, sp, #80	; 0x50
 8001cc6:	f006 fc6d 	bl	80085a4 <memset>
  hadc1.Instance = ADC1;
 8001cca:	4a81      	ldr	r2, [pc, #516]	; (8001ed0 <main+0x2b8>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ccc:	4981      	ldr	r1, [pc, #516]	; (8001ed4 <main+0x2bc>)
  hadc1.Instance = ADC1;
 8001cce:	602a      	str	r2, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.ScanConvMode = ENABLE;
 8001cd4:	f04f 0801 	mov.w	r8, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cdc:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cde:	4628      	mov	r0, r5
  hadc1.Init.NbrOfConversion = 2;
 8001ce0:	2302      	movs	r3, #2
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ce2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8001ce6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cea:	e9c5 8804 	strd	r8, r8, [r5, #16]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cee:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cf0:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cf2:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cf6:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cf8:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cfc:	62a9      	str	r1, [r5, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001cfe:	60ea      	str	r2, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001d00:	61eb      	str	r3, [r5, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d02:	f002 ff11 	bl	8004b28 <HAL_ADC_Init>
 8001d06:	b108      	cbz	r0, 8001d0c <main+0xf4>
 8001d08:	b672      	cpsid	i
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <main+0xf2>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d12:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8001d16:	2200      	movs	r2, #0
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001d1e:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001d22:	2403      	movs	r4, #3
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8001d24:	2201      	movs	r2, #1
 8001d26:	2300      	movs	r3, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001d28:	a914      	add	r1, sp, #80	; 0x50
 8001d2a:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8001d2c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001d30:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001d32:	f003 f84f 	bl	8004dd4 <HAL_ADCEx_InjectedConfigChannel>
 8001d36:	b108      	cbz	r0, 8001d3c <main+0x124>
 8001d38:	b672      	cpsid	i
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <main+0x122>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001d3c:	220b      	movs	r2, #11
 8001d3e:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001d40:	a914      	add	r1, sp, #80	; 0x50
 8001d42:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001d44:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001d48:	f003 f844 	bl	8004dd4 <HAL_ADCEx_InjectedConfigChannel>
 8001d4c:	b108      	cbz	r0, 8001d52 <main+0x13a>
 8001d4e:	b672      	cpsid	i
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <main+0x138>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8001d52:	220a      	movs	r2, #10
 8001d54:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001d56:	a914      	add	r1, sp, #80	; 0x50
 8001d58:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8001d5a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001d5e:	f003 f839 	bl	8004dd4 <HAL_ADCEx_InjectedConfigChannel>
 8001d62:	b108      	cbz	r0, 8001d68 <main+0x150>
 8001d64:	b672      	cpsid	i
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <main+0x14e>
  sConfig.Channel = ADC_CHANNEL_1;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d70:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_1;
 8001d72:	2202      	movs	r2, #2
 8001d74:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d76:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8001d78:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d7c:	f002 ff82 	bl	8004c84 <HAL_ADC_ConfigChannel>
 8001d80:	b108      	cbz	r0, 8001d86 <main+0x16e>
 8001d82:	b672      	cpsid	i
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <main+0x16c>
  sConfig.Channel = ADC_CHANNEL_12;
 8001d86:	220c      	movs	r2, #12
 8001d88:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_12;
 8001d8e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d92:	f002 ff77 	bl	8004c84 <HAL_ADC_ConfigChannel>
 8001d96:	4604      	mov	r4, r0
 8001d98:	b108      	cbz	r0, 8001d9e <main+0x186>
 8001d9a:	b672      	cpsid	i
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <main+0x184>
  htim1.Instance = TIM1;
 8001d9e:	4d4e      	ldr	r5, [pc, #312]	; (8001ed8 <main+0x2c0>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001da0:	9006      	str	r0, [sp, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001da2:	4601      	mov	r1, r0
 8001da4:	464a      	mov	r2, r9
 8001da6:	a814      	add	r0, sp, #80	; 0x50
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8001dac:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001db0:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001db4:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001db8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dbe:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc0:	9405      	str	r4, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dc2:	f006 fbef 	bl	80085a4 <memset>
  htim1.Instance = TIM1;
 8001dc6:	4945      	ldr	r1, [pc, #276]	; (8001edc <main+0x2c4>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001dc8:	606c      	str	r4, [r5, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001dca:	f44f 62af 	mov.w	r2, #1400	; 0x578
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001dce:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dd2:	4628      	mov	r0, r5
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd4:	e9c5 8405 	strd	r8, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001dd8:	e9c5 2303 	strd	r2, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ddc:	f8c5 9008 	str.w	r9, [r5, #8]
  htim1.Instance = TIM1;
 8001de0:	6029      	str	r1, [r5, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001de2:	f003 fd89 	bl	80058f8 <HAL_TIM_Base_Init>
 8001de6:	b108      	cbz	r0, 8001dec <main+0x1d4>
 8001de8:	b672      	cpsid	i
  while (1)
 8001dea:	e7fe      	b.n	8001dea <main+0x1d2>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dec:	4628      	mov	r0, r5
 8001dee:	f003 fe03 	bl	80059f8 <HAL_TIM_PWM_Init>
 8001df2:	b108      	cbz	r0, 8001df8 <main+0x1e0>
 8001df4:	b672      	cpsid	i
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <main+0x1de>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001df8:	2206      	movs	r2, #6
 8001dfa:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001dfc:	a906      	add	r1, sp, #24
 8001dfe:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001e00:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001e04:	f003 ff86 	bl	8005d14 <HAL_TIM_SlaveConfigSynchro>
 8001e08:	b108      	cbz	r0, 8001e0e <main+0x1f6>
 8001e0a:	b672      	cpsid	i
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <main+0x1f4>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e0e:	a904      	add	r1, sp, #16
 8001e10:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e12:	e9cd 6704 	strd	r6, r7, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e16:	f004 f809 	bl	8005e2c <HAL_TIMEx_MasterConfigSynchronization>
 8001e1a:	b108      	cbz	r0, 8001e20 <main+0x208>
 8001e1c:	b672      	cpsid	i
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <main+0x206>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e20:	2060      	movs	r0, #96	; 0x60
 8001e22:	2100      	movs	r1, #0
 8001e24:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001e28:	2000      	movs	r0, #0
 8001e2a:	2108      	movs	r1, #8
 8001e2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001e30:	2000      	movs	r0, #0
 8001e32:	2100      	movs	r1, #0
 8001e34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001e38:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e3c:	4826      	ldr	r0, [pc, #152]	; (8001ed8 <main+0x2c0>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001e3e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e40:	2200      	movs	r2, #0
 8001e42:	a90c      	add	r1, sp, #48	; 0x30
 8001e44:	f003 fe56 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8001e48:	b108      	cbz	r0, 8001e4e <main+0x236>
 8001e4a:	b672      	cpsid	i
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <main+0x234>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e4e:	4822      	ldr	r0, [pc, #136]	; (8001ed8 <main+0x2c0>)
 8001e50:	2204      	movs	r2, #4
 8001e52:	a90c      	add	r1, sp, #48	; 0x30
 8001e54:	f003 fe4e 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8001e58:	b108      	cbz	r0, 8001e5e <main+0x246>
 8001e5a:	b672      	cpsid	i
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <main+0x244>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e5e:	481e      	ldr	r0, [pc, #120]	; (8001ed8 <main+0x2c0>)
 8001e60:	2208      	movs	r2, #8
 8001e62:	a90c      	add	r1, sp, #48	; 0x30
 8001e64:	f003 fe46 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8001e68:	b108      	cbz	r0, 8001e6e <main+0x256>
 8001e6a:	b672      	cpsid	i
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <main+0x254>
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e6e:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e70:	a90c      	add	r1, sp, #48	; 0x30
 8001e72:	4819      	ldr	r0, [pc, #100]	; (8001ed8 <main+0x2c0>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001e74:	2470      	movs	r4, #112	; 0x70
 8001e76:	f240 5577 	movw	r5, #1399	; 0x577
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e7a:	220c      	movs	r2, #12
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001e7c:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e80:	f003 fe38 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8001e84:	4603      	mov	r3, r0
 8001e86:	b108      	cbz	r0, 8001e8c <main+0x274>
 8001e88:	b672      	cpsid	i
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <main+0x272>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e8c:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001e8e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001e92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e96:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e98:	480f      	ldr	r0, [pc, #60]	; (8001ed8 <main+0x2c0>)
 8001e9a:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001e9c:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8001ea0:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8001ea4:	2521      	movs	r5, #33	; 0x21
 8001ea6:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 8001eaa:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 8001eae:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001eb2:	f003 fff5 	bl	8005ea0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	b190      	cbz	r0, 8001ee0 <main+0x2c8>
 8001eba:	b672      	cpsid	i
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <main+0x2a4>
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	200008b0 	.word	0x200008b0
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40012000 	.word	0x40012000
 8001ed4:	0f000001 	.word	0x0f000001
 8001ed8:	200008f8 	.word	0x200008f8
 8001edc:	40010000 	.word	0x40010000
  HAL_TIM_MspPostInit(&htim1);
 8001ee0:	4822      	ldr	r0, [pc, #136]	; (8001f6c <main+0x354>)
 8001ee2:	f002 fbaf 	bl	8004644 <HAL_TIM_MspPostInit>
  MX_MotorControl_Init();
 8001ee6:	f000 ff69 	bl	8002dbc <MX_MotorControl_Init>
  huart2.Instance = USART2;
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <main+0x358>)
 8001eec:	4821      	ldr	r0, [pc, #132]	; (8001f74 <main+0x35c>)
 8001eee:	6018      	str	r0, [r3, #0]
  huart2.Init.Parity = UART_PARITY_ODD;
 8001ef0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef4:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 19200;
 8001ef6:	f44f 4696 	mov.w	r6, #19200	; 0x4b00
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001efa:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001efe:	4618      	mov	r0, r3
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f00:	e9c3 4406 	strd	r4, r4, [r3, #24]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f04:	60dc      	str	r4, [r3, #12]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001f06:	e9c3 6501 	strd	r6, r5, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f0a:	e9c3 1204 	strd	r1, r2, [r3, #16]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f0e:	f003 fff1 	bl	8005ef4 <HAL_UART_Init>
 8001f12:	4604      	mov	r4, r0
 8001f14:	b108      	cbz	r0, 8001f1a <main+0x302>
 8001f16:	b672      	cpsid	i
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <main+0x300>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	2012      	movs	r0, #18
 8001f20:	f003 f854 	bl	8004fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f24:	2012      	movs	r0, #18
 8001f26:	f003 f889 	bl	800503c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f2a:	4622      	mov	r2, r4
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	2019      	movs	r0, #25
 8001f30:	f003 f84c 	bl	8004fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f34:	2019      	movs	r0, #25
 8001f36:	f003 f881 	bl	800503c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	2018      	movs	r0, #24
 8001f40:	f003 f844 	bl	8004fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f44:	2018      	movs	r0, #24
 8001f46:	f003 f879 	bl	800503c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	2103      	movs	r1, #3
 8001f4e:	2028      	movs	r0, #40	; 0x28
 8001f50:	f003 f83c 	bl	8004fcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f54:	2028      	movs	r0, #40	; 0x28
 8001f56:	f003 f871 	bl	800503c <HAL_NVIC_EnableIRQ>
  Ds_Init(&Motor);
 8001f5a:	4807      	ldr	r0, [pc, #28]	; (8001f78 <main+0x360>)
	  Ds_ObslugaKomunikacji(&Motor);
 8001f5c:	4604      	mov	r4, r0
  Ds_Init(&Motor);
 8001f5e:	f7ff fb25 	bl	80015ac <Ds_Init>
	  Ds_ObslugaKomunikacji(&Motor);
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff fb3c 	bl	80015e0 <Ds_ObslugaKomunikacji>
  while (1)
 8001f68:	e7fb      	b.n	8001f62 <main+0x34a>
 8001f6a:	bf00      	nop
 8001f6c:	200008f8 	.word	0x200008f8
 8001f70:	2000086c 	.word	0x2000086c
 8001f74:	40004400 	.word	0x40004400
 8001f78:	20000940 	.word	0x20000940

08001f7c <HAL_UART_RxCpltCallback>:
	if(huart->Instance == USART2)
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_UART_RxCpltCallback+0x10>)
 8001f7e:	6802      	ldr	r2, [r0, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d000      	beq.n	8001f86 <HAL_UART_RxCpltCallback+0xa>
}
 8001f84:	4770      	bx	lr
		Ds_Interrupt(&Motor);
 8001f86:	4802      	ldr	r0, [pc, #8]	; (8001f90 <HAL_UART_RxCpltCallback+0x14>)
 8001f88:	f7ff bc4e 	b.w	8001828 <Ds_Interrupt>
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	20000940 	.word	0x20000940

08001f94 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001f94:	4b01      	ldr	r3, [pc, #4]	; (8001f9c <MC_StartMotor1+0x8>)
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	f000 b856 	b.w	8002048 <MCI_StartMotor>
 8001f9c:	20001ca0 	.word	0x20001ca0

08001fa0 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001fa0:	4b01      	ldr	r3, [pc, #4]	; (8001fa8 <MC_StopMotor1+0x8>)
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	f000 b85a 	b.w	800205c <MCI_StopMotor>
 8001fa8:	20001ca0 	.word	0x20001ca0

08001fac <MC_ProgramSpeedRampMotor1>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1( int16_t hFinalSpeed, uint16_t hDurationms )
{
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8001fac:	4b02      	ldr	r3, [pc, #8]	; (8001fb8 <MC_ProgramSpeedRampMotor1+0xc>)
{
 8001fae:	460a      	mov	r2, r1
	MCI_ExecSpeedRamp( pMCI[M1], hFinalSpeed, hDurationms );
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	f000 b828 	b.w	8002008 <MCI_ExecSpeedRamp>
 8001fb8:	20001ca0 	.word	0x20001ca0

08001fbc <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 8001fbc:	4b01      	ldr	r3, [pc, #4]	; (8001fc4 <MC_GetMecSpeedAverageMotor1+0x8>)
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	f000 b8ca 	b.w	8002158 <MCI_GetAvrgMecSpeedUnit>
 8001fc4:	20001ca0 	.word	0x20001ca0

08001fc8 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 8001fc8:	4b01      	ldr	r3, [pc, #4]	; (8001fd0 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	f000 b928 	b.w	8002220 <MCI_GetPhaseCurrentAmplitude>
 8001fd0:	20001ca0 	.word	0x20001ca0

08001fd4 <MC_GetPhaseVoltageAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseVoltageAmplitudeMotor1(void)
{
	return MCI_GetPhaseVoltageAmplitude( pMCI[M1] );
 8001fd4:	4b01      	ldr	r3, [pc, #4]	; (8001fdc <MC_GetPhaseVoltageAmplitudeMotor1+0x8>)
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	f000 b936 	b.w	8002248 <MCI_GetPhaseVoltageAmplitude>
 8001fdc:	20001ca0 	.word	0x20001ca0

08001fe0 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001fe0:	4b01      	ldr	r3, [pc, #4]	; (8001fe8 <MC_GetSTMStateMotor1+0x8>)
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	f000 b882 	b.w	80020ec <MCI_GetSTMState>
 8001fe8:	20001ca0 	.word	0x20001ca0

08001fec <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8001fec:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001fee:	2400      	movs	r4, #0
 8001ff0:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8001ff2:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8001ff4:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 8001ff6:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001ff8:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8001ffa:	e9c0 1200 	strd	r1, r2, [r0]
}
 8001ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 8002002:	6083      	str	r3, [r0, #8]
}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop

08002008 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8002008:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800200a:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800200e:	2401      	movs	r4, #1
 8002010:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8002012:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8002014:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8002018:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800201a:	8303      	strh	r3, [r0, #24]
}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop

08002020 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8002020:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002022:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8002024:	2402      	movs	r4, #2
 8002026:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8002028:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 800202a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 800202e:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002030:	8303      	strh	r3, [r0, #24]
}
 8002032:	4770      	bx	lr

08002034 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8002034:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8002036:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002038:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 800203a:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800203e:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002040:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8002042:	b002      	add	sp, #8
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop

08002048 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8002048:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 800204a:	2103      	movs	r1, #3
{
 800204c:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 800204e:	6800      	ldr	r0, [r0, #0]
 8002050:	f005 fd34 	bl	8007abc <STM_NextState>

  if ( RetVal == true )
 8002054:	b108      	cbz	r0, 800205a <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002056:	2301      	movs	r3, #1
 8002058:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 800205a:	bd10      	pop	{r4, pc}

0800205c <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 800205c:	6800      	ldr	r0, [r0, #0]
 800205e:	2107      	movs	r1, #7
 8002060:	f005 bd2c 	b.w	8007abc <STM_NextState>

08002064 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8002064:	6800      	ldr	r0, [r0, #0]
 8002066:	f005 bd9f 	b.w	8007ba8 <STM_FaultAcknowledged>
 800206a:	bf00      	nop

0800206c <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 800206c:	6800      	ldr	r0, [r0, #0]
 800206e:	2101      	movs	r1, #1
 8002070:	f005 bd24 	b.w	8007abc <STM_NextState>

08002074 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8002074:	b178      	cbz	r0, 8002096 <MCI_ExecBufferedCommands+0x22>
{
 8002076:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002078:	7e03      	ldrb	r3, [r0, #24]
 800207a:	2b01      	cmp	r3, #1
 800207c:	4604      	mov	r4, r0
 800207e:	d000      	beq.n	8002082 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8002080:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8002082:	7b01      	ldrb	r1, [r0, #12]
 8002084:	2902      	cmp	r1, #2
 8002086:	d020      	beq.n	80020ca <MCI_ExecBufferedCommands+0x56>
 8002088:	2903      	cmp	r1, #3
 800208a:	d005      	beq.n	8002098 <MCI_ExecBufferedCommands+0x24>
 800208c:	2901      	cmp	r1, #1
 800208e:	d00c      	beq.n	80020aa <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8002090:	2303      	movs	r3, #3
 8002092:	7623      	strb	r3, [r4, #24]
}
 8002094:	bd10      	pop	{r4, pc}
 8002096:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8002098:	6882      	ldr	r2, [r0, #8]
 800209a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800209e:	f8d0 3012 	ldr.w	r3, [r0, #18]
 80020a2:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80020a4:	2302      	movs	r3, #2
 80020a6:	7623      	strb	r3, [r4, #24]
}
 80020a8:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80020aa:	6883      	ldr	r3, [r0, #8]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 80020b2:	6840      	ldr	r0, [r0, #4]
 80020b4:	f005 fc42 	bl	800793c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 80020b8:	8ae2      	ldrh	r2, [r4, #22]
 80020ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020be:	6860      	ldr	r0, [r4, #4]
 80020c0:	f005 fc40 	bl	8007944 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80020c4:	2800      	cmp	r0, #0
 80020c6:	d0e3      	beq.n	8002090 <MCI_ExecBufferedCommands+0x1c>
 80020c8:	e7ec      	b.n	80020a4 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80020ca:	6883      	ldr	r3, [r0, #8]
 80020cc:	2100      	movs	r1, #0
 80020ce:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 80020d2:	6840      	ldr	r0, [r0, #4]
 80020d4:	f005 fc32 	bl	800793c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 80020d8:	8ae2      	ldrh	r2, [r4, #22]
 80020da:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80020de:	6860      	ldr	r0, [r4, #4]
 80020e0:	f005 fc30 	bl	8007944 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d0d3      	beq.n	8002090 <MCI_ExecBufferedCommands+0x1c>
 80020e8:	e7dc      	b.n	80020a4 <MCI_ExecBufferedCommands+0x30>
 80020ea:	bf00      	nop

080020ec <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 80020ec:	6800      	ldr	r0, [r0, #0]
 80020ee:	f005 bd59 	b.w	8007ba4 <STM_GetState>
 80020f2:	bf00      	nop

080020f4 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 80020f4:	7e40      	ldrb	r0, [r0, #25]
 80020f6:	4770      	bx	lr

080020f8 <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 80020f8:	7b03      	ldrb	r3, [r0, #12]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d005      	beq.n	800210a <MCI_GetImposedMotorDirection+0x12>
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d013      	beq.n	800212a <MCI_GetImposedMotorDirection+0x32>
 8002102:	2b01      	cmp	r3, #1
 8002104:	d009      	beq.n	800211a <MCI_GetImposedMotorDirection+0x22>
 8002106:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8002108:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 800210a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 800210e:	2b00      	cmp	r3, #0
        retVal = -1;
 8002110:	bfac      	ite	ge
 8002112:	2001      	movge	r0, #1
 8002114:	f04f 30ff 	movlt.w	r0, #4294967295
 8002118:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 800211a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800211e:	2b00      	cmp	r3, #0
        retVal = -1;
 8002120:	bfac      	ite	ge
 8002122:	2001      	movge	r0, #1
 8002124:	f04f 30ff 	movlt.w	r0, #4294967295
 8002128:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 800212a:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 800212e:	2b00      	cmp	r3, #0
        retVal = -1;
 8002130:	bfac      	ite	ge
 8002132:	2001      	movge	r0, #1
 8002134:	f04f 30ff 	movlt.w	r0, #4294967295
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop

0800213c <MCI_GetLastRampFinalSpeed>:
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
 {
   return  pHandle->hFinalSpeed;
 }
 800213c:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop

08002144 <MCI_GetLastRampFinalTorque>:
  * @retval int16_t last ramp final torque sent by the user expressed in digit
  */
__weak int16_t MCI_GetLastRampFinalTorque( MCI_Handle_t * pHandle )
{
    return pHandle->hFinalTorque;
}
 8002144:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop

0800214c <MCI_GetLastRampFinalDuration>:
  * @retval uint16_t last ramp final torque sent by the user expressed in digit
  */
__weak uint16_t MCI_GetLastRampFinalDuration( MCI_Handle_t * pHandle )
{
    return pHandle->hDurationms;
}
 800214c:	8ac0      	ldrh	r0, [r0, #22]
 800214e:	4770      	bx	lr

08002150 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8002150:	6840      	ldr	r0, [r0, #4]
 8002152:	f005 bc3f 	b.w	80079d4 <STC_StopRamp>
 8002156:	bf00      	nop

08002158 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8002158:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 800215a:	6840      	ldr	r0, [r0, #4]
 800215c:	f005 fbd4 	bl	8007908 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8002160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8002164:	f005 bb7c 	b.w	8007860 <SPD_GetAvrgMecSpeedUnit>

08002168 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8002168:	6840      	ldr	r0, [r0, #4]
 800216a:	f005 bbd7 	b.w	800791c <STC_GetMecSpeedRefUnit>
 800216e:	bf00      	nop

08002170 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8002170:	6882      	ldr	r2, [r0, #8]
 8002172:	6810      	ldr	r0, [r2, #0]
 8002174:	2300      	movs	r3, #0
 8002176:	b282      	uxth	r2, r0
 8002178:	f362 030f 	bfi	r3, r2, #0, #16
 800217c:	0c00      	lsrs	r0, r0, #16
 800217e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002182:	b082      	sub	sp, #8
}
 8002184:	4618      	mov	r0, r3
 8002186:	b002      	add	sp, #8
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop

0800218c <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 800218c:	6882      	ldr	r2, [r0, #8]
 800218e:	6850      	ldr	r0, [r2, #4]
 8002190:	2300      	movs	r3, #0
 8002192:	b282      	uxth	r2, r0
 8002194:	f362 030f 	bfi	r3, r2, #0, #16
 8002198:	0c00      	lsrs	r0, r0, #16
 800219a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800219e:	b082      	sub	sp, #8
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	b002      	add	sp, #8
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop

080021a8 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 80021a8:	6882      	ldr	r2, [r0, #8]
 80021aa:	68d0      	ldr	r0, [r2, #12]
 80021ac:	2300      	movs	r3, #0
 80021ae:	b282      	uxth	r2, r0
 80021b0:	f362 030f 	bfi	r3, r2, #0, #16
 80021b4:	0c00      	lsrs	r0, r0, #16
 80021b6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80021ba:	b082      	sub	sp, #8
}
 80021bc:	4618      	mov	r0, r3
 80021be:	b002      	add	sp, #8
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop

080021c4 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 80021c4:	6882      	ldr	r2, [r0, #8]
 80021c6:	6910      	ldr	r0, [r2, #16]
 80021c8:	2300      	movs	r3, #0
 80021ca:	b282      	uxth	r2, r0
 80021cc:	f362 030f 	bfi	r3, r2, #0, #16
 80021d0:	0c00      	lsrs	r0, r0, #16
 80021d2:	f360 431f 	bfi	r3, r0, #16, #16
{
 80021d6:	b082      	sub	sp, #8
}
 80021d8:	4618      	mov	r0, r3
 80021da:	b002      	add	sp, #8
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop

080021e0 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 80021e0:	6882      	ldr	r2, [r0, #8]
 80021e2:	f8d2 0016 	ldr.w	r0, [r2, #22]
 80021e6:	2300      	movs	r3, #0
 80021e8:	b282      	uxth	r2, r0
 80021ea:	f362 030f 	bfi	r3, r2, #0, #16
 80021ee:	0c00      	lsrs	r0, r0, #16
 80021f0:	f360 431f 	bfi	r3, r0, #16, #16
{
 80021f4:	b082      	sub	sp, #8
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	b002      	add	sp, #8
 80021fa:	4770      	bx	lr

080021fc <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 80021fc:	6882      	ldr	r2, [r0, #8]
 80021fe:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8002202:	2300      	movs	r3, #0
 8002204:	b282      	uxth	r2, r0
 8002206:	f362 030f 	bfi	r3, r2, #0, #16
 800220a:	0c00      	lsrs	r0, r0, #16
 800220c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8002210:	b082      	sub	sp, #8
}
 8002212:	4618      	mov	r0, r3
 8002214:	b002      	add	sp, #8
 8002216:	4770      	bx	lr

08002218 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8002218:	6883      	ldr	r3, [r0, #8]
}
 800221a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800221e:	4770      	bx	lr

08002220 <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8002220:	6882      	ldr	r2, [r0, #8]
{
 8002222:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8002224:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8002228:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 800222c:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8002230:	fb00 3000 	mla	r0, r0, r0, r3
 8002234:	f000 f8fe 	bl	8002434 <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
 8002238:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800223c:	4298      	cmp	r0, r3
 800223e:	bfa8      	it	ge
 8002240:	4618      	movge	r0, r3
}
 8002242:	b200      	sxth	r0, r0
 8002244:	bd08      	pop	{r3, pc}
 8002246:	bf00      	nop

08002248 <MCI_GetPhaseVoltageAmplitude>:
__weak int16_t MCI_GetPhaseVoltageAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Voltage;
  int32_t wAux1, wAux2;

  Local_Voltage = pHandle->pFOCVars->Valphabeta;
 8002248:	6882      	ldr	r2, [r0, #8]
{
 800224a:	b508      	push	{r3, lr}
  Local_Voltage = pHandle->pFOCVars->Valphabeta;
 800224c:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 8002250:	f9b2 001a 	ldrsh.w	r0, [r2, #26]
  wAux1 = ( int32_t )( Local_Voltage.alpha ) * Local_Voltage.alpha;
  wAux2 = ( int32_t )( Local_Voltage.beta ) * Local_Voltage.beta;
 8002254:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8002258:	fb00 3000 	mla	r0, r0, r0, r3
 800225c:	f000 f8ea 	bl	8002434 <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t ) wAux1 );
 8002260:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002264:	4298      	cmp	r0, r3
 8002266:	bfa8      	it	ge
 8002268:	4618      	movge	r0, r3
}
 800226a:	b200      	sxth	r0, r0
 800226c:	bd08      	pop	{r3, pc}
 800226e:	bf00      	nop

08002270 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8002270:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8002272:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8002276:	f005 fbe7 	bl	8007a48 <STC_GetDefaultIqdref>
 800227a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800227e:	8220      	strh	r0, [r4, #16]
 8002280:	8263      	strh	r3, [r4, #18]
}
 8002282:	bd10      	pop	{r4, pc}

08002284 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8002284:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8002286:	f644 11e6 	movw	r1, #18918	; 0x49e6
 800228a:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 800228e:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8002292:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8002296:	4250      	negs	r0, r2
 8002298:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 800229c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 80022a0:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 80022a2:	da05      	bge.n	80022b0 <MCM_Clarke+0x2c>
 80022a4:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 80022a6:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80022aa:	da0c      	bge.n	80022c6 <MCM_Clarke+0x42>
 80022ac:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <MCM_Clarke+0x50>)
 80022ae:	e001      	b.n	80022b4 <MCM_Clarke+0x30>
 80022b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2000      	movs	r0, #0
 80022b8:	b292      	uxth	r2, r2
 80022ba:	f363 000f 	bfi	r0, r3, #0, #16
 80022be:	f362 401f 	bfi	r0, r2, #16, #16
}
 80022c2:	b004      	add	sp, #16
 80022c4:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 80022c6:	4803      	ldr	r0, [pc, #12]	; (80022d4 <MCM_Clarke+0x50>)
 80022c8:	b20a      	sxth	r2, r1
 80022ca:	4282      	cmp	r2, r0
 80022cc:	bfb8      	it	lt
 80022ce:	4602      	movlt	r2, r0
 80022d0:	e7f0      	b.n	80022b4 <MCM_Clarke+0x30>
 80022d2:	bf00      	nop
 80022d4:	ffff8001 	.word	0xffff8001

080022d8 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 80022d8:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 80022dc:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80022e0:	f400 7140 	and.w	r1, r0, #768	; 0x300
 80022e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 80022e8:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 80022ea:	d028      	beq.n	800233e <MCM_Trig_Functions+0x66>
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	461a      	mov	r2, r3
 80022f2:	d816      	bhi.n	8002322 <MCM_Trig_Functions+0x4a>
 80022f4:	b361      	cbz	r1, 8002350 <MCM_Trig_Functions+0x78>
 80022f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80022fa:	d109      	bne.n	8002310 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80022fc:	b2c0      	uxtb	r0, r0
 80022fe:	43c3      	mvns	r3, r0
 8002300:	491a      	ldr	r1, [pc, #104]	; (800236c <MCM_Trig_Functions+0x94>)
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8002308:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800230c:	4252      	negs	r2, r2
 800230e:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8002310:	b29b      	uxth	r3, r3
 8002312:	2000      	movs	r0, #0
 8002314:	b292      	uxth	r2, r2
 8002316:	f363 000f 	bfi	r0, r3, #0, #16
 800231a:	f362 401f 	bfi	r0, r2, #16, #16
}
 800231e:	b002      	add	sp, #8
 8002320:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8002322:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002326:	d1f3      	bne.n	8002310 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002328:	4910      	ldr	r1, [pc, #64]	; (800236c <MCM_Trig_Functions+0x94>)
 800232a:	b2c0      	uxtb	r0, r0
 800232c:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800232e:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002332:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002334:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002336:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800233a:	b21b      	sxth	r3, r3
      break;
 800233c:	e7e8      	b.n	8002310 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800233e:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002340:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800234a:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      break;
 800234e:	e7df      	b.n	8002310 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002350:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002352:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002354:	4a05      	ldr	r2, [pc, #20]	; (800236c <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800235c:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002360:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002362:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002364:	b21b      	sxth	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002366:	b212      	sxth	r2, r2
      break;
 8002368:	e7d2      	b.n	8002310 <MCM_Trig_Functions+0x38>
 800236a:	bf00      	nop
 800236c:	0800b4fc 	.word	0x0800b4fc

08002370 <MCM_Park>:
{
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	4605      	mov	r5, r0
 8002376:	9001      	str	r0, [sp, #4]
 8002378:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800237a:	4608      	mov	r0, r1
 800237c:	f7ff ffac 	bl	80022d8 <MCM_Trig_Functions>
 8002380:	b22d      	sxth	r5, r5
 8002382:	b204      	sxth	r4, r0
 8002384:	1436      	asrs	r6, r6, #16
 8002386:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8002388:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 800238c:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8002390:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002394:	da12      	bge.n	80023bc <MCM_Park+0x4c>
 8002396:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8002398:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800239c:	4914      	ldr	r1, [pc, #80]	; (80023f0 <MCM_Park+0x80>)
 800239e:	da21      	bge.n	80023e4 <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 80023a0:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80023a4:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 80023a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80023ac:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 80023b0:	da07      	bge.n	80023c2 <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 80023b2:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 80023b6:	da0f      	bge.n	80023d8 <MCM_Park+0x68>
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <MCM_Park+0x80>)
 80023ba:	e004      	b.n	80023c6 <MCM_Park+0x56>
 80023bc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80023c0:	e7ee      	b.n	80023a0 <MCM_Park+0x30>
 80023c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 80023c6:	b28a      	uxth	r2, r1
 80023c8:	2000      	movs	r0, #0
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	f362 000f 	bfi	r0, r2, #0, #16
 80023d0:	f363 401f 	bfi	r0, r3, #16, #16
}
 80023d4:	b004      	add	sp, #16
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 80023d8:	4805      	ldr	r0, [pc, #20]	; (80023f0 <MCM_Park+0x80>)
 80023da:	b213      	sxth	r3, r2
 80023dc:	4283      	cmp	r3, r0
 80023de:	bfb8      	it	lt
 80023e0:	4603      	movlt	r3, r0
 80023e2:	e7f0      	b.n	80023c6 <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 80023e4:	b21a      	sxth	r2, r3
 80023e6:	4291      	cmp	r1, r2
 80023e8:	bfb8      	it	lt
 80023ea:	4611      	movlt	r1, r2
 80023ec:	e7d8      	b.n	80023a0 <MCM_Park+0x30>
 80023ee:	bf00      	nop
 80023f0:	ffff8001 	.word	0xffff8001

080023f4 <MCM_Rev_Park>:
{
 80023f4:	b530      	push	{r4, r5, lr}
 80023f6:	b085      	sub	sp, #20
 80023f8:	4604      	mov	r4, r0
 80023fa:	9001      	str	r0, [sp, #4]
 80023fc:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80023fe:	4608      	mov	r0, r1
 8002400:	f7ff ff6a 	bl	80022d8 <MCM_Trig_Functions>
 8002404:	142d      	asrs	r5, r5, #16
 8002406:	1403      	asrs	r3, r0, #16
 8002408:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 800240a:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800240e:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8002410:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8002414:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8002418:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 800241c:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8002420:	2000      	movs	r0, #0
 8002422:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8002426:	f362 000f 	bfi	r0, r2, #0, #16
 800242a:	f363 401f 	bfi	r0, r3, #16, #16
}
 800242e:	b005      	add	sp, #20
 8002430:	bd30      	pop	{r4, r5, pc}
 8002432:	bf00      	nop

08002434 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 8002434:	1e03      	subs	r3, r0, #0
 8002436:	dd32      	ble.n	800249e <MCM_Sqrt+0x6a>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if ( wInput <= ( int32_t )2097152 )
 8002438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 800243c:	bfd4      	ite	le
 800243e:	2080      	movle	r0, #128	; 0x80
 8002440:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002444:	fb93 f2f0 	sdiv	r2, r3, r0
 8002448:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800244a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800244e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8002452:	d025      	beq.n	80024a0 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002454:	fb93 f2f1 	sdiv	r2, r3, r1
 8002458:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 800245a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800245e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8002462:	d01d      	beq.n	80024a0 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002464:	fb93 f2f0 	sdiv	r2, r3, r0
 8002468:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800246a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800246e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8002472:	d015      	beq.n	80024a0 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002474:	fb93 f2f1 	sdiv	r2, r3, r1
 8002478:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 800247a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800247e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8002482:	d00d      	beq.n	80024a0 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002484:	fb93 f2f0 	sdiv	r2, r3, r0
 8002488:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800248a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800248e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8002492:	d005      	beq.n	80024a0 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002494:	fb93 f0f1 	sdiv	r0, r3, r1
 8002498:	4408      	add	r0, r1
 800249a:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 800249c:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 800249e:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop

080024a4 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <FOC_Clear+0x74>)
 80024ac:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80024b0:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80024b4:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 80024b6:	2500      	movs	r5, #0
{
 80024b8:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 80024ba:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 80024be:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 80024c0:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 80024c2:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 80024c6:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 80024ca:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 80024ce:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 80024d2:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80024d6:	4811      	ldr	r0, [pc, #68]	; (800251c <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 80024d8:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80024da:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 80024de:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80024e2:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 80024e4:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 80024e6:	50d5      	str	r5, [r2, r3]
 80024e8:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 80024ec:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80024ee:	f004 faff 	bl	8006af0 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <FOC_Clear+0x7c>)
 80024f4:	4629      	mov	r1, r5
 80024f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80024fa:	f004 faf9 	bl	8006af0 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <FOC_Clear+0x80>)
 8002500:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002504:	f005 fa02 	bl	800790c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <FOC_Clear+0x84>)
 800250a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800250e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002512:	f000 bd9d 	b.w	8003050 <PWMC_SwitchOffPWM>
 8002516:	bf00      	nop
 8002518:	200009e4 	.word	0x200009e4
 800251c:	2000056c 	.word	0x2000056c
 8002520:	20000568 	.word	0x20000568
 8002524:	20000570 	.word	0x20000570
 8002528:	200009dc 	.word	0x200009dc

0800252c <MCboot>:
{
 800252c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8002530:	f8df b134 	ldr.w	fp, [pc, #308]	; 8002668 <MCboot+0x13c>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002534:	4f39      	ldr	r7, [pc, #228]	; (800261c <MCboot+0xf0>)
  bMCBootCompleted = 0;
 8002536:	f8df 9134 	ldr.w	r9, [pc, #308]	; 800266c <MCboot+0x140>
  pCLM[M1] = &CircleLimitationM1;
 800253a:	4d39      	ldr	r5, [pc, #228]	; (8002620 <MCboot+0xf4>)
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 800253c:	4c39      	ldr	r4, [pc, #228]	; (8002624 <MCboot+0xf8>)
  RVBS_Init(&BusVoltageSensor_M1);
 800253e:	f8df a130 	ldr.w	sl, [pc, #304]	; 8002670 <MCboot+0x144>
{
 8002542:	b085      	sub	sp, #20
 8002544:	4606      	mov	r6, r0
  STM_Init(&STM[M1]);
 8002546:	4658      	mov	r0, fp
 8002548:	f005 fa94 	bl	8007a74 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <MCboot+0xfc>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800254e:	4837      	ldr	r0, [pc, #220]	; (800262c <MCboot+0x100>)
  pCLM[M1] = &CircleLimitationM1;
 8002550:	601d      	str	r5, [r3, #0]
  bMCBootCompleted = 0;
 8002552:	f04f 0800 	mov.w	r8, #0
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002556:	6038      	str	r0, [r7, #0]
  bMCBootCompleted = 0;
 8002558:	f889 8000 	strb.w	r8, [r9]
  R3_1_Init(&PWM_Handle_M1);
 800255c:	f004 fe10 	bl	8007180 <R3_1_Init>
  ASPEP_start (&aspepOverUartA);
 8002560:	4833      	ldr	r0, [pc, #204]	; (8002630 <MCboot+0x104>)
  VSS_Init (&VirtualSpeedSensorM1);
 8002562:	4d34      	ldr	r5, [pc, #208]	; (8002634 <MCboot+0x108>)
  ASPEP_start (&aspepOverUartA);
 8002564:	f7fe fd1e 	bl	8000fa4 <ASPEP_start>
  startTimers();
 8002568:	f004 fb78 	bl	8006c5c <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 800256c:	4932      	ldr	r1, [pc, #200]	; (8002638 <MCboot+0x10c>)
 800256e:	4608      	mov	r0, r1
 8002570:	f004 faa2 	bl	8006ab8 <PID_HandleInit>
  STO_PLL_Init (&STO_PLL_M1);
 8002574:	4a31      	ldr	r2, [pc, #196]	; (800263c <MCboot+0x110>)
 8002576:	4610      	mov	r0, r2
 8002578:	f005 fefc 	bl	8008374 <STO_PLL_Init>
  STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 800257c:	4a2f      	ldr	r2, [pc, #188]	; (800263c <MCboot+0x110>)
 800257e:	492e      	ldr	r1, [pc, #184]	; (8002638 <MCboot+0x10c>)
 8002580:	6820      	ldr	r0, [r4, #0]
 8002582:	f005 f9ab 	bl	80078dc <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8002586:	4628      	mov	r0, r5
 8002588:	f005 fb2e 	bl	8007be8 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6821      	ldr	r1, [r4, #0]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	462a      	mov	r2, r5
 8002594:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <MCboot+0x114>)
 8002596:	482b      	ldr	r0, [pc, #172]	; (8002644 <MCboot+0x118>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002598:	4d2b      	ldr	r5, [pc, #172]	; (8002648 <MCboot+0x11c>)
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800259a:	4f2c      	ldr	r7, [pc, #176]	; (800264c <MCboot+0x120>)
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 800259c:	f005 fc1a 	bl	8007dd4 <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 80025a0:	482b      	ldr	r0, [pc, #172]	; (8002650 <MCboot+0x124>)
 80025a2:	f004 fa89 	bl	8006ab8 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80025a6:	482b      	ldr	r0, [pc, #172]	; (8002654 <MCboot+0x128>)
 80025a8:	f004 fa86 	bl	8006ab8 <PID_HandleInit>
  RVBS_Init(&BusVoltageSensor_M1);
 80025ac:	4650      	mov	r0, sl
 80025ae:	f005 f87d 	bl	80076ac <RVBS_Init>
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80025b2:	4b29      	ldr	r3, [pc, #164]	; (8002658 <MCboot+0x12c>)
  NTC_Init(&TempSensor_M1);
 80025b4:	4829      	ldr	r0, [pc, #164]	; (800265c <MCboot+0x130>)
  pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80025b6:	681b      	ldr	r3, [r3, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80025b8:	e9c3 5a43 	strd	r5, sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensor_M1);
 80025bc:	f004 fa38 	bl	8006a30 <NTC_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80025c0:	4b27      	ldr	r3, [pc, #156]	; (8002660 <MCboot+0x134>)
 80025c2:	4828      	ldr	r0, [pc, #160]	; (8002664 <MCboot+0x138>)
 80025c4:	6018      	str	r0, [r3, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 80025c6:	f04f 0a01 	mov.w	sl, #1
  REMNG_Init(pREMNG[M1]);
 80025ca:	f005 f8bd 	bl	8007748 <REMNG_Init>
  FOC_Clear(M1);
 80025ce:	4640      	mov	r0, r8
 80025d0:	f7ff ff68 	bl	80024a4 <FOC_Clear>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80025d4:	6820      	ldr	r0, [r4, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 80025d6:	f885 a024 	strb.w	sl, [r5, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80025da:	f005 fa35 	bl	8007a48 <STC_GetDefaultIqdref>
 80025de:	4603      	mov	r3, r0
 80025e0:	f3c0 420f 	ubfx	r2, r0, #16, #16
 80025e4:	822b      	strh	r3, [r5, #16]
 80025e6:	826a      	strh	r2, [r5, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80025e8:	6820      	ldr	r0, [r4, #0]
 80025ea:	f005 fa2d 	bl	8007a48 <STC_GetDefaultIqdref>
 80025ee:	f3c0 400f 	ubfx	r0, r0, #16, #16
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80025f2:	6822      	ldr	r2, [r4, #0]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80025f4:	82a8      	strh	r0, [r5, #20]
  MCI_Init(&Mci[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80025f6:	462b      	mov	r3, r5
 80025f8:	4659      	mov	r1, fp
 80025fa:	4638      	mov	r0, r7
 80025fc:	f7ff fcf6 	bl	8001fec <MCI_Init>
  MCI_ExecSpeedRamp(&Mci[M1],
 8002600:	6820      	ldr	r0, [r4, #0]
 8002602:	f005 fa1d 	bl	8007a40 <STC_GetMecSpeedRefUnitDefault>
 8002606:	4642      	mov	r2, r8
 8002608:	4601      	mov	r1, r0
 800260a:	4638      	mov	r0, r7
 800260c:	f7ff fcfc 	bl	8002008 <MCI_ExecSpeedRamp>
  pMCIList[M1] = &Mci[M1];
 8002610:	6037      	str	r7, [r6, #0]
  bMCBootCompleted = 1;
 8002612:	f889 a000 	strb.w	sl, [r9]
}
 8002616:	b005      	add	sp, #20
 8002618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800261c:	200009dc 	.word	0x200009dc
 8002620:	20000028 	.word	0x20000028
 8002624:	20000570 	.word	0x20000570
 8002628:	20000a0c 	.word	0x20000a0c
 800262c:	20000274 	.word	0x20000274
 8002630:	200005d8 	.word	0x200005d8
 8002634:	2000052c 	.word	0x2000052c
 8002638:	20000134 	.word	0x20000134
 800263c:	200003a8 	.word	0x200003a8
 8002640:	20000394 	.word	0x20000394
 8002644:	2000031c 	.word	0x2000031c
 8002648:	200009e4 	.word	0x200009e4
 800264c:	200009a0 	.word	0x200009a0
 8002650:	20000108 	.word	0x20000108
 8002654:	200000dc 	.word	0x200000dc
 8002658:	20000564 	.word	0x20000564
 800265c:	20000504 	.word	0x20000504
 8002660:	20000a10 	.word	0x20000a10
 8002664:	20000304 	.word	0x20000304
 8002668:	200009bc 	.word	0x200009bc
 800266c:	20000850 	.word	0x20000850
 8002670:	20000000 	.word	0x20000000

08002674 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop

08002678 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002678:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <FOC_CalcCurrRef+0x24>)
 800267c:	2426      	movs	r4, #38	; 0x26
 800267e:	fb04 3400 	mla	r4, r4, r0, r3
 8002682:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002686:	b103      	cbz	r3, 800268a <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002688:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800268a:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <FOC_CalcCurrRef+0x28>)
 800268c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002690:	f005 f9a4 	bl	80079dc <STC_CalcTorqueReference>
 8002694:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8002696:	8220      	strh	r0, [r4, #16]
}
 8002698:	bd10      	pop	{r4, pc}
 800269a:	bf00      	nop
 800269c:	200009e4 	.word	0x200009e4
 80026a0:	20000570 	.word	0x20000570

080026a4 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80026a4:	4b01      	ldr	r3, [pc, #4]	; (80026ac <TSK_SetChargeBootCapDelayM1+0x8>)
 80026a6:	8018      	strh	r0, [r3, #0]
}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000852 	.word	0x20000852

080026b0 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80026b2:	8818      	ldrh	r0, [r3, #0]
 80026b4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80026b6:	fab0 f080 	clz	r0, r0
 80026ba:	0940      	lsrs	r0, r0, #5
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000852 	.word	0x20000852

080026c4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80026c4:	4b01      	ldr	r3, [pc, #4]	; (80026cc <TSK_SetStopPermanencyTimeM1+0x8>)
 80026c6:	8018      	strh	r0, [r3, #0]
}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000856 	.word	0x20000856

080026d0 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80026d2:	8818      	ldrh	r0, [r3, #0]
 80026d4:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80026d6:	fab0 f080 	clz	r0, r0
 80026da:	0940      	lsrs	r0, r0, #5
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000856 	.word	0x20000856

080026e4 <TSK_MediumFrequencyTaskM1>:
{
 80026e4:	b530      	push	{r4, r5, lr}
 80026e6:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80026e8:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80026ea:	4669      	mov	r1, sp
 80026ec:	4898      	ldr	r0, [pc, #608]	; (8002950 <TSK_MediumFrequencyTaskM1+0x26c>)
  int16_t wAux = 0;
 80026ee:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80026f2:	f005 fd47 	bl	8008184 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 80026f6:	4d97      	ldr	r5, [pc, #604]	; (8002954 <TSK_MediumFrequencyTaskM1+0x270>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 80026f8:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 80026fa:	6828      	ldr	r0, [r5, #0]
 80026fc:	f004 fa7a 	bl	8006bf4 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8002700:	4895      	ldr	r0, [pc, #596]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 8002702:	f005 fa4f 	bl	8007ba4 <STM_GetState>
  switch ( StateM1 )
 8002706:	1ec3      	subs	r3, r0, #3
 8002708:	2b10      	cmp	r3, #16
 800270a:	d85a      	bhi.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
 800270c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002710:	0011007c 	.word	0x0011007c
 8002714:	00a5008f 	.word	0x00a5008f
 8002718:	00c600b3 	.word	0x00c600b3
 800271c:	005900cf 	.word	0x005900cf
 8002720:	00590059 	.word	0x00590059
 8002724:	00590059 	.word	0x00590059
 8002728:	00dc0059 	.word	0x00dc0059
 800272c:	00f800eb 	.word	0x00f800eb
 8002730:	005b      	.short	0x005b
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8002732:	488a      	ldr	r0, [pc, #552]	; (800295c <TSK_MediumFrequencyTaskM1+0x278>)
 8002734:	f005 fbd4 	bl	8007ee0 <RUC_Exec>
 8002738:	2800      	cmp	r0, #0
 800273a:	f000 80fc 	beq.w	8002936 <TSK_MediumFrequencyTaskM1+0x252>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 800273e:	4b88      	ldr	r3, [pc, #544]	; (8002960 <TSK_MediumFrequencyTaskM1+0x27c>)
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	f005 f94b 	bl	80079dc <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 8002746:	4b87      	ldr	r3, [pc, #540]	; (8002964 <TSK_MediumFrequencyTaskM1+0x280>)
 8002748:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 800274c:	8218      	strh	r0, [r3, #16]
 800274e:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 8002750:	4885      	ldr	r0, [pc, #532]	; (8002968 <TSK_MediumFrequencyTaskM1+0x284>)
 8002752:	f10d 0102 	add.w	r1, sp, #2
 8002756:	f005 fa9b 	bl	8007c90 <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 800275a:	4880      	ldr	r0, [pc, #512]	; (800295c <TSK_MediumFrequencyTaskM1+0x278>)
 800275c:	f005 fbfa 	bl	8007f54 <RUC_FirstAccelerationStageReached>
 8002760:	b378      	cbz	r0, 80027c2 <TSK_MediumFrequencyTaskM1+0xde>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 8002762:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002766:	487a      	ldr	r0, [pc, #488]	; (8002950 <TSK_MediumFrequencyTaskM1+0x26c>)
 8002768:	f005 fe3e 	bl	80083e8 <STO_PLL_IsObserverConverged>
 800276c:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 800276e:	487f      	ldr	r0, [pc, #508]	; (800296c <TSK_MediumFrequencyTaskM1+0x288>)
 8002770:	f7ff fcc2 	bl	80020f8 <MCI_GetImposedMotorDirection>
 8002774:	b2c1      	uxtb	r1, r0
 8002776:	4876      	ldr	r0, [pc, #472]	; (8002950 <TSK_MediumFrequencyTaskM1+0x26c>)
 8002778:	f005 fed8 	bl	800852c <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 800277c:	487a      	ldr	r0, [pc, #488]	; (8002968 <TSK_MediumFrequencyTaskM1+0x284>)
 800277e:	4621      	mov	r1, r4
 8002780:	f005 fb16 	bl	8007db0 <VSS_SetStartTransition>
      if ( ObserverConverged )
 8002784:	b1ec      	cbz	r4, 80027c2 <TSK_MediumFrequencyTaskM1+0xde>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8002786:	4872      	ldr	r0, [pc, #456]	; (8002950 <TSK_MediumFrequencyTaskM1+0x26c>)
 8002788:	4d76      	ldr	r5, [pc, #472]	; (8002964 <TSK_MediumFrequencyTaskM1+0x280>)
        REMNG_Init( pREMNG[M1] );
 800278a:	4c79      	ldr	r4, [pc, #484]	; (8002970 <TSK_MediumFrequencyTaskM1+0x28c>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800278c:	f005 f864 	bl	8007858 <SPD_GetElAngle>
 8002790:	4601      	mov	r1, r0
 8002792:	6868      	ldr	r0, [r5, #4]
 8002794:	f7ff fdec 	bl	8002370 <MCM_Park>
 8002798:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 800279a:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800279c:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 800279e:	f004 ffd3 	bl	8007748 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 80027a2:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 80027a6:	6820      	ldr	r0, [r4, #0]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f005 f813 	bl	80077d4 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 80027ae:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 80027b2:	6820      	ldr	r0, [r4, #0]
 80027b4:	2219      	movs	r2, #25
 80027b6:	f005 f80d 	bl	80077d4 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 80027ba:	4867      	ldr	r0, [pc, #412]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 80027bc:	2113      	movs	r1, #19
 80027be:	f005 f97d 	bl	8007abc <STM_NextState>
}
 80027c2:	b003      	add	sp, #12
 80027c4:	bd30      	pop	{r4, r5, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 80027c6:	4865      	ldr	r0, [pc, #404]	; (800295c <TSK_MediumFrequencyTaskM1+0x278>)
 80027c8:	f005 fb8a 	bl	8007ee0 <RUC_Exec>
 80027cc:	2800      	cmp	r0, #0
 80027ce:	f000 80b8 	beq.w	8002942 <TSK_MediumFrequencyTaskM1+0x25e>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 80027d2:	4865      	ldr	r0, [pc, #404]	; (8002968 <TSK_MediumFrequencyTaskM1+0x284>)
 80027d4:	a901      	add	r1, sp, #4
 80027d6:	f005 fa5b 	bl	8007c90 <VSS_CalcAvrgMecSpeedUnit>
 80027da:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 80027dc:	4862      	ldr	r0, [pc, #392]	; (8002968 <TSK_MediumFrequencyTaskM1+0x284>)
 80027de:	f005 faf5 	bl	8007dcc <VSS_TransitionEnded>
        if ( LoopClosed == true )
 80027e2:	b90c      	cbnz	r4, 80027e8 <TSK_MediumFrequencyTaskM1+0x104>
 80027e4:	2800      	cmp	r0, #0
 80027e6:	d0ec      	beq.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(&PIDSpeedHandle_M1) /
 80027e8:	4b5e      	ldr	r3, [pc, #376]	; (8002964 <TSK_MediumFrequencyTaskM1+0x280>)
 80027ea:	4862      	ldr	r0, [pc, #392]	; (8002974 <TSK_MediumFrequencyTaskM1+0x290>)
 80027ec:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 80027f0:	f004 f98c 	bl	8006b0c <PID_GetKIDivisor>
          PID_SetIntegralTerm( &PIDSpeedHandle_M1,
 80027f4:	fb04 f100 	mul.w	r1, r4, r0
 80027f8:	485e      	ldr	r0, [pc, #376]	; (8002974 <TSK_MediumFrequencyTaskM1+0x290>)
 80027fa:	f004 f979 	bl	8006af0 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 80027fe:	2105      	movs	r1, #5
 8002800:	4855      	ldr	r0, [pc, #340]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 8002802:	f005 f95b 	bl	8007abc <STM_NextState>
    break;
 8002806:	e7dc      	b.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( &Mci[M1] ) );
 8002808:	4858      	ldr	r0, [pc, #352]	; (800296c <TSK_MediumFrequencyTaskM1+0x288>)
 800280a:	f7ff fc75 	bl	80020f8 <MCI_GetImposedMotorDirection>
 800280e:	4601      	mov	r1, r0
 8002810:	4852      	ldr	r0, [pc, #328]	; (800295c <TSK_MediumFrequencyTaskM1+0x278>)
 8002812:	f005 fb1d 	bl	8007e50 <RUC_Clear>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 8002816:	4b58      	ldr	r3, [pc, #352]	; (8002978 <TSK_MediumFrequencyTaskM1+0x294>)
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	f004 fb6f 	bl	8006efc <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800281e:	2014      	movs	r0, #20
 8002820:	f7ff ff40 	bl	80026a4 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8002824:	2110      	movs	r1, #16
 8002826:	484c      	ldr	r0, [pc, #304]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 8002828:	f005 f948 	bl	8007abc <STM_NextState>
    break;
 800282c:	e7c9      	b.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 800282e:	4c4c      	ldr	r4, [pc, #304]	; (8002960 <TSK_MediumFrequencyTaskM1+0x27c>)
 8002830:	4947      	ldr	r1, [pc, #284]	; (8002950 <TSK_MediumFrequencyTaskM1+0x26c>)
 8002832:	6820      	ldr	r0, [r4, #0]
 8002834:	f005 f866 	bl	8007904 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 8002838:	2000      	movs	r0, #0
 800283a:	f7ff ff1b 	bl	8002674 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 800283e:	2000      	movs	r0, #0
 8002840:	f7ff ff1a 	bl	8002678 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8002844:	2106      	movs	r1, #6
 8002846:	4844      	ldr	r0, [pc, #272]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 8002848:	f005 f938 	bl	8007abc <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 800284c:	6820      	ldr	r0, [r4, #0]
 800284e:	f005 f909 	bl	8007a64 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8002852:	4846      	ldr	r0, [pc, #280]	; (800296c <TSK_MediumFrequencyTaskM1+0x288>)
 8002854:	f7ff fc0e 	bl	8002074 <MCI_ExecBufferedCommands>
    break;
 8002858:	e7b3      	b.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
    MCI_ExecBufferedCommands( &Mci[M1] );
 800285a:	4844      	ldr	r0, [pc, #272]	; (800296c <TSK_MediumFrequencyTaskM1+0x288>)
 800285c:	f7ff fc0a 	bl	8002074 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8002860:	2000      	movs	r0, #0
 8002862:	f7ff ff09 	bl	8002678 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8002866:	2c00      	cmp	r4, #0
 8002868:	d1ab      	bne.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 800286a:	4622      	mov	r2, r4
 800286c:	2120      	movs	r1, #32
 800286e:	483a      	ldr	r0, [pc, #232]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 8002870:	f005 f906 	bl	8007a80 <STM_FaultProcessing>
 8002874:	e7a5      	b.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8002876:	4b40      	ldr	r3, [pc, #256]	; (8002978 <TSK_MediumFrequencyTaskM1+0x294>)
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	f004 fbb1 	bl	8006fe0 <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 800287e:	2000      	movs	r0, #0
 8002880:	f7ff fe10 	bl	80024a4 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8002884:	6828      	ldr	r0, [r5, #0]
 8002886:	f004 f88f 	bl	80069a8 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800288a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800288e:	f7ff ff19 	bl	80026c4 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8002892:	2108      	movs	r1, #8
 8002894:	4830      	ldr	r0, [pc, #192]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 8002896:	f005 f911 	bl	8007abc <STM_NextState>
    break;
 800289a:	e792      	b.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 800289c:	f7ff ff18 	bl	80026d0 <TSK_StopPermanencyTimeHasElapsedM1>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d08e      	beq.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
      STM_NextState( &STM[M1], STOP_IDLE );
 80028a4:	2109      	movs	r1, #9
 80028a6:	482c      	ldr	r0, [pc, #176]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 80028a8:	f005 f908 	bl	8007abc <STM_NextState>
 80028ac:	e789      	b.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 80028ae:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <TSK_MediumFrequencyTaskM1+0x27c>)
 80028b0:	492d      	ldr	r1, [pc, #180]	; (8002968 <TSK_MediumFrequencyTaskM1+0x284>)
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	f005 f826 	bl	8007904 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 80028b8:	482b      	ldr	r0, [pc, #172]	; (8002968 <TSK_MediumFrequencyTaskM1+0x284>)
 80028ba:	f005 f987 	bl	8007bcc <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 80028be:	2100      	movs	r1, #0
 80028c0:	4825      	ldr	r0, [pc, #148]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 80028c2:	f005 f8fb 	bl	8007abc <STM_NextState>
}
 80028c6:	e77c      	b.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80028c8:	f7ff fef2 	bl	80026b0 <TSK_ChargeBootCapDelayHasElapsedM1>
 80028cc:	2800      	cmp	r0, #0
 80028ce:	f43f af78 	beq.w	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80028d2:	4b29      	ldr	r3, [pc, #164]	; (8002978 <TSK_MediumFrequencyTaskM1+0x294>)
 80028d4:	2100      	movs	r1, #0
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	f000 fbbc 	bl	8003054 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80028dc:	2111      	movs	r1, #17
 80028de:	481e      	ldr	r0, [pc, #120]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 80028e0:	f005 f8ec 	bl	8007abc <STM_NextState>
 80028e4:	e76d      	b.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <TSK_MediumFrequencyTaskM1+0x294>)
 80028e8:	2101      	movs	r1, #1
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	f000 fbb2 	bl	8003054 <PWMC_CurrentReadingCalibr>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	f43f af66 	beq.w	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
      STM_NextState( &STM[M1], CLEAR );
 80028f6:	2112      	movs	r1, #18
 80028f8:	4817      	ldr	r0, [pc, #92]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 80028fa:	f005 f8df 	bl	8007abc <STM_NextState>
 80028fe:	e760      	b.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002900:	4a17      	ldr	r2, [pc, #92]	; (8002960 <TSK_MediumFrequencyTaskM1+0x27c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002902:	4b18      	ldr	r3, [pc, #96]	; (8002964 <TSK_MediumFrequencyTaskM1+0x280>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002904:	6810      	ldr	r0, [r2, #0]
 8002906:	4918      	ldr	r1, [pc, #96]	; (8002968 <TSK_MediumFrequencyTaskM1+0x284>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800290e:	f004 fff9 	bl	8007904 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8002912:	480f      	ldr	r0, [pc, #60]	; (8002950 <TSK_MediumFrequencyTaskM1+0x26c>)
 8002914:	f005 fd00 	bl	8008318 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8002918:	480f      	ldr	r0, [pc, #60]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 800291a:	2104      	movs	r1, #4
 800291c:	f005 f8ce 	bl	8007abc <STM_NextState>
 8002920:	2800      	cmp	r0, #0
 8002922:	f43f af4e 	beq.w	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
      FOC_Clear( M1 );
 8002926:	2000      	movs	r0, #0
 8002928:	f7ff fdbc 	bl	80024a4 <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <TSK_MediumFrequencyTaskM1+0x294>)
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	f004 fb0c 	bl	8006f4c <R3_1_SwitchOnPWM>
 8002934:	e745      	b.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8002936:	4602      	mov	r2, r0
 8002938:	2110      	movs	r1, #16
 800293a:	4807      	ldr	r0, [pc, #28]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 800293c:	f005 f8a0 	bl	8007a80 <STM_FaultProcessing>
 8002940:	e706      	b.n	8002750 <TSK_MediumFrequencyTaskM1+0x6c>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8002942:	4602      	mov	r2, r0
 8002944:	2110      	movs	r1, #16
 8002946:	4804      	ldr	r0, [pc, #16]	; (8002958 <TSK_MediumFrequencyTaskM1+0x274>)
 8002948:	f005 f89a 	bl	8007a80 <STM_FaultProcessing>
 800294c:	e739      	b.n	80027c2 <TSK_MediumFrequencyTaskM1+0xde>
 800294e:	bf00      	nop
 8002950:	200003a8 	.word	0x200003a8
 8002954:	20000564 	.word	0x20000564
 8002958:	200009bc 	.word	0x200009bc
 800295c:	2000031c 	.word	0x2000031c
 8002960:	20000570 	.word	0x20000570
 8002964:	200009e4 	.word	0x200009e4
 8002968:	2000052c 	.word	0x2000052c
 800296c:	200009a0 	.word	0x200009a0
 8002970:	20000a10 	.word	0x20000a10
 8002974:	20000134 	.word	0x20000134
 8002978:	200009dc 	.word	0x200009dc

0800297c <MC_Scheduler>:
  if (bMCBootCompleted == 1)
 800297c:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <MC_Scheduler+0x7c>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d000      	beq.n	8002986 <MC_Scheduler+0xa>
 8002984:	4770      	bx	lr
{
 8002986:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8002988:	4c1c      	ldr	r4, [pc, #112]	; (80029fc <MC_Scheduler+0x80>)
 800298a:	8823      	ldrh	r3, [r4, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	b1a3      	cbz	r3, 80029ba <MC_Scheduler+0x3e>
      hMFTaskCounterM1--;
 8002990:	8823      	ldrh	r3, [r4, #0]
 8002992:	3b01      	subs	r3, #1
 8002994:	b29b      	uxth	r3, r3
 8002996:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8002998:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <MC_Scheduler+0x84>)
 800299a:	8813      	ldrh	r3, [r2, #0]
 800299c:	b29b      	uxth	r3, r3
 800299e:	b11b      	cbz	r3, 80029a8 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80029a0:	8813      	ldrh	r3, [r2, #0]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80029a8:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <MC_Scheduler+0x88>)
 80029aa:	8813      	ldrh	r3, [r2, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b11b      	cbz	r3, 80029b8 <MC_Scheduler+0x3c>
      hStopPermanencyCounterM1--;
 80029b0:	8813      	ldrh	r3, [r2, #0]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	8013      	strh	r3, [r2, #0]
}
 80029b8:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 80029ba:	4d13      	ldr	r5, [pc, #76]	; (8002a08 <MC_Scheduler+0x8c>)
      TSK_MediumFrequencyTaskM1();
 80029bc:	f7ff fe92 	bl	80026e4 <TSK_MediumFrequencyTaskM1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess ( MCP_Over_UartA.pTransportLayer,  &MCP_Over_UartA.rxLength);
 80029c0:	4629      	mov	r1, r5
 80029c2:	f851 0b0c 	ldr.w	r0, [r1], #12
 80029c6:	6883      	ldr	r3, [r0, #8]
 80029c8:	4798      	blx	r3
 80029ca:	6068      	str	r0, [r5, #4]
      if (MCP_Over_UartA.rxBuffer)
 80029cc:	b130      	cbz	r0, 80029dc <MC_Scheduler+0x60>
        if (MCP_Over_UartA.pTransportLayer->fGetBuffer (MCP_Over_UartA.pTransportLayer, (void **) &MCP_Over_UartA.txBuffer, MCTL_SYNC))
 80029ce:	4629      	mov	r1, r5
 80029d0:	220a      	movs	r2, #10
 80029d2:	f851 0b08 	ldr.w	r0, [r1], #8
 80029d6:	6803      	ldr	r3, [r0, #0]
 80029d8:	4798      	blx	r3
 80029da:	b910      	cbnz	r0, 80029e2 <MC_Scheduler+0x66>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80029dc:	2301      	movs	r3, #1
 80029de:	8023      	strh	r3, [r4, #0]
 80029e0:	e7da      	b.n	8002998 <MC_Scheduler+0x1c>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 80029e2:	4628      	mov	r0, r5
 80029e4:	f003 fda4 	bl	8006530 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket (MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer, MCP_Over_UartA.txLength, MCTL_SYNC);
 80029e8:	6828      	ldr	r0, [r5, #0]
 80029ea:	89ea      	ldrh	r2, [r5, #14]
 80029ec:	6846      	ldr	r6, [r0, #4]
 80029ee:	68a9      	ldr	r1, [r5, #8]
 80029f0:	230a      	movs	r3, #10
 80029f2:	47b0      	blx	r6
 80029f4:	e7f2      	b.n	80029dc <MC_Scheduler+0x60>
 80029f6:	bf00      	nop
 80029f8:	20000850 	.word	0x20000850
 80029fc:	20000854 	.word	0x20000854
 8002a00:	20000852 	.word	0x20000852
 8002a04:	20000856 	.word	0x20000856
 8002a08:	200005b4 	.word	0x200005b4

08002a0c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 8002a10:	4b57      	ldr	r3, [pc, #348]	; (8002b70 <TSK_HighFrequencyTask+0x164>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8002a12:	4c58      	ldr	r4, [pc, #352]	; (8002b74 <TSK_HighFrequencyTask+0x168>)
  if ( STM[M1].bState == SWITCH_OVER )
 8002a14:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8002a16:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8002a1a:	b089      	sub	sp, #36	; 0x24
  if ( STM[M1].bState == SWITCH_OVER )
 8002a1c:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8002a1e:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 8002a20:	f000 809a 	beq.w	8002b58 <TSK_HighFrequencyTask+0x14c>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002a24:	4b54      	ldr	r3, [pc, #336]	; (8002b78 <TSK_HighFrequencyTask+0x16c>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002a26:	4f55      	ldr	r7, [pc, #340]	; (8002b7c <TSK_HighFrequencyTask+0x170>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002a28:	6818      	ldr	r0, [r3, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002a2a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8002ba8 <TSK_HighFrequencyTask+0x19c>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002a2e:	f004 ff6b 	bl	8007908 <STC_GetSpeedSensor>
 8002a32:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8002a34:	f004 ff10 	bl	8007858 <SPD_GetElAngle>
 8002a38:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	f004 ff14 	bl	8007868 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002a40:	a902      	add	r1, sp, #8
 8002a42:	6838      	ldr	r0, [r7, #0]
 8002a44:	f000 f9ce 	bl	8002de4 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8002a48:	9802      	ldr	r0, [sp, #8]
 8002a4a:	f7ff fc1b 	bl	8002284 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002a4e:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8002a50:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002a52:	f7ff fc8d 	bl	8002370 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002a56:	4a4a      	ldr	r2, [pc, #296]	; (8002b80 <TSK_HighFrequencyTask+0x174>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002a58:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002a5c:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002a5e:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002a60:	1ac9      	subs	r1, r1, r3
 8002a62:	6810      	ldr	r0, [r2, #0]
 8002a64:	f004 f880 	bl	8006b68 <PI_Controller>
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002a68:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 8002a6c:	4b45      	ldr	r3, [pc, #276]	; (8002b84 <TSK_HighFrequencyTask+0x178>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002a6e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002a72:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 8002a74:	1a89      	subs	r1, r1, r2
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	f004 f876 	bl	8006b68 <PI_Controller>
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002a7c:	4b42      	ldr	r3, [pc, #264]	; (8002b88 <TSK_HighFrequencyTask+0x17c>)
 8002a7e:	f8ad 9004 	strh.w	r9, [sp, #4]
 8002a82:	f8ad 0006 	strh.w	r0, [sp, #6]
 8002a86:	9901      	ldr	r1, [sp, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	f003 fd21 	bl	80064d0 <Circle_Limitation>
 8002a8e:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002a90:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002a92:	fa0f f983 	sxth.w	r9, r3
 8002a96:	141d      	asrs	r5, r3, #16
 8002a98:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002a9a:	f004 fee5 	bl	8007868 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002a9e:	4631      	mov	r1, r6
 8002aa0:	9801      	ldr	r0, [sp, #4]
 8002aa2:	f7ff fca7 	bl	80023f4 <MCM_Rev_Park>
 8002aa6:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002aa8:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002aaa:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002aac:	f000 f99c 	bl	8002de8 <PWMC_SetPhaseVoltage>
 8002ab0:	4601      	mov	r1, r0
  FOCVars[M1].Iab = Iab;
 8002ab2:	9802      	ldr	r0, [sp, #8]
 8002ab4:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002ab6:	9803      	ldr	r0, [sp, #12]
 8002ab8:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002aba:	9800      	ldr	r0, [sp, #0]
 8002abc:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8002abe:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8002ac0:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 8002ac2:	f8a4 9016 	strh.w	r9, [r4, #22]
 8002ac6:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8002ac8:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002aca:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 8002ace:	d038      	beq.n	8002b42 <TSK_HighFrequencyTask+0x136>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002ad0:	482e      	ldr	r0, [pc, #184]	; (8002b8c <TSK_HighFrequencyTask+0x180>)
 8002ad2:	f005 fa3f 	bl	8007f54 <RUC_FirstAccelerationStageReached>
 8002ad6:	4604      	mov	r4, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8002ad8:	f8d8 0000 	ldr.w	r0, [r8]
 8002adc:	9006      	str	r0, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002ade:	482c      	ldr	r0, [pc, #176]	; (8002b90 <TSK_HighFrequencyTask+0x184>)
 8002ae0:	f003 fcee 	bl	80064c0 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8002ae4:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002ae6:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8002ae8:	482a      	ldr	r0, [pc, #168]	; (8002b94 <TSK_HighFrequencyTask+0x188>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002aea:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8002aee:	f005 fa5f 	bl	8007fb0 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8002af2:	4828      	ldr	r0, [pc, #160]	; (8002b94 <TSK_HighFrequencyTask+0x188>)
 8002af4:	f005 fbe6 	bl	80082c4 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8002af8:	b1a4      	cbz	r4, 8002b24 <TSK_HighFrequencyTask+0x118>
    hState = STM_GetState(&STM[M1]);
 8002afa:	481d      	ldr	r0, [pc, #116]	; (8002b70 <TSK_HighFrequencyTask+0x164>)
 8002afc:	f005 f852 	bl	8007ba4 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8002b00:	1f03      	subs	r3, r0, #4
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d911      	bls.n	8002b2c <TSK_HighFrequencyTask+0x120>
 8002b08:	2813      	cmp	r0, #19
 8002b0a:	d00f      	beq.n	8002b2c <TSK_HighFrequencyTask+0x120>
  GLOBAL_TIMESTAMP++;
 8002b0c:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <TSK_HighFrequencyTask+0x18c>)
  if (MCPA_UART_A.Mark != 0)
 8002b0e:	4823      	ldr	r0, [pc, #140]	; (8002b9c <TSK_HighFrequencyTask+0x190>)
  GLOBAL_TIMESTAMP++;
 8002b10:	6813      	ldr	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 8002b12:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8002b16:	3301      	adds	r3, #1
 8002b18:	6013      	str	r3, [r2, #0]
  if (MCPA_UART_A.Mark != 0)
 8002b1a:	b9b9      	cbnz	r1, 8002b4c <TSK_HighFrequencyTask+0x140>
}
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	b009      	add	sp, #36	; 0x24
 8002b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8002b24:	481b      	ldr	r0, [pc, #108]	; (8002b94 <TSK_HighFrequencyTask+0x188>)
 8002b26:	f005 fce5 	bl	80084f4 <STO_ResetPLL>
 8002b2a:	e7e6      	b.n	8002afa <TSK_HighFrequencyTask+0xee>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002b2c:	4819      	ldr	r0, [pc, #100]	; (8002b94 <TSK_HighFrequencyTask+0x188>)
 8002b2e:	f004 fe93 	bl	8007858 <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8002b32:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002b34:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8002b36:	481a      	ldr	r0, [pc, #104]	; (8002ba0 <TSK_HighFrequencyTask+0x194>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002b38:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8002b3c:	f005 f858 	bl	8007bf0 <VSS_CalcElAngle>
 8002b40:	e7e4      	b.n	8002b0c <TSK_HighFrequencyTask+0x100>
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	480a      	ldr	r0, [pc, #40]	; (8002b70 <TSK_HighFrequencyTask+0x164>)
 8002b46:	f004 ff9b 	bl	8007a80 <STM_FaultProcessing>
 8002b4a:	e7df      	b.n	8002b0c <TSK_HighFrequencyTask+0x100>
    MCPA_dataLog (&MCPA_UART_A);
 8002b4c:	f003 fdc6 	bl	80066dc <MCPA_dataLog>
}
 8002b50:	2000      	movs	r0, #0
 8002b52:	b009      	add	sp, #36	; 0x24
 8002b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8002b58:	4d12      	ldr	r5, [pc, #72]	; (8002ba4 <TSK_HighFrequencyTask+0x198>)
 8002b5a:	6828      	ldr	r0, [r5, #0]
 8002b5c:	f004 fe1e 	bl	800779c <REMNG_RampCompleted>
 8002b60:	2800      	cmp	r0, #0
 8002b62:	f47f af5f 	bne.w	8002a24 <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8002b66:	6828      	ldr	r0, [r5, #0]
 8002b68:	f004 fdf6 	bl	8007758 <REMNG_Calc>
 8002b6c:	8220      	strh	r0, [r4, #16]
 8002b6e:	e759      	b.n	8002a24 <TSK_HighFrequencyTask+0x18>
 8002b70:	200009bc 	.word	0x200009bc
 8002b74:	200009e4 	.word	0x200009e4
 8002b78:	20000570 	.word	0x20000570
 8002b7c:	200009dc 	.word	0x200009dc
 8002b80:	2000056c 	.word	0x2000056c
 8002b84:	20000568 	.word	0x20000568
 8002b88:	20000a0c 	.word	0x20000a0c
 8002b8c:	2000031c 	.word	0x2000031c
 8002b90:	20000000 	.word	0x20000000
 8002b94:	200003a8 	.word	0x200003a8
 8002b98:	20000860 	.word	0x20000860
 8002b9c:	20000588 	.word	0x20000588
 8002ba0:	2000052c 	.word	0x2000052c
 8002ba4:	20000a10 	.word	0x20000a10
 8002ba8:	200009e8 	.word	0x200009e8

08002bac <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <TSK_SafetyTask_PWMOFF+0x9c>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002bb0:	4e26      	ldr	r6, [pc, #152]	; (8002c4c <TSK_SafetyTask_PWMOFF+0xa0>)
{
 8002bb2:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002bb4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002bb8:	f003 ff4c 	bl	8006a54 <NTC_CalcAvTemp>
 8002bbc:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002bbe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002bc2:	f000 fa71 	bl	80030a8 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002bc6:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002bca:	4328      	orrs	r0, r5
 8002bcc:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8002bce:	b364      	cbz	r4, 8002c2a <TSK_SafetyTask_PWMOFF+0x7e>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8002bd0:	4f1f      	ldr	r7, [pc, #124]	; (8002c50 <TSK_SafetyTask_PWMOFF+0xa4>)
 8002bd2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8002bd6:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8002bda:	43ea      	mvns	r2, r5
 8002bdc:	b292      	uxth	r2, r2
 8002bde:	4629      	mov	r1, r5
 8002be0:	4638      	mov	r0, r7
 8002be2:	f004 ff4d 	bl	8007a80 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8002be6:	4638      	mov	r0, r7
 8002be8:	f004 ffdc 	bl	8007ba4 <STM_GetState>
 8002bec:	280a      	cmp	r0, #10
 8002bee:	d00a      	beq.n	8002c06 <TSK_SafetyTask_PWMOFF+0x5a>
 8002bf0:	280b      	cmp	r0, #11
 8002bf2:	d107      	bne.n	8002c04 <TSK_SafetyTask_PWMOFF+0x58>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002bf4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002bf8:	f000 fa2a 	bl	8003050 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8002bfc:	4815      	ldr	r0, [pc, #84]	; (8002c54 <TSK_SafetyTask_PWMOFF+0xa8>)
 8002bfe:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002c02:	b9cb      	cbnz	r3, 8002c38 <TSK_SafetyTask_PWMOFF+0x8c>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002c06:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002c0a:	f000 fa21 	bl	8003050 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8002c0e:	4811      	ldr	r0, [pc, #68]	; (8002c54 <TSK_SafetyTask_PWMOFF+0xa8>)
 8002c10:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002c14:	b9a3      	cbnz	r3, 8002c40 <TSK_SafetyTask_PWMOFF+0x94>
    FOC_Clear(bMotor);
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7ff fc44 	bl	80024a4 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <TSK_SafetyTask_PWMOFF+0xac>)
 8002c1e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8002c22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002c26:	f003 bebf 	b.w	80069a8 <MPM_Clear>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8002c2a:	480c      	ldr	r0, [pc, #48]	; (8002c5c <TSK_SafetyTask_PWMOFF+0xb0>)
 8002c2c:	f004 fd56 	bl	80076dc <RVBS_CalcAvVbus>
 8002c30:	f000 000e 	and.w	r0, r0, #14
 8002c34:	4305      	orrs	r5, r0
 8002c36:	e7cb      	b.n	8002bd0 <TSK_SafetyTask_PWMOFF+0x24>
}
 8002c38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      MCPA_flushDataLog (&MCPA_UART_A);
 8002c3c:	f003 be12 	b.w	8006864 <MCPA_flushDataLog>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002c40:	f003 fe10 	bl	8006864 <MCPA_flushDataLog>
 8002c44:	e7e7      	b.n	8002c16 <TSK_SafetyTask_PWMOFF+0x6a>
 8002c46:	bf00      	nop
 8002c48:	20000574 	.word	0x20000574
 8002c4c:	200009dc 	.word	0x200009dc
 8002c50:	200009bc 	.word	0x200009bc
 8002c54:	20000588 	.word	0x20000588
 8002c58:	20000564 	.word	0x20000564
 8002c5c:	20000000 	.word	0x20000000

08002c60 <TSK_SafetyTask>:
{
 8002c60:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <TSK_SafetyTask+0x1c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d000      	beq.n	8002c6c <TSK_SafetyTask+0xc>
}
 8002c6a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7ff ff9d 	bl	8002bac <TSK_SafetyTask_PWMOFF>
}
 8002c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8002c76:	f001 bc1d 	b.w	80044b4 <RCM_ExecUserConv>
 8002c7a:	bf00      	nop
 8002c7c:	20000850 	.word	0x20000850

08002c80 <MC_RunMotorControlTasks>:
{
 8002c80:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8002c82:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <MC_RunMotorControlTasks+0x14>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	b903      	cbnz	r3, 8002c8a <MC_RunMotorControlTasks+0xa>
}
 8002c88:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8002c8a:	f7ff fe77 	bl	800297c <MC_Scheduler>
    TSK_SafetyTask();
 8002c8e:	f7ff ffe7 	bl	8002c60 <TSK_SafetyTask>
}
 8002c92:	bd08      	pop	{r3, pc}
 8002c94:	20000850 	.word	0x20000850

08002c98 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002c98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <TSK_HardwareFaultTask+0x18>)
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	f004 f99f 	bl	8006fe0 <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8002ca6:	4803      	ldr	r0, [pc, #12]	; (8002cb4 <TSK_HardwareFaultTask+0x1c>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	f004 bee8 	b.w	8007a80 <STM_FaultProcessing>
 8002cb0:	200009dc 	.word	0x200009dc
 8002cb4:	200009bc 	.word	0x200009bc

08002cb8 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002cb8:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002cba:	f7ff f991 	bl	8001fe0 <MC_GetSTMStateMotor1>
 8002cbe:	b918      	cbnz	r0, 8002cc8 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8002cc4:	f7ff b966 	b.w	8001f94 <MC_StartMotor1>
}
 8002cc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002ccc:	f7ff b968 	b.w	8001fa0 <MC_StopMotor1>

08002cd0 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002cd0:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cd2:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <mc_lock_pins+0xcc>)
 8002cd4:	4a32      	ldr	r2, [pc, #200]	; (8002da0 <mc_lock_pins+0xd0>)
 8002cd6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cdc:	61d9      	str	r1, [r3, #28]
 8002cde:	b08d      	sub	sp, #52	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ce0:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002ce2:	69da      	ldr	r2, [r3, #28]
 8002ce4:	920b      	str	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cea:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  (void) temp;
 8002cee:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cf0:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002cf2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cf4:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	920a      	str	r2, [sp, #40]	; 0x28
  (void) temp;
 8002cfa:	990a      	ldr	r1, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002cfc:	4a29      	ldr	r2, [pc, #164]	; (8002da4 <mc_lock_pins+0xd4>)
 8002cfe:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d04:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d06:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d08:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <mc_lock_pins+0xd8>)
  temp = READ_REG(GPIOx->LCKR);
 8002d0a:	9109      	str	r1, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d0c:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 8002d12:	9809      	ldr	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d14:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d16:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d18:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d1a:	69d0      	ldr	r0, [r2, #28]
 8002d1c:	9008      	str	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d1e:	f44f 6580 	mov.w	r5, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d22:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  (void) temp;
 8002d26:	9e08      	ldr	r6, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d28:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d2a:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d2c:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d2e:	69d8      	ldr	r0, [r3, #28]
 8002d30:	9007      	str	r0, [sp, #28]
  (void) temp;
 8002d32:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d34:	481d      	ldr	r0, [pc, #116]	; (8002dac <mc_lock_pins+0xdc>)
 8002d36:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d38:	2502      	movs	r5, #2
 8002d3a:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d3c:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d3e:	69d2      	ldr	r2, [r2, #28]
 8002d40:	9206      	str	r2, [sp, #24]
  (void) temp;
 8002d42:	9e06      	ldr	r6, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d44:	4a1a      	ldr	r2, [pc, #104]	; (8002db0 <mc_lock_pins+0xe0>)
 8002d46:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d48:	2680      	movs	r6, #128	; 0x80
 8002d4a:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d4c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	9205      	str	r2, [sp, #20]
  (void) temp;
 8002d52:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d54:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d56:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d58:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	9204      	str	r2, [sp, #16]
  (void) temp;
 8002d5e:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d60:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d62:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d64:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d66:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <mc_lock_pins+0xe4>)
  temp = READ_REG(GPIOx->LCKR);
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	9303      	str	r3, [sp, #12]
  (void) temp;
 8002d6c:	9b03      	ldr	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d6e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d70:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d72:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d74:	69d3      	ldr	r3, [r2, #28]
 8002d76:	9302      	str	r3, [sp, #8]
  (void) temp;
 8002d78:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <mc_lock_pins+0xe8>)
 8002d7c:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d7e:	2004      	movs	r0, #4
 8002d80:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d82:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d84:	69d3      	ldr	r3, [r2, #28]
 8002d86:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002d88:	9b01      	ldr	r3, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d8a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d8c:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d8e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d90:	69d3      	ldr	r3, [r2, #28]
 8002d92:	9300      	str	r3, [sp, #0]
  (void) temp;
 8002d94:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 8002d96:	b00d      	add	sp, #52	; 0x34
 8002d98:	bc70      	pop	{r4, r5, r6}
 8002d9a:	4770      	bx	lr
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	00010100 	.word	0x00010100
 8002da4:	00010040 	.word	0x00010040
 8002da8:	40020400 	.word	0x40020400
 8002dac:	00010002 	.word	0x00010002
 8002db0:	00010080 	.word	0x00010080
 8002db4:	40020800 	.word	0x40020800
 8002db8:	00010004 	.word	0x00010004

08002dbc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002dbc:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002dbe:	f002 fd75 	bl	80058ac <HAL_RCC_GetHCLKFreq>
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <MX_MotorControl_Init+0x20>)
 8002dc4:	fba3 3000 	umull	r3, r0, r3, r0
 8002dc8:	09c0      	lsrs	r0, r0, #7
 8002dca:	f002 f945 	bl	8005058 <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002dce:	4804      	ldr	r0, [pc, #16]	; (8002de0 <MX_MotorControl_Init+0x24>)
 8002dd0:	f7ff fbac 	bl	800252c <MCboot>
  mc_lock_pins();

}
 8002dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002dd8:	f7ff bf7a 	b.w	8002cd0 <mc_lock_pins>
 8002ddc:	10624dd3 	.word	0x10624dd3
 8002de0:	20001ca0 	.word	0x20001ca0

08002de4 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8002de4:	6843      	ldr	r3, [r0, #4]
 8002de6:	4718      	bx	r3

08002de8 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8002de8:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002dea:	f8b0 605c 	ldrh.w	r6, [r0, #92]	; 0x5c
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8002dee:	8f03      	ldrh	r3, [r0, #56]	; 0x38
{
 8002df0:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002df2:	140c      	asrs	r4, r1, #16
{
 8002df4:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002df6:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8002dfa:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002dfc:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8002e00:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8002e04:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002e08:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8002e0c:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002e10:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8002e18:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8002e1c:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8002e20:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8002e24:	db7b      	blt.n	8002f1e <PWMC_SetPhaseVoltage+0x136>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8002e26:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002e2a:	db50      	blt.n	8002ece <PWMC_SetPhaseVoltage+0xe6>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8002e2c:	1aad      	subs	r5, r5, r2
 8002e2e:	bf44      	itt	mi
 8002e30:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002e34:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8002e38:	2900      	cmp	r1, #0
 8002e3a:	bfbc      	itt	lt
 8002e3c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002e40:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bfb8      	it	lt
 8002e48:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8002e4c:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002e50:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002e54:	bfb8      	it	lt
 8002e56:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8002e5a:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8002e5c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8002e60:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8002e64:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8002e68:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
      pHandle->lowDuty = wTimePhB;
 8002e6c:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 8002e70:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));

  if ( pHandle->DTTest == 1u )
 8002e74:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002e78:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002e7c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8002e80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002e84:	b292      	uxth	r2, r2
 8002e86:	b289      	uxth	r1, r1
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8002e8c:	8742      	strh	r2, [r0, #58]	; 0x3a
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8002e8e:	8781      	strh	r1, [r0, #60]	; 0x3c
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8002e90:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if ( pHandle->DTTest == 1u )
 8002e92:	d118      	bne.n	8002ec6 <PWMC_SetPhaseVoltage+0xde>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8002e94:	f9b0 404c 	ldrsh.w	r4, [r0, #76]	; 0x4c
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8002e98:	f9b0 504e 	ldrsh.w	r5, [r0, #78]	; 0x4e
    if ( pHandle->Ia > 0 )
 8002e9c:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8002e9e:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
 8002ea2:	bfcc      	ite	gt
 8002ea4:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8002ea6:	1b12      	suble	r2, r2, r4
 8002ea8:	b292      	uxth	r2, r2
 8002eaa:	8742      	strh	r2, [r0, #58]	; 0x3a
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8002eac:	f9b0 2050 	ldrsh.w	r2, [r0, #80]	; 0x50
    if ( pHandle->Ib > 0 )
 8002eb0:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8002eb2:	bfcc      	ite	gt
 8002eb4:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8002eb6:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8002eb8:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8002eba:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8002ebc:	bfcc      	ite	gt
 8002ebe:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8002ec0:	1b1b      	suble	r3, r3, r4
 8002ec2:	8781      	strh	r1, [r0, #60]	; 0x3c
 8002ec4:	87c3      	strh	r3, [r0, #62]	; 0x3e
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8002ec6:	6983      	ldr	r3, [r0, #24]
}
 8002ec8:	b003      	add	sp, #12
 8002eca:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8002ecc:	4718      	bx	r3
      if ( wX <= 0 )
 8002ece:	2c00      	cmp	r4, #0
 8002ed0:	dd4b      	ble.n	8002f6a <PWMC_SetPhaseVoltage+0x182>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002ed2:	1aa5      	subs	r5, r4, r2
 8002ed4:	bf44      	itt	mi
 8002ed6:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002eda:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8002ede:	2900      	cmp	r1, #0
 8002ee0:	bfb8      	it	lt
 8002ee2:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8002ee6:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8002eea:	bfb8      	it	lt
 8002eec:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8002ef0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002ef4:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8002ef6:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002ef8:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8002efc:	bfb8      	it	lt
 8002efe:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8002f02:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8002f06:	bfb8      	it	lt
 8002f08:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002f0c:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8002f10:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        pHandle->lowDuty = wTimePhA;
 8002f14:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 8002f18:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhC;
 8002f1c:	e7aa      	b.n	8002e74 <PWMC_SetPhaseVoltage+0x8c>
    if ( wZ < 0 )
 8002f1e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002f22:	db6f      	blt.n	8003004 <PWMC_SetPhaseVoltage+0x21c>
      if ( wX <= 0 )
 8002f24:	2c00      	cmp	r4, #0
 8002f26:	dd47      	ble.n	8002fb8 <PWMC_SetPhaseVoltage+0x1d0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002f28:	1b2d      	subs	r5, r5, r4
 8002f2a:	bf48      	it	mi
 8002f2c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8002f30:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002f34:	bf48      	it	mi
 8002f36:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	bfb8      	it	lt
 8002f3e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8002f42:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002f46:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002f4a:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8002f4e:	bfb8      	it	lt
 8002f50:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8002f54:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002f58:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8002f5c:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8002f60:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 8002f64:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8002f68:	e784      	b.n	8002e74 <PWMC_SetPhaseVoltage+0x8c>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002f6a:	1b2d      	subs	r5, r5, r4
 8002f6c:	bf44      	itt	mi
 8002f6e:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002f72:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bfb8      	it	lt
 8002f7a:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8002f7e:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8002f82:	bfb8      	it	lt
 8002f84:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8002f88:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
        wTimePhB = wTimePhC + wX / 131072;
 8002f8c:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8002f8e:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8002f92:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002f96:	bfb8      	it	lt
 8002f98:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8002f9c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8002fa0:	bfb8      	it	lt
 8002fa2:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8002fa6:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 8002faa:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        pHandle->lowDuty = wTimePhA;
 8002fae:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhC;
 8002fb2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhB;
 8002fb6:	e75d      	b.n	8002e74 <PWMC_SetPhaseVoltage+0x8c>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002fb8:	1aa5      	subs	r5, r4, r2
 8002fba:	bf44      	itt	mi
 8002fbc:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8002fc0:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8002fc4:	2900      	cmp	r1, #0
 8002fc6:	bfb8      	it	lt
 8002fc8:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8002fcc:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8002fd0:	bfb8      	it	lt
 8002fd2:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8002fd6:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002fda:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8002fdc:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8002fde:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8002fe2:	bfb8      	it	lt
 8002fe4:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8002fe8:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8002fec:	bfb8      	it	lt
 8002fee:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002ff2:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8002ff6:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        pHandle->midDuty = wTimePhB;
 8002ffa:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
        pHandle->highDuty = wTimePhA;
 8002ffe:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
 8003002:	e737      	b.n	8002e74 <PWMC_SetPhaseVoltage+0x8c>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8003004:	1aad      	subs	r5, r5, r2
 8003006:	bf44      	itt	mi
 8003008:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 800300c:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8003010:	2900      	cmp	r1, #0
 8003012:	bfbc      	itt	lt
 8003014:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8003018:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 800301c:	2b00      	cmp	r3, #0
 800301e:	bfb8      	it	lt
 8003020:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8003024:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8003028:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 800302c:	bfb8      	it	lt
 800302e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8003032:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8003034:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8003038:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 800303c:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
      pHandle->lowDuty = wTimePhC;
 8003040:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      pHandle->midDuty = wTimePhA;
 8003044:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
      pHandle->highDuty = wTimePhB;
 8003048:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
 800304c:	e712      	b.n	8002e74 <PWMC_SetPhaseVoltage+0x8c>
 800304e:	bf00      	nop

08003050 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8003050:	6883      	ldr	r3, [r0, #8]
 8003052:	4718      	bx	r3

08003054 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8003054:	b510      	push	{r4, lr}
 8003056:	4604      	mov	r4, r0
 8003058:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 800305a:	b199      	cbz	r1, 8003084 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 800305c:	2901      	cmp	r1, #1
 800305e:	d002      	beq.n	8003066 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8003060:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8003062:	b002      	add	sp, #8
 8003064:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8003066:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 800306a:	b1cb      	cbz	r3, 80030a0 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 800306c:	3b01      	subs	r3, #1
 800306e:	b29b      	uxth	r3, r3
 8003070:	9101      	str	r1, [sp, #4]
 8003072:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f2      	bne.n	8003060 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 800307a:	6903      	ldr	r3, [r0, #16]
 800307c:	4798      	blx	r3
        retVal = true;
 800307e:	9901      	ldr	r1, [sp, #4]
 8003080:	4608      	mov	r0, r1
 8003082:	e7ee      	b.n	8003062 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8003084:	f7ff ffe4 	bl	8003050 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8003088:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800308c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e5      	bne.n	8003060 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8003094:	4620      	mov	r0, r4
 8003096:	6923      	ldr	r3, [r4, #16]
 8003098:	4798      	blx	r3
      retVal = true;
 800309a:	2001      	movs	r0, #1
}
 800309c:	b002      	add	sp, #8
 800309e:	bd10      	pop	{r4, pc}
      retVal = true;
 80030a0:	4608      	mov	r0, r1
}
 80030a2:	b002      	add	sp, #8
 80030a4:	bd10      	pop	{r4, pc}
 80030a6:	bf00      	nop

080030a8 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 80030a8:	69c3      	ldr	r3, [r0, #28]
 80030aa:	4718      	bx	r3

080030ac <RI_SetRegCommandParser>:
static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, int16_t maxSize);

__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80030ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b0:	4681      	mov	r9, r0
  uint16_t * dataElementID;
  uint8_t * rxData = pHandle->rxBuffer;
  uint8_t * txData = pHandle->txBuffer;
  int16_t rxLength = pHandle->rxLength;
 80030b2:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  uint16_t size;
  uint8_t retVal=MCP_CMD_OK;
  uint8_t accessResult;
  uint8_t number_of_item =0;
  pHandle->txLength = 0;
 80030b6:	2300      	movs	r3, #0
  while (rxLength > 0)
 80030b8:	4298      	cmp	r0, r3
  uint8_t * txData = pHandle->txBuffer;
 80030ba:	e9d9 6201 	ldrd	r6, r2, [r9, #4]
{
 80030be:	b089      	sub	sp, #36	; 0x24
  pHandle->txLength = 0;
 80030c0:	f8a9 300e 	strh.w	r3, [r9, #14]
  while (rxLength > 0)
 80030c4:	f340 8082 	ble.w	80031cc <RI_SetRegCommandParser+0x120>
  uint8_t * txData = pHandle->txBuffer;
 80030c8:	4690      	mov	r8, r2
 80030ca:	440a      	add	r2, r1
  uint8_t retVal=MCP_CMD_OK;
 80030cc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80030d0:	f1c8 0301 	rsb	r3, r8, #1
 80030d4:	f8cd 9000 	str.w	r9, [sp]
 80030d8:	4699      	mov	r9, r3
  {
     number_of_item ++;
     dataElementID = (uint16_t *) rxData;
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
     rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 80030da:	4637      	mov	r7, r6
  uint8_t retVal = MCP_CMD_OK;
  uint16_t regID = dataID & REG_MASK;
  typeID = dataID & TYPE_MASK;
  motorID = (dataID & MOTOR_MASK)-1;

  MCI_Handle_t * pMCI = &Mci[motorID];
 80030dc:	4bb7      	ldr	r3, [pc, #732]	; (80033bc <RI_SetRegCommandParser+0x310>)
     accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 80030de:	f837 cb02 	ldrh.w	ip, [r7], #2
  motorID = (dataID & MOTOR_MASK)-1;
 80030e2:	f00c 0507 	and.w	r5, ip, #7
 80030e6:	3d01      	subs	r5, #1
  MCI_Handle_t * pMCI = &Mci[motorID];
 80030e8:	b2ec      	uxtb	r4, r5
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80030ea:	fa1f fa80 	uxth.w	sl, r0
 80030ee:	f00c 0138 	and.w	r1, ip, #56	; 0x38
 80030f2:	f1aa 0002 	sub.w	r0, sl, #2
  MCI_Handle_t * pMCI = &Mci[motorID];
 80030f6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  uint16_t regID = dataID & REG_MASK;
 80030fa:	f02c 0207 	bic.w	r2, ip, #7
 80030fe:	3908      	subs	r1, #8
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003100:	fa1f fb80 	uxth.w	fp, r0
  MCI_Handle_t * pMCI = &Mci[motorID];
 8003104:	eb03 0484 	add.w	r4, r3, r4, lsl #2
  motorID = (dataID & MOTOR_MASK)-1;
 8003108:	b2ed      	uxtb	r5, r5
  uint16_t regID = dataID & REG_MASK;
 800310a:	b292      	uxth	r2, r2
     rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800310c:	b200      	sxth	r0, r0

  switch (typeID)
 800310e:	2920      	cmp	r1, #32
 8003110:	d812      	bhi.n	8003138 <RI_SetRegCommandParser+0x8c>
 8003112:	e8df f001 	tbb	[pc, r1]
 8003116:	11c0      	.short	0x11c0
 8003118:	11111111 	.word	0x11111111
 800311c:	11981111 	.word	0x11981111
 8003120:	11111111 	.word	0x11111111
 8003124:	11821111 	.word	0x11821111
 8003128:	11111111 	.word	0x11111111
 800312c:	11621111 	.word	0x11621111
 8003130:	11111111 	.word	0x11111111
 8003134:	1111      	.short	0x1111
 8003136:	29          	.byte	0x29
 8003137:	00          	.byte	0x00
  MCI_Handle_t * pMCI = &Mci[motorID];
 8003138:	2507      	movs	r5, #7
     if (number_of_item == 1 && rxLength == 0)
 800313a:	eb08 0209 	add.w	r2, r8, r9
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	2a01      	cmp	r2, #1
 8003142:	d03d      	beq.n	80031c0 <RI_SetRegCommandParser+0x114>
       if (txSyncFreeSpace !=0 )
 8003144:	9b01      	ldr	r3, [sp, #4]
 8003146:	4598      	cmp	r8, r3
 8003148:	f000 80b6 	beq.w	80032b8 <RI_SetRegCommandParser+0x20c>
         *txData = accessResult;
 800314c:	f808 5b01 	strb.w	r5, [r8], #1
         pHandle->txLength++;
 8003150:	9b00      	ldr	r3, [sp, #0]
 8003152:	89da      	ldrh	r2, [r3, #14]
 8003154:	3201      	adds	r2, #1
 8003156:	81da      	strh	r2, [r3, #14]
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8003158:	2d00      	cmp	r5, #0
 800315a:	f040 80b2 	bne.w	80032c2 <RI_SetRegCommandParser+0x216>
  while (rxLength > 0)
 800315e:	2800      	cmp	r0, #0
 8003160:	f340 8337 	ble.w	80037d2 <RI_SetRegCommandParser+0x726>
 8003164:	463e      	mov	r6, r7
 8003166:	e7b8      	b.n	80030da <RI_SetRegCommandParser+0x2e>
      RI_MovString (charData, dummy, size, dataAvailable);
    }
    break;
  case TYPE_DATA_RAW:
    {
      uint16_t rawSize = *(uint16_t *) data;
 8003168:	f8b6 e002 	ldrh.w	lr, [r6, #2]
      *size = rawSize+2; /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
 800316c:	f10e 0a02 	add.w	sl, lr, #2
 8003170:	fa1f fa8a 	uxth.w	sl, sl
      uint8_t * rawData = data+2; /* rawData points to the first data (after size extraction) */
      if (*size > dataAvailable )
 8003174:	4582      	cmp	sl, r0
 8003176:	f300 824b 	bgt.w	8003610 <RI_SetRegCommandParser+0x564>
 800317a:	f5b2 7f0a 	cmp.w	r2, #552	; 0x228
      uint8_t * rawData = data+2; /* rawData points to the first data (after size extraction) */
 800317e:	f106 0104 	add.w	r1, r6, #4
        *size =0;
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
      }
      else
      {
        switch (regID)
 8003182:	f000 8299 	beq.w	80036b8 <RI_SetRegCommandParser+0x60c>
 8003186:	f200 821a 	bhi.w	80035be <RI_SetRegCommandParser+0x512>
 800318a:	f5b2 7fd4 	cmp.w	r2, #424	; 0x1a8
 800318e:	f000 826d 	beq.w	800366c <RI_SetRegCommandParser+0x5c0>
 8003192:	f240 8209 	bls.w	80035a8 <RI_SetRegCommandParser+0x4fc>
 8003196:	f5b2 7ff4 	cmp.w	r2, #488	; 0x1e8
 800319a:	f040 8225 	bne.w	80035e8 <RI_SetRegCommandParser+0x53c>
          {
            uint32_t torque;
            uint16_t duration;
            torque = *(int32_t *)rawData;
            duration = *(uint16_t *)&rawData[4];
            MCI_ExecTorqueRamp(pMCI,torque,duration);
 800319e:	8932      	ldrh	r2, [r6, #8]
 80031a0:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 80031a4:	4620      	mov	r0, r4
 80031a6:	f7fe ff3b 	bl	8002020 <MCI_ExecTorqueRamp>
     if (number_of_item == 1 && rxLength == 0)
 80031aa:	eb08 0209 	add.w	r2, r8, r9
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	ebab 000a 	sub.w	r0, fp, sl
 80031b4:	2a01      	cmp	r2, #1
 80031b6:	4457      	add	r7, sl
 80031b8:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80031ba:	f04f 0500 	mov.w	r5, #0
     if (number_of_item == 1 && rxLength == 0)
 80031be:	d1c1      	bne.n	8003144 <RI_SetRegCommandParser+0x98>
 80031c0:	2800      	cmp	r0, #0
 80031c2:	d1bf      	bne.n	8003144 <RI_SetRegCommandParser+0x98>
  if (retVal == MCP_CMD_OK)
 80031c4:	f8dd 9000 	ldr.w	r9, [sp]
 80031c8:	2d00      	cmp	r5, #0
 80031ca:	d176      	bne.n	80032ba <RI_SetRegCommandParser+0x20e>
    pHandle->txLength = 0;
 80031cc:	2500      	movs	r5, #0
}
 80031ce:	4628      	mov	r0, r5
    pHandle->txLength = 0;
 80031d0:	f8a9 500e 	strh.w	r5, [r9, #14]
}
 80031d4:	b009      	add	sp, #36	; 0x24
 80031d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

uint8_t RI_MovString (const char * srcString, char * destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  *size= 1 ; /* /0 is the min String size */
  while ((*srcString != 0) && (*size < maxSize) )
 80031da:	78b2      	ldrb	r2, [r6, #2]
 80031dc:	2a00      	cmp	r2, #0
 80031de:	f000 82ab 	beq.w	8003738 <RI_SetRegCommandParser+0x68c>
 80031e2:	2801      	cmp	r0, #1
 80031e4:	f340 82ac 	ble.w	8003740 <RI_SetRegCommandParser+0x694>
 80031e8:	1cf1      	adds	r1, r6, #3
 80031ea:	9b00      	ldr	r3, [sp, #0]
 80031ec:	43f6      	mvns	r6, r6
 80031ee:	e002      	b.n	80031f6 <RI_SetRegCommandParser+0x14a>
 80031f0:	4290      	cmp	r0, r2
 80031f2:	f340 8205 	ble.w	8003600 <RI_SetRegCommandParser+0x554>
  {
    *destString = *srcString ;
    srcString = srcString+1;
 80031f6:	1872      	adds	r2, r6, r1
 80031f8:	460c      	mov	r4, r1
  while ((*srcString != 0) && (*size < maxSize) )
 80031fa:	f811 5b01 	ldrb.w	r5, [r1], #1
 80031fe:	b292      	uxth	r2, r2
 8003200:	2d00      	cmp	r5, #0
 8003202:	d1f5      	bne.n	80031f0 <RI_SetRegCommandParser+0x144>
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	4611      	mov	r1, r2
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *destString = 0;
 8003208:	ebab 0a02 	sub.w	sl, fp, r2
 800320c:	2200      	movs	r2, #0
 800320e:	fa0f f08a 	sxth.w	r0, sl
 8003212:	440f      	add	r7, r1
 8003214:	7022      	strb	r2, [r4, #0]
      retVal = MCP_ERROR_RO_REG;
 8003216:	2504      	movs	r5, #4
 8003218:	e78f      	b.n	800313a <RI_SetRegCommandParser+0x8e>
    switch (regID)
 800321a:	2a98      	cmp	r2, #152	; 0x98
 800321c:	f000 8205 	beq.w	800362a <RI_SetRegCommandParser+0x57e>
 8003220:	f240 81a7 	bls.w	8003572 <RI_SetRegCommandParser+0x4c6>
 8003224:	f5b2 7fac 	cmp.w	r2, #344	; 0x158
 8003228:	f000 819c 	beq.w	8003564 <RI_SetRegCommandParser+0x4b8>
 800322c:	f240 8194 	bls.w	8003558 <RI_SetRegCommandParser+0x4ac>
 8003230:	f5b2 7fcc 	cmp.w	r2, #408	; 0x198
 8003234:	f000 8196 	beq.w	8003564 <RI_SetRegCommandParser+0x4b8>
      retVal = MCP_ERROR_UNKNOWN_REG;
 8003238:	f1aa 0a06 	sub.w	sl, sl, #6
 800323c:	fa0f f08a 	sxth.w	r0, sl
 8003240:	1db7      	adds	r7, r6, #6
 8003242:	2505      	movs	r5, #5
 8003244:	e779      	b.n	800313a <RI_SetRegCommandParser+0x8e>
    uint16_t regdata16 = *(uint16_t *)data;
 8003246:	f5b2 6f15 	cmp.w	r2, #2384	; 0x950
 800324a:	8877      	ldrh	r7, [r6, #2]
    switch (regID)
 800324c:	f000 82ba 	beq.w	80037c4 <RI_SetRegCommandParser+0x718>
 8003250:	d87c      	bhi.n	800334c <RI_SetRegCommandParser+0x2a0>
 8003252:	f5b2 7f34 	cmp.w	r2, #720	; 0x2d0
 8003256:	f000 82b0 	beq.w	80037ba <RI_SetRegCommandParser+0x70e>
 800325a:	d94a      	bls.n	80032f2 <RI_SetRegCommandParser+0x246>
 800325c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8003260:	f000 828c 	beq.w	800377c <RI_SetRegCommandParser+0x6d0>
 8003264:	d956      	bls.n	8003314 <RI_SetRegCommandParser+0x268>
 8003266:	f5b2 6fba 	cmp.w	r2, #1488	; 0x5d0
 800326a:	d00e      	beq.n	800328a <RI_SetRegCommandParser+0x1de>
 800326c:	d931      	bls.n	80032d2 <RI_SetRegCommandParser+0x226>
 800326e:	f5b2 6f01 	cmp.w	r2, #2064	; 0x810
 8003272:	d00a      	beq.n	800328a <RI_SetRegCommandParser+0x1de>
 8003274:	f240 8184 	bls.w	8003580 <RI_SetRegCommandParser+0x4d4>
 8003278:	f5b2 6f0d 	cmp.w	r2, #2256	; 0x8d0
 800327c:	d005      	beq.n	800328a <RI_SetRegCommandParser+0x1de>
 800327e:	f240 8162 	bls.w	8003546 <RI_SetRegCommandParser+0x49a>
 8003282:	f5b2 6f11 	cmp.w	r2, #2320	; 0x910
 8003286:	f040 811e 	bne.w	80034c6 <RI_SetRegCommandParser+0x41a>
     break;
 800328a:	f1aa 0004 	sub.w	r0, sl, #4
 800328e:	b200      	sxth	r0, r0
 8003290:	1d37      	adds	r7, r6, #4
      retVal = MCP_ERROR_RO_REG;
 8003292:	2504      	movs	r5, #4
     break;
 8003294:	e751      	b.n	800313a <RI_SetRegCommandParser+0x8e>
    switch (regID)
 8003296:	2a88      	cmp	r2, #136	; 0x88
 8003298:	f000 81bc 	beq.w	8003614 <RI_SetRegCommandParser+0x568>
 800329c:	f02c 0c87 	bic.w	ip, ip, #135	; 0x87
 80032a0:	f1aa 0a03 	sub.w	sl, sl, #3
 80032a4:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 80032a8:	fa0f f08a 	sxth.w	r0, sl
 80032ac:	f106 0703 	add.w	r7, r6, #3
 80032b0:	f000 815d 	beq.w	800356e <RI_SetRegCommandParser+0x4c2>
      retVal = MCP_ERROR_UNKNOWN_REG;
 80032b4:	2505      	movs	r5, #5
 80032b6:	e740      	b.n	800313a <RI_SetRegCommandParser+0x8e>
         retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80032b8:	2508      	movs	r5, #8
}
 80032ba:	4628      	mov	r0, r5
 80032bc:	b009      	add	sp, #36	; 0x24
 80032be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80032c2:	2d07      	cmp	r5, #7
 80032c4:	f040 8196 	bne.w	80035f4 <RI_SetRegCommandParser+0x548>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80032c8:	2501      	movs	r5, #1
}
 80032ca:	4628      	mov	r0, r5
 80032cc:	b009      	add	sp, #36	; 0x24
 80032ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d2:	f5b2 6f92 	cmp.w	r2, #1168	; 0x490
 80032d6:	d16b      	bne.n	80033b0 <RI_SetRegCommandParser+0x304>
        PID_SetKP (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 80032d8:	4a39      	ldr	r2, [pc, #228]	; (80033c0 <RI_SetRegCommandParser+0x314>)
 80032da:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80032de:	b239      	sxth	r1, r7
 80032e0:	3034      	adds	r0, #52	; 0x34
 80032e2:	f003 fbf1 	bl	8006ac8 <PID_SetKP>
     break;
 80032e6:	f1aa 0004 	sub.w	r0, sl, #4
 80032ea:	1d37      	adds	r7, r6, #4
 80032ec:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80032ee:	2500      	movs	r5, #0
     break;
 80032f0:	e723      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 80032f2:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 80032f6:	f000 825b 	beq.w	80037b0 <RI_SetRegCommandParser+0x704>
 80032fa:	d976      	bls.n	80033ea <RI_SetRegCommandParser+0x33e>
 80032fc:	f5b2 7f04 	cmp.w	r2, #528	; 0x210
 8003300:	f000 8254 	beq.w	80037ac <RI_SetRegCommandParser+0x700>
 8003304:	f5b2 7f24 	cmp.w	r2, #656	; 0x290
 8003308:	d142      	bne.n	8003390 <RI_SetRegCommandParser+0x2e4>
      PID_SetKP(pPIDId[motorID], regdata16);
 800330a:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <RI_SetRegCommandParser+0x318>)
 800330c:	b239      	sxth	r1, r7
 800330e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8003312:	e7e6      	b.n	80032e2 <RI_SetRegCommandParser+0x236>
 8003314:	f5b2 7f54 	cmp.w	r2, #848	; 0x350
 8003318:	f000 8222 	beq.w	8003760 <RI_SetRegCommandParser+0x6b4>
 800331c:	f5b2 7f64 	cmp.w	r2, #912	; 0x390
 8003320:	d154      	bne.n	80033cc <RI_SetRegCommandParser+0x320>
        STO_PLL_GetObserverGains(stoPLLSensor[motorID],&hC1,&hC2);
 8003322:	4c27      	ldr	r4, [pc, #156]	; (80033c0 <RI_SetRegCommandParser+0x314>)
 8003324:	aa05      	add	r2, sp, #20
 8003326:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800332a:	f10d 0112 	add.w	r1, sp, #18
 800332e:	f005 f8cf 	bl	80084d0 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains(stoPLLSensor[motorID],hC1,regdata16);
 8003332:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8003336:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800333a:	b23a      	sxth	r2, r7
 800333c:	f005 f8d0 	bl	80084e0 <STO_PLL_SetObserverGains>
      break;
 8003340:	f1aa 0004 	sub.w	r0, sl, #4
 8003344:	1d37      	adds	r7, r6, #4
 8003346:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8003348:	2500      	movs	r5, #0
      break;
 800334a:	e6f6      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 800334c:	f241 5110 	movw	r1, #5392	; 0x1510
 8003350:	428a      	cmp	r2, r1
 8003352:	f000 8200 	beq.w	8003756 <RI_SetRegCommandParser+0x6aa>
 8003356:	d975      	bls.n	8003444 <RI_SetRegCommandParser+0x398>
 8003358:	f241 6110 	movw	r1, #5648	; 0x1610
 800335c:	428a      	cmp	r2, r1
 800335e:	f000 81f5 	beq.w	800374c <RI_SetRegCommandParser+0x6a0>
 8003362:	d961      	bls.n	8003428 <RI_SetRegCommandParser+0x37c>
 8003364:	f641 01d0 	movw	r1, #6352	; 0x18d0
 8003368:	428a      	cmp	r2, r1
 800336a:	f000 8219 	beq.w	80037a0 <RI_SetRegCommandParser+0x6f4>
 800336e:	f641 1110 	movw	r1, #6416	; 0x1910
 8003372:	428a      	cmp	r2, r1
 8003374:	d141      	bne.n	80033fa <RI_SetRegCommandParser+0x34e>
      PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <RI_SetRegCommandParser+0x314>)
 8003378:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800337c:	4639      	mov	r1, r7
 800337e:	3034      	adds	r0, #52	; 0x34
 8003380:	f003 fbbe 	bl	8006b00 <PID_SetKPDivisorPOW2>
      break;
 8003384:	f1aa 0004 	sub.w	r0, sl, #4
 8003388:	1d37      	adds	r7, r6, #4
 800338a:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 800338c:	2500      	movs	r5, #0
      break;
 800338e:	e6d4      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 8003390:	f5b2 7fe8 	cmp.w	r2, #464	; 0x1d0
 8003394:	f040 8097 	bne.w	80034c6 <RI_SetRegCommandParser+0x41a>
      PID_SetKI(pPIDIq[motorID], regdata16);
 8003398:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <RI_SetRegCommandParser+0x31c>)
 800339a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800339e:	b239      	sxth	r1, r7
        PID_SetKI (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 80033a0:	f003 fb94 	bl	8006acc <PID_SetKI>
     break;
 80033a4:	f1aa 0004 	sub.w	r0, sl, #4
 80033a8:	1d37      	adds	r7, r6, #4
 80033aa:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80033ac:	2500      	movs	r5, #0
     break;
 80033ae:	e6c4      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 80033b0:	f5b2 6fb2 	cmp.w	r2, #1424	; 0x590
 80033b4:	f43f af69 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 80033b8:	e085      	b.n	80034c6 <RI_SetRegCommandParser+0x41a>
 80033ba:	bf00      	nop
 80033bc:	200009a0 	.word	0x200009a0
 80033c0:	20000650 	.word	0x20000650
 80033c4:	20000568 	.word	0x20000568
 80033c8:	2000056c 	.word	0x2000056c
 80033cc:	f5b2 7f44 	cmp.w	r2, #784	; 0x310
 80033d0:	d179      	bne.n	80034c6 <RI_SetRegCommandParser+0x41a>
      PID_SetKD(pPIDId[motorID], regdata16);
 80033d2:	4ab4      	ldr	r2, [pc, #720]	; (80036a4 <RI_SetRegCommandParser+0x5f8>)
 80033d4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80033d8:	b239      	sxth	r1, r7
 80033da:	f003 fbb5 	bl	8006b48 <PID_SetKD>
     break;
 80033de:	f1aa 0004 	sub.w	r0, sl, #4
 80033e2:	1d37      	adds	r7, r6, #4
 80033e4:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 80033e6:	2500      	movs	r5, #0
     break;
 80033e8:	e6a7      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 80033ea:	2ad0      	cmp	r2, #208	; 0xd0
 80033ec:	f000 81d1 	beq.w	8003792 <RI_SetRegCommandParser+0x6e6>
 80033f0:	f5b2 7f88 	cmp.w	r2, #272	; 0x110
 80033f4:	d111      	bne.n	800341a <RI_SetRegCommandParser+0x36e>
      PID_SetKD(pPIDSpeed[motorID], regdata16);
 80033f6:	4aac      	ldr	r2, [pc, #688]	; (80036a8 <RI_SetRegCommandParser+0x5fc>)
 80033f8:	e7ec      	b.n	80033d4 <RI_SetRegCommandParser+0x328>
 80033fa:	f241 6150 	movw	r1, #5712	; 0x1650
 80033fe:	428a      	cmp	r2, r1
 8003400:	d161      	bne.n	80034c6 <RI_SetRegCommandParser+0x41a>
      PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8003402:	4aaa      	ldr	r2, [pc, #680]	; (80036ac <RI_SetRegCommandParser+0x600>)
 8003404:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8003408:	4639      	mov	r1, r7
 800340a:	f003 fba7 	bl	8006b5c <PID_SetKDDivisorPOW2>
      break;
 800340e:	f1aa 0004 	sub.w	r0, sl, #4
 8003412:	1d37      	adds	r7, r6, #4
 8003414:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8003416:	2500      	movs	r5, #0
      break;
 8003418:	e68f      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 800341a:	2a90      	cmp	r2, #144	; 0x90
 800341c:	d153      	bne.n	80034c6 <RI_SetRegCommandParser+0x41a>
      PID_SetKP(pPIDSpeed[motorID], regdata16);
 800341e:	4aa2      	ldr	r2, [pc, #648]	; (80036a8 <RI_SetRegCommandParser+0x5fc>)
 8003420:	b239      	sxth	r1, r7
 8003422:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8003426:	e75c      	b.n	80032e2 <RI_SetRegCommandParser+0x236>
 8003428:	f241 5190 	movw	r1, #5520	; 0x1590
 800342c:	428a      	cmp	r2, r1
 800342e:	f000 81b5 	beq.w	800379c <RI_SetRegCommandParser+0x6f0>
 8003432:	f241 51d0 	movw	r1, #5584	; 0x15d0
 8003436:	428a      	cmp	r2, r1
 8003438:	d114      	bne.n	8003464 <RI_SetRegCommandParser+0x3b8>
      PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 800343a:	4a9c      	ldr	r2, [pc, #624]	; (80036ac <RI_SetRegCommandParser+0x600>)
 800343c:	4639      	mov	r1, r7
 800343e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8003442:	e79d      	b.n	8003380 <RI_SetRegCommandParser+0x2d4>
 8003444:	f5b2 6f69 	cmp.w	r2, #3728	; 0xe90
 8003448:	d036      	beq.n	80034b8 <RI_SetRegCommandParser+0x40c>
 800344a:	d924      	bls.n	8003496 <RI_SetRegCommandParser+0x3ea>
 800344c:	f241 4190 	movw	r1, #5264	; 0x1490
 8003450:	428a      	cmp	r2, r1
 8003452:	f000 8199 	beq.w	8003788 <RI_SetRegCommandParser+0x6dc>
 8003456:	d915      	bls.n	8003484 <RI_SetRegCommandParser+0x3d8>
 8003458:	f241 41d0 	movw	r1, #5328	; 0x14d0
 800345c:	428a      	cmp	r2, r1
 800345e:	d132      	bne.n	80034c6 <RI_SetRegCommandParser+0x41a>
      PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8003460:	4a91      	ldr	r2, [pc, #580]	; (80036a8 <RI_SetRegCommandParser+0x5fc>)
 8003462:	e7cf      	b.n	8003404 <RI_SetRegCommandParser+0x358>
 8003464:	f241 5150 	movw	r1, #5456	; 0x1550
 8003468:	428a      	cmp	r2, r1
 800346a:	d12c      	bne.n	80034c6 <RI_SetRegCommandParser+0x41a>
      PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 800346c:	4a8d      	ldr	r2, [pc, #564]	; (80036a4 <RI_SetRegCommandParser+0x5f8>)
 800346e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8003472:	4639      	mov	r1, r7
      PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8003474:	f003 fb54 	bl	8006b20 <PID_SetKIDivisorPOW2>
      break;
 8003478:	f1aa 0004 	sub.w	r0, sl, #4
 800347c:	1d37      	adds	r7, r6, #4
 800347e:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8003480:	2500      	movs	r5, #0
      break;
 8003482:	e65a      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 8003484:	f241 4150 	movw	r1, #5200	; 0x1450
 8003488:	428a      	cmp	r2, r1
 800348a:	d11b      	bne.n	80034c4 <RI_SetRegCommandParser+0x418>
      PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800348c:	4a86      	ldr	r2, [pc, #536]	; (80036a8 <RI_SetRegCommandParser+0x5fc>)
 800348e:	4639      	mov	r1, r7
 8003490:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8003494:	e774      	b.n	8003380 <RI_SetRegCommandParser+0x2d4>
 8003496:	f5b2 6f31 	cmp.w	r2, #2832	; 0xb10
 800349a:	f43f aef6 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 800349e:	d921      	bls.n	80034e4 <RI_SetRegCommandParser+0x438>
 80034a0:	f5b2 6f45 	cmp.w	r2, #3152	; 0xc50
 80034a4:	f43f aef1 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 80034a8:	d912      	bls.n	80034d0 <RI_SetRegCommandParser+0x424>
 80034aa:	f5b2 6f49 	cmp.w	r2, #3216	; 0xc90
 80034ae:	f43f aeec 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 80034b2:	f5b2 6f65 	cmp.w	r2, #3664	; 0xe50
 80034b6:	d106      	bne.n	80034c6 <RI_SetRegCommandParser+0x41a>
 80034b8:	f1aa 0004 	sub.w	r0, sl, #4
 80034bc:	b200      	sxth	r0, r0
 80034be:	1d37      	adds	r7, r6, #4
  uint8_t retVal = MCP_CMD_OK;
 80034c0:	2500      	movs	r5, #0
 80034c2:	e63a      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 80034c4:	d921      	bls.n	800350a <RI_SetRegCommandParser+0x45e>
      retVal = MCP_ERROR_UNKNOWN_REG;
 80034c6:	f1aa 0004 	sub.w	r0, sl, #4
 80034ca:	b200      	sxth	r0, r0
 80034cc:	1d37      	adds	r7, r6, #4
 80034ce:	e6f1      	b.n	80032b4 <RI_SetRegCommandParser+0x208>
 80034d0:	f5b2 6f3d 	cmp.w	r2, #3024	; 0xbd0
 80034d4:	f43f aed9 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 80034d8:	d920      	bls.n	800351c <RI_SetRegCommandParser+0x470>
 80034da:	f5b2 6f41 	cmp.w	r2, #3088	; 0xc10
 80034de:	f43f aed4 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 80034e2:	e7f0      	b.n	80034c6 <RI_SetRegCommandParser+0x41a>
 80034e4:	f5b2 6f19 	cmp.w	r2, #2448	; 0x990
 80034e8:	d121      	bne.n	800352e <RI_SetRegCommandParser+0x482>
        currComp = MCI_GetIqdref(pMCI);
 80034ea:	4620      	mov	r0, r4
 80034ec:	f7fe fe6a 	bl	80021c4 <MCI_GetIqdref>
 80034f0:	9005      	str	r0, [sp, #20]
        currComp.d = regdata16;
 80034f2:	f8ad 7016 	strh.w	r7, [sp, #22]
        MCI_SetCurrentReferences(pMCI,currComp);
 80034f6:	4620      	mov	r0, r4
 80034f8:	9905      	ldr	r1, [sp, #20]
 80034fa:	f7fe fd9b 	bl	8002034 <MCI_SetCurrentReferences>
      break;
 80034fe:	f1aa 0004 	sub.w	r0, sl, #4
 8003502:	1d37      	adds	r7, r6, #4
 8003504:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8003506:	2500      	movs	r5, #0
      break;
 8003508:	e617      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 800350a:	f5b2 6f6d 	cmp.w	r2, #3792	; 0xed0
 800350e:	f43f aebc 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 8003512:	f5b2 6f71 	cmp.w	r2, #3856	; 0xf10
 8003516:	f43f aeb8 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 800351a:	e7d4      	b.n	80034c6 <RI_SetRegCommandParser+0x41a>
 800351c:	f5b2 6f35 	cmp.w	r2, #2896	; 0xb50
 8003520:	f43f aeb3 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 8003524:	f5b2 6f39 	cmp.w	r2, #2960	; 0xb90
 8003528:	f43f aeaf 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 800352c:	e7cb      	b.n	80034c6 <RI_SetRegCommandParser+0x41a>
 800352e:	d3ca      	bcc.n	80034c6 <RI_SetRegCommandParser+0x41a>
 8003530:	f5b2 6f25 	cmp.w	r2, #2640	; 0xa50
 8003534:	f43f aea9 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 8003538:	d92d      	bls.n	8003596 <RI_SetRegCommandParser+0x4ea>
 800353a:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 800353e:	f5bc 6f29 	cmp.w	ip, #2704	; 0xa90
 8003542:	d1c0      	bne.n	80034c6 <RI_SetRegCommandParser+0x41a>
 8003544:	e6a1      	b.n	800328a <RI_SetRegCommandParser+0x1de>
 8003546:	f5b2 6f05 	cmp.w	r2, #2128	; 0x850
 800354a:	f43f ae9e 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 800354e:	f5b2 6f09 	cmp.w	r2, #2192	; 0x890
 8003552:	f43f ae9a 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 8003556:	e7b6      	b.n	80034c6 <RI_SetRegCommandParser+0x41a>
 8003558:	2ad8      	cmp	r2, #216	; 0xd8
 800355a:	d003      	beq.n	8003564 <RI_SetRegCommandParser+0x4b8>
 800355c:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 8003560:	f47f ae6a 	bne.w	8003238 <RI_SetRegCommandParser+0x18c>
 8003564:	f1aa 0a06 	sub.w	sl, sl, #6
 8003568:	fa0f f08a 	sxth.w	r0, sl
 800356c:	1db7      	adds	r7, r6, #6
      retVal = MCP_ERROR_RO_REG;
 800356e:	2504      	movs	r5, #4
 8003570:	e5e3      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 8003572:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 8003576:	f1bc 0f18 	cmp.w	ip, #24
 800357a:	f47f ae5d 	bne.w	8003238 <RI_SetRegCommandParser+0x18c>
 800357e:	e7f1      	b.n	8003564 <RI_SetRegCommandParser+0x4b8>
 8003580:	f5b2 6fc2 	cmp.w	r2, #1552	; 0x610
 8003584:	f43f ae81 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 8003588:	d39d      	bcc.n	80034c6 <RI_SetRegCommandParser+0x41a>
 800358a:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 800358e:	f5bc 6ff2 	cmp.w	ip, #1936	; 0x790
 8003592:	d198      	bne.n	80034c6 <RI_SetRegCommandParser+0x41a>
 8003594:	e679      	b.n	800328a <RI_SetRegCommandParser+0x1de>
 8003596:	f5b2 6f1d 	cmp.w	r2, #2512	; 0x9d0
 800359a:	f43f ae76 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 800359e:	f5b2 6f21 	cmp.w	r2, #2576	; 0xa10
 80035a2:	f43f ae72 	beq.w	800328a <RI_SetRegCommandParser+0x1de>
 80035a6:	e78e      	b.n	80034c6 <RI_SetRegCommandParser+0x41a>
 80035a8:	2aa8      	cmp	r2, #168	; 0xa8
 80035aa:	d002      	beq.n	80035b2 <RI_SetRegCommandParser+0x506>
 80035ac:	d917      	bls.n	80035de <RI_SetRegCommandParser+0x532>
 80035ae:	2ae8      	cmp	r2, #232	; 0xe8
 80035b0:	d11a      	bne.n	80035e8 <RI_SetRegCommandParser+0x53c>
 80035b2:	ebab 000a 	sub.w	r0, fp, sl
 80035b6:	b200      	sxth	r0, r0
 80035b8:	4457      	add	r7, sl
          retVal = MCP_ERROR_RO_REG;
 80035ba:	2504      	movs	r5, #4
 80035bc:	e5bd      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 80035be:	f5b2 7f5a 	cmp.w	r2, #872	; 0x368
 80035c2:	d064      	beq.n	800368e <RI_SetRegCommandParser+0x5e2>
 80035c4:	f5b2 6fa5 	cmp.w	r2, #1320	; 0x528
 80035c8:	d10e      	bne.n	80035e8 <RI_SetRegCommandParser+0x53c>
           retVal =  MCPA_cfgLog ( &MCPA_UART_A, rawData );
 80035ca:	4839      	ldr	r0, [pc, #228]	; (80036b0 <RI_SetRegCommandParser+0x604>)
 80035cc:	f003 f978 	bl	80068c0 <MCPA_cfgLog>
 80035d0:	ebab 0b0a 	sub.w	fp, fp, sl
 80035d4:	4605      	mov	r5, r0
          break;
 80035d6:	4457      	add	r7, sl
 80035d8:	fa0f f08b 	sxth.w	r0, fp
 80035dc:	e5ad      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 80035de:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 80035e2:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 80035e6:	d0e4      	beq.n	80035b2 <RI_SetRegCommandParser+0x506>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80035e8:	ebab 000a 	sub.w	r0, fp, sl
 80035ec:	b200      	sxth	r0, r0
 80035ee:	4457      	add	r7, sl
 80035f0:	2505      	movs	r5, #5
 80035f2:	e5a2      	b.n	800313a <RI_SetRegCommandParser+0x8e>
         if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80035f4:	2d0a      	cmp	r5, #10
 80035f6:	f43f ae67 	beq.w	80032c8 <RI_SetRegCommandParser+0x21c>
         retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80035fa:	2301      	movs	r3, #1
 80035fc:	9302      	str	r3, [sp, #8]
 80035fe:	e5ae      	b.n	800315e <RI_SetRegCommandParser+0xb2>
 8003600:	ebab 0a02 	sub.w	sl, fp, r2
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	fa0f f08a 	sxth.w	r0, sl
 800360a:	4417      	add	r7, r2
      retVal = MCP_ERROR_RO_REG;
 800360c:	2504      	movs	r5, #4
 800360e:	e594      	b.n	800313a <RI_SetRegCommandParser+0x8e>
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8003610:	250a      	movs	r5, #10
 8003612:	e592      	b.n	800313a <RI_SetRegCommandParser+0x8e>
    uint8_t regdata8 = *data;
 8003614:	78b5      	ldrb	r5, [r6, #2]
        if ((STC_Modality_t)regdata8 == STC_TORQUE_MODE)
 8003616:	b1dd      	cbz	r5, 8003650 <RI_SetRegCommandParser+0x5a4>
        if ((STC_Modality_t)regdata8 == STC_SPEED_MODE)
 8003618:	2d01      	cmp	r5, #1
 800361a:	d07f      	beq.n	800371c <RI_SetRegCommandParser+0x670>
 800361c:	f1aa 0a03 	sub.w	sl, sl, #3
 8003620:	fa0f f08a 	sxth.w	r0, sl
 8003624:	1cf7      	adds	r7, r6, #3
  uint8_t retVal = MCP_CMD_OK;
 8003626:	2500      	movs	r5, #0
 8003628:	e587      	b.n	800313a <RI_SetRegCommandParser+0x8e>
      MCI_ExecSpeedRamp(pMCI,(int16_t)((regdata32*SPEED_UNIT)/_RPM),0);
 800362a:	f8d6 2002 	ldr.w	r2, [r6, #2]
 800362e:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <RI_SetRegCommandParser+0x608>)
 8003630:	fb83 3102 	smull	r3, r1, r3, r2
 8003634:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8003638:	4620      	mov	r0, r4
 800363a:	b209      	sxth	r1, r1
 800363c:	2200      	movs	r2, #0
 800363e:	f1aa 0a06 	sub.w	sl, sl, #6
 8003642:	f7fe fce1 	bl	8002008 <MCI_ExecSpeedRamp>
      break;
 8003646:	1db7      	adds	r7, r6, #6
 8003648:	fa0f f08a 	sxth.w	r0, sl
  uint8_t retVal = MCP_CMD_OK;
 800364c:	2500      	movs	r5, #0
      break;
 800364e:	e574      	b.n	800313a <RI_SetRegCommandParser+0x8e>
          MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8003650:	4620      	mov	r0, r4
 8003652:	f7fe fde1 	bl	8002218 <MCI_GetTeref>
 8003656:	f1aa 0a03 	sub.w	sl, sl, #3
 800365a:	4601      	mov	r1, r0
 800365c:	462a      	mov	r2, r5
 800365e:	4620      	mov	r0, r4
 8003660:	f7fe fcde 	bl	8002020 <MCI_ExecTorqueRamp>
        if ((STC_Modality_t)regdata8 == STC_SPEED_MODE)
 8003664:	1cf7      	adds	r7, r6, #3
 8003666:	fa0f f08a 	sxth.w	r0, sl
 800366a:	e566      	b.n	800313a <RI_SetRegCommandParser+0x8e>
            MCI_ExecSpeedRamp(pMCI,(int16_t)((rpm*SPEED_UNIT)/_RPM),duration);
 800366c:	6870      	ldr	r0, [r6, #4]
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <RI_SetRegCommandParser+0x608>)
 8003670:	8932      	ldrh	r2, [r6, #8]
 8003672:	fb83 3100 	smull	r3, r1, r3, r0
 8003676:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
 800367a:	b209      	sxth	r1, r1
 800367c:	4620      	mov	r0, r4
 800367e:	f7fe fcc3 	bl	8002008 <MCI_ExecSpeedRamp>
          break;
 8003682:	ebab 000a 	sub.w	r0, fp, sl
 8003686:	4457      	add	r7, sl
 8003688:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 800368a:	2500      	movs	r5, #0
          break;
 800368c:	e555      	b.n	800313a <RI_SetRegCommandParser+0x8e>
            currComp.q = *((uint16_t *) rawData);
 800368e:	6871      	ldr	r1, [r6, #4]
 8003690:	9105      	str	r1, [sp, #20]
            MCI_SetCurrentReferences(pMCI,currComp);
 8003692:	4620      	mov	r0, r4
 8003694:	f7fe fcce 	bl	8002034 <MCI_SetCurrentReferences>
          break;
 8003698:	ebab 000a 	sub.w	r0, fp, sl
 800369c:	b200      	sxth	r0, r0
 800369e:	4457      	add	r7, sl
  uint8_t retVal = MCP_CMD_OK;
 80036a0:	2500      	movs	r5, #0
          break;
 80036a2:	e54a      	b.n	800313a <RI_SetRegCommandParser+0x8e>
 80036a4:	20000568 	.word	0x20000568
 80036a8:	2000064c 	.word	0x2000064c
 80036ac:	2000056c 	.word	0x2000056c
 80036b0:	20000588 	.word	0x20000588
 80036b4:	2aaaaaab 	.word	0x2aaaaaab
            if ((rawSize % 8) || (nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0 )
 80036b8:	f01e 0407 	ands.w	r4, lr, #7
 80036bc:	d128      	bne.n	8003710 <RI_SetRegCommandParser+0x664>
            uint8_t nbrOfPhase = rawSize/ 8;
 80036be:	f3ce 03c7 	ubfx	r3, lr, #3, #8
            if ((rawSize % 8) || (nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0 )
 80036c2:	2b05      	cmp	r3, #5
 80036c4:	d824      	bhi.n	8003710 <RI_SetRegCommandParser+0x664>
              for (i = 0; i <nbrOfPhase; i++){
 80036c6:	b30b      	cbz	r3, 800370c <RI_SetRegCommandParser+0x660>
 80036c8:	4621      	mov	r1, r4
 80036ca:	9703      	str	r7, [sp, #12]
 80036cc:	4627      	mov	r7, r4
 80036ce:	461c      	mov	r4, r3
                revUpPhase.hFinalMecSpeedUnit = (uint16_t) (rpm * SPEED_UNIT ) / _RPM ;
 80036d0:	6872      	ldr	r2, [r6, #4]
                RUC_SetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 80036d2:	4b43      	ldr	r3, [pc, #268]	; (80037e0 <RI_SetRegCommandParser+0x734>)
                revUpPhase.hFinalMecSpeedUnit = (uint16_t) (rpm * SPEED_UNIT ) / _RPM ;
 80036d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                RUC_SetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 80036d8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
                revUpPhase.hFinalMecSpeedUnit = (uint16_t) (rpm * SPEED_UNIT ) / _RPM ;
 80036dc:	4b41      	ldr	r3, [pc, #260]	; (80037e4 <RI_SetRegCommandParser+0x738>)
 80036de:	0052      	lsls	r2, r2, #1
 80036e0:	b292      	uxth	r2, r2
 80036e2:	fba3 3202 	umull	r3, r2, r3, r2
 80036e6:	0952      	lsrs	r2, r2, #5
 80036e8:	f8ad 2016 	strh.w	r2, [sp, #22]
                revUpPhase.hFinalTorque = *((uint16_t *) &rawData[4+i*8]);
 80036ec:	8932      	ldrh	r2, [r6, #8]
 80036ee:	f8ad 2018 	strh.w	r2, [sp, #24]
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6+i*8]);
 80036f2:	8972      	ldrh	r2, [r6, #10]
 80036f4:	f8ad 2014 	strh.w	r2, [sp, #20]
                RUC_SetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 80036f8:	3701      	adds	r7, #1
 80036fa:	aa05      	add	r2, sp, #20
 80036fc:	f004 fc34 	bl	8007f68 <RUC_SetPhase>
              for (i = 0; i <nbrOfPhase; i++){
 8003700:	b2f9      	uxtb	r1, r7
 8003702:	428c      	cmp	r4, r1
 8003704:	f106 0608 	add.w	r6, r6, #8
 8003708:	d8e2      	bhi.n	80036d0 <RI_SetRegCommandParser+0x624>
 800370a:	9f03      	ldr	r7, [sp, #12]
  uint8_t retVal = MCP_CMD_OK;
 800370c:	2500      	movs	r5, #0
 800370e:	e000      	b.n	8003712 <RI_SetRegCommandParser+0x666>
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8003710:	250a      	movs	r5, #10
          break;
 8003712:	ebab 000a 	sub.w	r0, fp, sl
 8003716:	b200      	sxth	r0, r0
 8003718:	4457      	add	r7, sl
 800371a:	e50e      	b.n	800313a <RI_SetRegCommandParser+0x8e>
          MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 800371c:	4620      	mov	r0, r4
 800371e:	f7fe fd23 	bl	8002168 <MCI_GetMecSpeedRefUnit>
 8003722:	2200      	movs	r2, #0
 8003724:	4601      	mov	r1, r0
 8003726:	4620      	mov	r0, r4
 8003728:	f7fe fc6e 	bl	8002008 <MCI_ExecSpeedRamp>
 800372c:	f1aa 0003 	sub.w	r0, sl, #3
 8003730:	1cf7      	adds	r7, r6, #3
 8003732:	b200      	sxth	r0, r0
  uint8_t retVal = MCP_CMD_OK;
 8003734:	2500      	movs	r5, #0
 8003736:	e500      	b.n	800313a <RI_SetRegCommandParser+0x8e>
  while ((*srcString != 0) && (*size < maxSize) )
 8003738:	2101      	movs	r1, #1
  *size= 1 ; /* /0 is the min String size */
 800373a:	460a      	mov	r2, r1
  while ((*srcString != 0) && (*size < maxSize) )
 800373c:	463c      	mov	r4, r7
 800373e:	e563      	b.n	8003208 <RI_SetRegCommandParser+0x15c>
 8003740:	f1aa 0003 	sub.w	r0, sl, #3
 8003744:	b200      	sxth	r0, r0
 8003746:	1cf7      	adds	r7, r6, #3
      retVal = MCP_ERROR_RO_REG;
 8003748:	2504      	movs	r5, #4
 800374a:	e4f6      	b.n	800313a <RI_SetRegCommandParser+0x8e>
      PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 800374c:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <RI_SetRegCommandParser+0x73c>)
 800374e:	4639      	mov	r1, r7
 8003750:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8003754:	e68e      	b.n	8003474 <RI_SetRegCommandParser+0x3c8>
      PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8003756:	4a25      	ldr	r2, [pc, #148]	; (80037ec <RI_SetRegCommandParser+0x740>)
 8003758:	4639      	mov	r1, r7
 800375a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800375e:	e60f      	b.n	8003380 <RI_SetRegCommandParser+0x2d4>
        STO_PLL_GetObserverGains(stoPLLSensor[motorID],&hC1,&hC2);
 8003760:	4c23      	ldr	r4, [pc, #140]	; (80037f0 <RI_SetRegCommandParser+0x744>)
 8003762:	aa05      	add	r2, sp, #20
 8003764:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8003768:	f10d 0112 	add.w	r1, sp, #18
 800376c:	f004 feb0 	bl	80084d0 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains(stoPLLSensor[motorID],regdata16,hC2);
 8003770:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8003774:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8003778:	b239      	sxth	r1, r7
 800377a:	e5df      	b.n	800333c <RI_SetRegCommandParser+0x290>
        PID_SetKI (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 800377c:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <RI_SetRegCommandParser+0x744>)
 800377e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8003782:	b239      	sxth	r1, r7
 8003784:	3034      	adds	r0, #52	; 0x34
 8003786:	e60b      	b.n	80033a0 <RI_SetRegCommandParser+0x2f4>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8003788:	4a1a      	ldr	r2, [pc, #104]	; (80037f4 <RI_SetRegCommandParser+0x748>)
 800378a:	4639      	mov	r1, r7
 800378c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8003790:	e670      	b.n	8003474 <RI_SetRegCommandParser+0x3c8>
      PID_SetKI(pPIDSpeed[motorID], regdata16);
 8003792:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <RI_SetRegCommandParser+0x748>)
 8003794:	b239      	sxth	r1, r7
 8003796:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800379a:	e601      	b.n	80033a0 <RI_SetRegCommandParser+0x2f4>
      PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 800379c:	4a13      	ldr	r2, [pc, #76]	; (80037ec <RI_SetRegCommandParser+0x740>)
 800379e:	e631      	b.n	8003404 <RI_SetRegCommandParser+0x358>
      PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 80037a0:	4a13      	ldr	r2, [pc, #76]	; (80037f0 <RI_SetRegCommandParser+0x744>)
 80037a2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80037a6:	4639      	mov	r1, r7
 80037a8:	3034      	adds	r0, #52	; 0x34
 80037aa:	e663      	b.n	8003474 <RI_SetRegCommandParser+0x3c8>
      PID_SetKD(pPIDIq[motorID], regdata16);
 80037ac:	4a0e      	ldr	r2, [pc, #56]	; (80037e8 <RI_SetRegCommandParser+0x73c>)
 80037ae:	e611      	b.n	80033d4 <RI_SetRegCommandParser+0x328>
      PID_SetKP(pPIDIq[motorID], regdata16);
 80037b0:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <RI_SetRegCommandParser+0x73c>)
 80037b2:	b239      	sxth	r1, r7
 80037b4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80037b8:	e593      	b.n	80032e2 <RI_SetRegCommandParser+0x236>
      PID_SetKI(pPIDId[motorID], regdata16);
 80037ba:	4a0c      	ldr	r2, [pc, #48]	; (80037ec <RI_SetRegCommandParser+0x740>)
 80037bc:	b239      	sxth	r1, r7
 80037be:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80037c2:	e5ed      	b.n	80033a0 <RI_SetRegCommandParser+0x2f4>
        currComp = MCI_GetIqdref(pMCI);
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7fe fcfd 	bl	80021c4 <MCI_GetIqdref>
 80037ca:	9005      	str	r0, [sp, #20]
        currComp.q = (int16_t)regdata16;
 80037cc:	f8ad 7014 	strh.w	r7, [sp, #20]
        MCI_SetCurrentReferences(pMCI,currComp);
 80037d0:	e691      	b.n	80034f6 <RI_SetRegCommandParser+0x44a>
 80037d2:	9d02      	ldr	r5, [sp, #8]
  if (retVal == MCP_CMD_OK)
 80037d4:	f8dd 9000 	ldr.w	r9, [sp]
 80037d8:	2d00      	cmp	r5, #0
 80037da:	f43f acf7 	beq.w	80031cc <RI_SetRegCommandParser+0x120>
 80037de:	e56c      	b.n	80032ba <RI_SetRegCommandParser+0x20e>
 80037e0:	20000648 	.word	0x20000648
 80037e4:	88888889 	.word	0x88888889
 80037e8:	2000056c 	.word	0x2000056c
 80037ec:	20000568 	.word	0x20000568
 80037f0:	20000650 	.word	0x20000650
 80037f4:	2000064c 	.word	0x2000064c

080037f8 <RI_GetRegCommandParser>:
{
 80037f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t rxLength = pHandle->rxLength;
 80037fc:	f8b0 a00c 	ldrh.w	sl, [r0, #12]
  uint8_t * rxData = pHandle->rxBuffer;
 8003800:	6846      	ldr	r6, [r0, #4]
  uint8_t * txData = pHandle->txBuffer;
 8003802:	6887      	ldr	r7, [r0, #8]
{
 8003804:	b099      	sub	sp, #100	; 0x64
  pHandle->txLength = 0;
 8003806:	2300      	movs	r3, #0
  uint8_t * rxData = pHandle->rxBuffer;
 8003808:	9600      	str	r6, [sp, #0]
  pHandle->txLength = 0;
 800380a:	81c3      	strh	r3, [r0, #14]
  while (rxLength > 0)
 800380c:	f1ba 0f00 	cmp.w	sl, #0
 8003810:	f000 8355 	beq.w	8003ebe <RI_GetRegCommandParser+0x6c6>
 8003814:	f8df 93f0 	ldr.w	r9, [pc, #1008]	; 8003c08 <RI_GetRegCommandParser+0x410>
 8003818:	4680      	mov	r8, r0
 800381a:	b20d      	sxth	r5, r1
     retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 800381c:	f836 3b02 	ldrh.w	r3, [r6], #2
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8003820:	f003 0407 	and.w	r4, r3, #7
 8003824:	3c01      	subs	r4, #1
  MCI_Handle_t * pMCI = &Mci[motorID];
 8003826:	b2e1      	uxtb	r1, r4
 8003828:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800382c:	ebc1 0bc1 	rsb	fp, r1, r1, lsl #3
  uint16_t regID = dataID & REG_MASK;
 8003830:	f023 0307 	bic.w	r3, r3, #7
 8003834:	3a08      	subs	r2, #8
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 8003836:	460c      	mov	r4, r1
  MCI_Handle_t * pMCI = &Mci[motorID];
 8003838:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
  uint16_t regID = dataID & REG_MASK;
 800383c:	b29b      	uxth	r3, r3
  switch (typeID)
 800383e:	2a20      	cmp	r2, #32
 8003840:	d812      	bhi.n	8003868 <RI_GetRegCommandParser+0x70>
 8003842:	e8df f002 	tbb	[pc, r2]
 8003846:	118d      	.short	0x118d
 8003848:	11111111 	.word	0x11111111
 800384c:	11641111 	.word	0x11641111
 8003850:	11111111 	.word	0x11111111
 8003854:	119a1111 	.word	0x119a1111
 8003858:	11111111 	.word	0x11111111
 800385c:	11301111 	.word	0x11301111
 8003860:	11111111 	.word	0x11111111
 8003864:	1111      	.short	0x1111
 8003866:	15          	.byte	0x15
 8003867:	00          	.byte	0x00
  MCI_Handle_t * pMCI = &Mci[motorID];
 8003868:	2007      	movs	r0, #7
}
 800386a:	b019      	add	sp, #100	; 0x64
 800386c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      uint8_t * rawData = data+2;
 8003870:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8003874:	f107 0202 	add.w	r2, r7, #2
      switch (regID)
 8003878:	f000 8290 	beq.w	8003d9c <RI_GetRegCommandParser+0x5a4>
 800387c:	f200 80d2 	bhi.w	8003a24 <RI_GetRegCommandParser+0x22c>
 8003880:	2ba8      	cmp	r3, #168	; 0xa8
 8003882:	f000 82d4 	beq.w	8003e2e <RI_GetRegCommandParser+0x636>
 8003886:	f200 80ba 	bhi.w	80039fe <RI_GetRegCommandParser+0x206>
 800388a:	2b28      	cmp	r3, #40	; 0x28
 800388c:	f000 8297 	beq.w	8003dbe <RI_GetRegCommandParser+0x5c6>
 8003890:	2b68      	cmp	r3, #104	; 0x68
 8003892:	d170      	bne.n	8003976 <RI_GetRegCommandParser+0x17e>
        *rawSize = sizeof(MotorConfig_reg_t);
 8003894:	233c      	movs	r3, #60	; 0x3c
        if ((*rawSize) +2  > freeSpace)
 8003896:	2d3d      	cmp	r5, #61	; 0x3d
        *rawSize = sizeof(MotorConfig_reg_t);
 8003898:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 800389a:	f300 82f3 	bgt.w	8003e84 <RI_GetRegCommandParser+0x68c>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800389e:	2008      	movs	r0, #8
}
 80038a0:	b019      	add	sp, #100	; 0x64
 80038a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (regID)
 80038a6:	2ba0      	cmp	r3, #160	; 0xa0
 80038a8:	f000 822d 	beq.w	8003d06 <RI_GetRegCommandParser+0x50e>
 80038ac:	f200 8089 	bhi.w	80039c2 <RI_GetRegCommandParser+0x1ca>
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	f000 823f 	beq.w	8003d34 <RI_GetRegCommandParser+0x53c>
 80038b6:	2b60      	cmp	r3, #96	; 0x60
 80038b8:	d15d      	bne.n	8003976 <RI_GetRegCommandParser+0x17e>
  while ((*srcString != 0) && (*size < maxSize) )
 80038ba:	4cce      	ldr	r4, [pc, #824]	; (8003bf4 <RI_GetRegCommandParser+0x3fc>)
 80038bc:	7821      	ldrb	r1, [r4, #0]
 80038be:	2900      	cmp	r1, #0
 80038c0:	f000 8268 	beq.w	8003d94 <RI_GetRegCommandParser+0x59c>
 80038c4:	2d01      	cmp	r5, #1
 80038c6:	f340 821c 	ble.w	8003d02 <RI_GetRegCommandParser+0x50a>
 80038ca:	4638      	mov	r0, r7
 80038cc:	f1c7 0201 	rsb	r2, r7, #1
 80038d0:	e002      	b.n	80038d8 <RI_GetRegCommandParser+0xe0>
 80038d2:	42ab      	cmp	r3, r5
 80038d4:	f280 8215 	bge.w	8003d02 <RI_GetRegCommandParser+0x50a>
    *destString = *srcString ;
 80038d8:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*srcString != 0) && (*size < maxSize) )
 80038dc:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80038e0:	1883      	adds	r3, r0, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2900      	cmp	r1, #0
 80038e6:	d1f4      	bne.n	80038d2 <RI_GetRegCommandParser+0xda>
 80038e8:	461c      	mov	r4, r3
    *destString = 0;
 80038ea:	2200      	movs	r2, #0
 80038ec:	7002      	strb	r2, [r0, #0]
  while (rxLength > 0)
 80038ee:	9a00      	ldr	r2, [sp, #0]
       pHandle->txLength += size;
 80038f0:	f8b8 100e 	ldrh.w	r1, [r8, #14]
  while (rxLength > 0)
 80038f4:	4452      	add	r2, sl
       freeSpaceS16 = freeSpaceS16-size;
 80038f6:	1aed      	subs	r5, r5, r3
       pHandle->txLength += size;
 80038f8:	4419      	add	r1, r3
  while (rxLength > 0)
 80038fa:	b292      	uxth	r2, r2
 80038fc:	b2b3      	uxth	r3, r6
 80038fe:	4293      	cmp	r3, r2
       freeSpaceS16 = freeSpaceS16-size;
 8003900:	b22d      	sxth	r5, r5
       txData = txData+size;
 8003902:	4427      	add	r7, r4
       pHandle->txLength += size;
 8003904:	f8a8 100e 	strh.w	r1, [r8, #14]
  while (rxLength > 0)
 8003908:	d188      	bne.n	800381c <RI_GetRegCommandParser+0x24>
     retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 800390a:	2000      	movs	r0, #0
 800390c:	e7ad      	b.n	800386a <RI_GetRegCommandParser+0x72>
      if (freeSpace >= 2 )
 800390e:	2d01      	cmp	r5, #1
 8003910:	ddc5      	ble.n	800389e <RI_GetRegCommandParser+0xa6>
        switch (regID)
 8003912:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8003916:	f000 83aa 	beq.w	800406e <RI_GetRegCommandParser+0x876>
 800391a:	f200 80f9 	bhi.w	8003b10 <RI_GetRegCommandParser+0x318>
 800391e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003922:	f000 8321 	beq.w	8003f68 <RI_GetRegCommandParser+0x770>
 8003926:	f240 80d2 	bls.w	8003ace <RI_GetRegCommandParser+0x2d6>
 800392a:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800392e:	f000 82f8 	beq.w	8003f22 <RI_GetRegCommandParser+0x72a>
 8003932:	f240 80b6 	bls.w	8003aa2 <RI_GetRegCommandParser+0x2aa>
 8003936:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 800393a:	f000 82ea 	beq.w	8003f12 <RI_GetRegCommandParser+0x71a>
 800393e:	f240 809e 	bls.w	8003a7e <RI_GetRegCommandParser+0x286>
 8003942:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8003946:	f000 82da 	beq.w	8003efe <RI_GetRegCommandParser+0x706>
 800394a:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 800394e:	d112      	bne.n	8003976 <RI_GetRegCommandParser+0x17e>
          *regdata16 = MCI_GetIqdref(pMCI).q;
 8003950:	4658      	mov	r0, fp
 8003952:	f7fe fc37 	bl	80021c4 <MCI_GetIqdref>
         break;
 8003956:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIqdref(pMCI).q;
 8003958:	900e      	str	r0, [sp, #56]	; 0x38
        *size = 2;
 800395a:	4623      	mov	r3, r4
          *regdata16 = MCI_GetIqdref(pMCI).q;
 800395c:	8038      	strh	r0, [r7, #0]
         break;
 800395e:	e7c6      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
      if (freeSpace > 0 )
 8003960:	2d00      	cmp	r5, #0
 8003962:	dd9c      	ble.n	800389e <RI_GetRegCommandParser+0xa6>
        switch (regID)
 8003964:	2b88      	cmp	r3, #136	; 0x88
 8003966:	f000 820e 	beq.w	8003d86 <RI_GetRegCommandParser+0x58e>
 800396a:	2bc8      	cmp	r3, #200	; 0xc8
 800396c:	f000 8201 	beq.w	8003d72 <RI_GetRegCommandParser+0x57a>
 8003970:	2b48      	cmp	r3, #72	; 0x48
 8003972:	f000 81f3 	beq.w	8003d5c <RI_GetRegCommandParser+0x564>
 8003976:	2005      	movs	r0, #5
  return retVal;
 8003978:	e777      	b.n	800386a <RI_GetRegCommandParser+0x72>
      if ( freeSpace >= 4)
 800397a:	2d03      	cmp	r5, #3
 800397c:	dd8f      	ble.n	800389e <RI_GetRegCommandParser+0xa6>
        switch (regID)
 800397e:	2b98      	cmp	r3, #152	; 0x98
 8003980:	f000 8268 	beq.w	8003e54 <RI_GetRegCommandParser+0x65c>
 8003984:	d90e      	bls.n	80039a4 <RI_GetRegCommandParser+0x1ac>
 8003986:	2bd8      	cmp	r3, #216	; 0xd8
 8003988:	f000 8268 	beq.w	8003e5c <RI_GetRegCommandParser+0x664>
 800398c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8003990:	d1f1      	bne.n	8003976 <RI_GetRegCommandParser+0x17e>
          *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 8003992:	4b99      	ldr	r3, [pc, #612]	; (8003bf8 <RI_GetRegCommandParser+0x400>)
 8003994:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003998:	f004 fdb4 	bl	8008504 <STO_PLL_GetObservedBemfLevel>
 800399c:	2404      	movs	r4, #4
 800399e:	6038      	str	r0, [r7, #0]
        *size = 4;
 80039a0:	4623      	mov	r3, r4
 80039a2:	e7a4      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 80039a4:	2b18      	cmp	r3, #24
 80039a6:	f000 8262 	beq.w	8003e6e <RI_GetRegCommandParser+0x676>
 80039aa:	2b58      	cmp	r3, #88	; 0x58
 80039ac:	d1e3      	bne.n	8003976 <RI_GetRegCommandParser+0x17e>
          *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80039ae:	4658      	mov	r0, fp
 80039b0:	f7fe fbd2 	bl	8002158 <MCI_GetAvrgMecSpeedUnit>
          *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 80039b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80039b8:	0040      	lsls	r0, r0, #1
 80039ba:	2404      	movs	r4, #4
 80039bc:	6038      	str	r0, [r7, #0]
        *size = 4;
 80039be:	4623      	mov	r3, r4
 80039c0:	e795      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 80039c2:	2be0      	cmp	r3, #224	; 0xe0
 80039c4:	d1d7      	bne.n	8003976 <RI_GetRegCommandParser+0x17e>
        retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80039c6:	4b8d      	ldr	r3, [pc, #564]	; (8003bfc <RI_GetRegCommandParser+0x404>)
 80039c8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 80039cc:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80039d0:	2900      	cmp	r1, #0
 80039d2:	f000 81df 	beq.w	8003d94 <RI_GetRegCommandParser+0x59c>
 80039d6:	2d01      	cmp	r5, #1
 80039d8:	f340 8193 	ble.w	8003d02 <RI_GetRegCommandParser+0x50a>
 80039dc:	3424      	adds	r4, #36	; 0x24
 80039de:	4638      	mov	r0, r7
 80039e0:	f1c7 0201 	rsb	r2, r7, #1
 80039e4:	e002      	b.n	80039ec <RI_GetRegCommandParser+0x1f4>
 80039e6:	42ab      	cmp	r3, r5
 80039e8:	f280 818b 	bge.w	8003d02 <RI_GetRegCommandParser+0x50a>
    *destString = *srcString ;
 80039ec:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*srcString != 0) && (*size < maxSize) )
 80039f0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80039f4:	1883      	adds	r3, r0, r2
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2900      	cmp	r1, #0
 80039fa:	d1f4      	bne.n	80039e6 <RI_GetRegCommandParser+0x1ee>
 80039fc:	e774      	b.n	80038e8 <RI_GetRegCommandParser+0xf0>
 80039fe:	2be8      	cmp	r3, #232	; 0xe8
 8003a00:	d1b9      	bne.n	8003976 <RI_GetRegCommandParser+0x17e>
        *rawSize = sizeof(FOCFwConfig_reg_t);
 8003a02:	230c      	movs	r3, #12
        if ((*rawSize) +2  > freeSpace)
 8003a04:	2d0d      	cmp	r5, #13
        *rawSize = sizeof(FOCFwConfig_reg_t);
 8003a06:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 8003a08:	f77f af49 	ble.w	800389e <RI_GetRegCommandParser+0xa6>
          memcpy(rawData, FOCConfig_reg[motorID], sizeof(FOCFwConfig_reg_t) );
 8003a0c:	4b7c      	ldr	r3, [pc, #496]	; (8003c00 <RI_GetRegCommandParser+0x408>)
 8003a0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a12:	240e      	movs	r4, #14
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	6093      	str	r3, [r2, #8]
 8003a1c:	6010      	str	r0, [r2, #0]
 8003a1e:	6051      	str	r1, [r2, #4]
      *size = (*rawSize)+2;
 8003a20:	4623      	mov	r3, r4
 8003a22:	e764      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003a24:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8003a28:	f000 81d8 	beq.w	8003ddc <RI_GetRegCommandParser+0x5e4>
 8003a2c:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8003a30:	d113      	bne.n	8003a5a <RI_GetRegCommandParser+0x262>
        *rawSize = 4;
 8003a32:	2304      	movs	r3, #4
 8003a34:	803b      	strh	r3, [r7, #0]
        *iqref = MCI_GetIqdref(pMCI).q;
 8003a36:	4658      	mov	r0, fp
 8003a38:	f7fe fbc4 	bl	80021c4 <MCI_GetIqdref>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	8078      	strh	r0, [r7, #2]
        *idref = MCI_GetIqdref(pMCI).d;
 8003a40:	4658      	mov	r0, fp
        *iqref = MCI_GetIqdref(pMCI).q;
 8003a42:	9304      	str	r3, [sp, #16]
        *idref = MCI_GetIqdref(pMCI).d;
 8003a44:	f7fe fbbe 	bl	80021c4 <MCI_GetIqdref>
      *size = (*rawSize)+2;
 8003a48:	883b      	ldrh	r3, [r7, #0]
        *idref = MCI_GetIqdref(pMCI).d;
 8003a4a:	9003      	str	r0, [sp, #12]
      *size = (*rawSize)+2;
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	b29b      	uxth	r3, r3
        *idref = MCI_GetIqdref(pMCI).d;
 8003a50:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8003a54:	80ba      	strh	r2, [r7, #4]
     if (retVal == MCP_CMD_OK )
 8003a56:	461c      	mov	r4, r3
 8003a58:	e749      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003a5a:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8003a5e:	d18a      	bne.n	8003976 <RI_GetRegCommandParser+0x17e>
          *rawSize = 4;
 8003a60:	2304      	movs	r3, #4
 8003a62:	803b      	strh	r3, [r7, #0]
          *torque = MCI_GetLastRampFinalTorque(pMCI);
 8003a64:	4658      	mov	r0, fp
 8003a66:	f7fe fb6d 	bl	8002144 <MCI_GetLastRampFinalTorque>
 8003a6a:	8078      	strh	r0, [r7, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8003a6c:	4658      	mov	r0, fp
 8003a6e:	f7fe fb6d 	bl	800214c <MCI_GetLastRampFinalDuration>
      *size = (*rawSize)+2;
 8003a72:	883b      	ldrh	r3, [r7, #0]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8003a74:	80b8      	strh	r0, [r7, #4]
      *size = (*rawSize)+2;
 8003a76:	3302      	adds	r3, #2
 8003a78:	b29b      	uxth	r3, r3
     if (retVal == MCP_CMD_OK )
 8003a7a:	461c      	mov	r4, r3
 8003a7c:	e737      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003a7e:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8003a82:	f000 82a7 	beq.w	8003fd4 <RI_GetRegCommandParser+0x7dc>
 8003a86:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003a8a:	f47f af74 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 8003a8e:	4658      	mov	r0, fp
 8003a90:	f7fe fb7c 	bl	800218c <MCI_GetIalphabeta>
         break;
 8003a94:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).beta;
 8003a96:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003a9a:	9011      	str	r0, [sp, #68]	; 0x44
 8003a9c:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8003a9e:	4623      	mov	r3, r4
         break;
 8003aa0:	e725      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003aa2:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8003aa6:	f000 82b4 	beq.w	8004012 <RI_GetRegCommandParser+0x81a>
 8003aaa:	f240 80d4 	bls.w	8003c56 <RI_GetRegCommandParser+0x45e>
 8003aae:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8003ab2:	f000 827c 	beq.w	8003fae <RI_GetRegCommandParser+0x7b6>
 8003ab6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003aba:	f47f af5c 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
          *regdata16 = MCI_GetIab(pMCI).a;
 8003abe:	4658      	mov	r0, fp
 8003ac0:	f7fe fb56 	bl	8002170 <MCI_GetIab>
         break;
 8003ac4:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIab(pMCI).a;
 8003ac6:	9014      	str	r0, [sp, #80]	; 0x50
        *size = 2;
 8003ac8:	4623      	mov	r3, r4
          *regdata16 = MCI_GetIab(pMCI).a;
 8003aca:	8038      	strh	r0, [r7, #0]
         break;
 8003acc:	e70f      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003ace:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8003ad2:	f000 826a 	beq.w	8003faa <RI_GetRegCommandParser+0x7b2>
 8003ad6:	f240 80eb 	bls.w	8003cb0 <RI_GetRegCommandParser+0x4b8>
 8003ada:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003ade:	f000 825b 	beq.w	8003f98 <RI_GetRegCommandParser+0x7a0>
 8003ae2:	d976      	bls.n	8003bd2 <RI_GetRegCommandParser+0x3da>
 8003ae4:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8003ae8:	f000 8248 	beq.w	8003f7c <RI_GetRegCommandParser+0x784>
 8003aec:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8003af0:	f47f af41 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID],&hC1,&hC2);
 8003af4:	4b40      	ldr	r3, [pc, #256]	; (8003bf8 <RI_GetRegCommandParser+0x400>)
 8003af6:	aa15      	add	r2, sp, #84	; 0x54
 8003af8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003afc:	f10d 010a 	add.w	r1, sp, #10
 8003b00:	f004 fce6 	bl	80084d0 <STO_PLL_GetObserverGains>
            *regdata16 = hC2;
 8003b04:	2402      	movs	r4, #2
 8003b06:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 8003b0a:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8003b0c:	4623      	mov	r3, r4
 8003b0e:	e6ee      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003b10:	f241 4250 	movw	r2, #5200	; 0x1450
 8003b14:	4293      	cmp	r3, r2
 8003b16:	f000 81d4 	beq.w	8003ec2 <RI_GetRegCommandParser+0x6ca>
 8003b1a:	d91b      	bls.n	8003b54 <RI_GetRegCommandParser+0x35c>
 8003b1c:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8003b20:	4293      	cmp	r3, r2
 8003b22:	f000 826b 	beq.w	8003ffc <RI_GetRegCommandParser+0x804>
 8003b26:	f240 8084 	bls.w	8003c32 <RI_GetRegCommandParser+0x43a>
 8003b2a:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	f000 825a 	beq.w	8003fe8 <RI_GetRegCommandParser+0x7f0>
 8003b34:	d96a      	bls.n	8003c0c <RI_GetRegCommandParser+0x414>
 8003b36:	f641 1210 	movw	r2, #6416	; 0x1910
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	f47f af1b 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8003b40:	4b2d      	ldr	r3, [pc, #180]	; (8003bf8 <RI_GetRegCommandParser+0x400>)
 8003b42:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003b46:	3034      	adds	r0, #52	; 0x34
 8003b48:	f002 ffd6 	bl	8006af8 <PID_GetKPDivisorPOW2>
 8003b4c:	2402      	movs	r4, #2
 8003b4e:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003b50:	4623      	mov	r3, r4
 8003b52:	e6cc      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003b54:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8003b58:	f000 826e 	beq.w	8004038 <RI_GetRegCommandParser+0x840>
 8003b5c:	d922      	bls.n	8003ba4 <RI_GetRegCommandParser+0x3ac>
 8003b5e:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8003b62:	f000 825f 	beq.w	8004024 <RI_GetRegCommandParser+0x82c>
 8003b66:	d909      	bls.n	8003b7c <RI_GetRegCommandParser+0x384>
 8003b68:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8003b6c:	d003      	beq.n	8003b76 <RI_GetRegCommandParser+0x37e>
 8003b6e:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8003b72:	f040 8081 	bne.w	8003c78 <RI_GetRegCommandParser+0x480>
 8003b76:	2402      	movs	r4, #2
 8003b78:	4623      	mov	r3, r4
 8003b7a:	e6b8      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003b7c:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8003b80:	f000 826b 	beq.w	800405a <RI_GetRegCommandParser+0x862>
 8003b84:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8003b88:	f47f aef5 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
            *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <RI_GetRegCommandParser+0x400>)
 8003b8e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003b92:	f004 fc89 	bl	80084a8 <STO_PLL_GetEstimatedCurrent>
         break;
 8003b96:	2402      	movs	r4, #2
            *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 8003b98:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003b9c:	9007      	str	r0, [sp, #28]
 8003b9e:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8003ba0:	4623      	mov	r3, r4
         break;
 8003ba2:	e6a4      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003ba4:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003ba8:	f000 824f 	beq.w	800404a <RI_GetRegCommandParser+0x852>
 8003bac:	f240 808f 	bls.w	8003cce <RI_GetRegCommandParser+0x4d6>
 8003bb0:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003bb4:	f000 8204 	beq.w	8003fc0 <RI_GetRegCommandParser+0x7c8>
 8003bb8:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8003bbc:	f47f aedb 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
            *regdata16 = SPD_GetElAngle( (SpeednPosFdbk_Handle_t*) stoPLLSensor[motorID]);
 8003bc0:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <RI_GetRegCommandParser+0x400>)
 8003bc2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003bc6:	f003 fe47 	bl	8007858 <SPD_GetElAngle>
         break;
 8003bca:	2402      	movs	r4, #2
            *regdata16 = SPD_GetElAngle( (SpeednPosFdbk_Handle_t*) stoPLLSensor[motorID]);
 8003bcc:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003bce:	4623      	mov	r3, r4
         break;
 8003bd0:	e68d      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003bd2:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8003bd6:	f000 8213 	beq.w	8004000 <RI_GetRegCommandParser+0x808>
 8003bda:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8003bde:	f47f aeca 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <RI_GetRegCommandParser+0x40c>)
 8003be4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003be8:	f002 ff76 	bl	8006ad8 <PID_GetKI>
         break;
 8003bec:	2402      	movs	r4, #2
          *regdata16 = PID_GetKI(pPIDId[motorID]);
 8003bee:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003bf0:	4623      	mov	r3, r4
         break;
 8003bf2:	e67c      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003bf4:	0800b45c 	.word	0x0800b45c
 8003bf8:	20000650 	.word	0x20000650
 8003bfc:	20000580 	.word	0x20000580
 8003c00:	2000057c 	.word	0x2000057c
 8003c04:	20000568 	.word	0x20000568
 8003c08:	200009a0 	.word	0x200009a0
 8003c0c:	f241 6210 	movw	r2, #5648	; 0x1610
 8003c10:	4293      	cmp	r3, r2
 8003c12:	f000 8244 	beq.w	800409e <RI_GetRegCommandParser+0x8a6>
 8003c16:	f241 6250 	movw	r2, #5712	; 0x1650
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	f47f aeab 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8003c20:	4bc5      	ldr	r3, [pc, #788]	; (8003f38 <RI_GetRegCommandParser+0x740>)
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 8003c22:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003c26:	f002 ff95 	bl	8006b54 <PID_GetKDDivisorPOW2>
 8003c2a:	2402      	movs	r4, #2
 8003c2c:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003c2e:	4623      	mov	r3, r4
 8003c30:	e65d      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003c32:	f241 5210 	movw	r2, #5392	; 0x1510
 8003c36:	4293      	cmp	r3, r2
 8003c38:	f000 815f 	beq.w	8003efa <RI_GetRegCommandParser+0x702>
 8003c3c:	d92c      	bls.n	8003c98 <RI_GetRegCommandParser+0x4a0>
 8003c3e:	f241 5250 	movw	r2, #5456	; 0x1550
 8003c42:	4293      	cmp	r3, r2
 8003c44:	f000 8150 	beq.w	8003ee8 <RI_GetRegCommandParser+0x6f0>
 8003c48:	f241 5290 	movw	r2, #5520	; 0x1590
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	f47f ae92 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 8003c52:	4bba      	ldr	r3, [pc, #744]	; (8003f3c <RI_GetRegCommandParser+0x744>)
 8003c54:	e7e5      	b.n	8003c22 <RI_GetRegCommandParser+0x42a>
 8003c56:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8003c5a:	f000 813b 	beq.w	8003ed4 <RI_GetRegCommandParser+0x6dc>
 8003c5e:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8003c62:	f47f ae88 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8003c66:	4bb6      	ldr	r3, [pc, #728]	; (8003f40 <RI_GetRegCommandParser+0x748>)
 8003c68:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003c6c:	f002 fc2a 	bl	80064c4 <VBS_GetAvBusVoltage_V>
         break;
 8003c70:	2402      	movs	r4, #2
         *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8003c72:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003c74:	4623      	mov	r3, r4
         break;
 8003c76:	e63a      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003c78:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8003c7c:	f47f ae7b 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
            *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 8003c80:	4bb0      	ldr	r3, [pc, #704]	; (8003f44 <RI_GetRegCommandParser+0x74c>)
 8003c82:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003c86:	f004 fc03 	bl	8008490 <STO_PLL_GetEstimatedBemf>
          break;
 8003c8a:	2402      	movs	r4, #2
            *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 8003c8c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003c90:	9005      	str	r0, [sp, #20]
 8003c92:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8003c94:	4623      	mov	r3, r4
          break;
 8003c96:	e62a      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003c98:	f241 4290 	movw	r2, #5264	; 0x1490
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	f000 81a1 	beq.w	8003fe4 <RI_GetRegCommandParser+0x7ec>
 8003ca2:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	f47f ae65 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8003cac:	4ba6      	ldr	r3, [pc, #664]	; (8003f48 <RI_GetRegCommandParser+0x750>)
 8003cae:	e7b8      	b.n	8003c22 <RI_GetRegCommandParser+0x42a>
 8003cb0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8003cb4:	f000 81f1 	beq.w	800409a <RI_GetRegCommandParser+0x8a2>
 8003cb8:	d91b      	bls.n	8003cf2 <RI_GetRegCommandParser+0x4fa>
 8003cba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003cbe:	f000 81ea 	beq.w	8004096 <RI_GetRegCommandParser+0x89e>
 8003cc2:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8003cc6:	f47f ae56 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
          *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8003cca:	4b9b      	ldr	r3, [pc, #620]	; (8003f38 <RI_GetRegCommandParser+0x740>)
 8003ccc:	e78a      	b.n	8003be4 <RI_GetRegCommandParser+0x3ec>
 8003cce:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8003cd2:	f000 81d8 	beq.w	8004086 <RI_GetRegCommandParser+0x88e>
 8003cd6:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003cda:	f47f ae4c 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
          *regdata16 = MCI_GetVqd(pMCI).d;
 8003cde:	4658      	mov	r0, fp
 8003ce0:	f7fe fa7e 	bl	80021e0 <MCI_GetVqd>
         break;
 8003ce4:	2402      	movs	r4, #2
          *regdata16 = MCI_GetVqd(pMCI).d;
 8003ce6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003cea:	900b      	str	r0, [sp, #44]	; 0x2c
 8003cec:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8003cee:	4623      	mov	r3, r4
         break;
 8003cf0:	e5fd      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003cf2:	2b90      	cmp	r3, #144	; 0x90
 8003cf4:	f000 81c5 	beq.w	8004082 <RI_GetRegCommandParser+0x88a>
 8003cf8:	2bd0      	cmp	r3, #208	; 0xd0
 8003cfa:	f47f ae3c 	bne.w	8003976 <RI_GetRegCommandParser+0x17e>
          *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003cfe:	4b92      	ldr	r3, [pc, #584]	; (8003f48 <RI_GetRegCommandParser+0x750>)
 8003d00:	e770      	b.n	8003be4 <RI_GetRegCommandParser+0x3ec>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003d02:	2006      	movs	r0, #6
 8003d04:	e5b1      	b.n	800386a <RI_GetRegCommandParser+0x72>
        retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 8003d06:	4b91      	ldr	r3, [pc, #580]	; (8003f4c <RI_GetRegCommandParser+0x754>)
 8003d08:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
  while ((*srcString != 0) && (*size < maxSize) )
 8003d0c:	7821      	ldrb	r1, [r4, #0]
 8003d0e:	2900      	cmp	r1, #0
 8003d10:	d040      	beq.n	8003d94 <RI_GetRegCommandParser+0x59c>
 8003d12:	2d01      	cmp	r5, #1
 8003d14:	ddf5      	ble.n	8003d02 <RI_GetRegCommandParser+0x50a>
 8003d16:	4638      	mov	r0, r7
 8003d18:	f1c7 0201 	rsb	r2, r7, #1
 8003d1c:	e001      	b.n	8003d22 <RI_GetRegCommandParser+0x52a>
 8003d1e:	42ab      	cmp	r3, r5
 8003d20:	daef      	bge.n	8003d02 <RI_GetRegCommandParser+0x50a>
    *destString = *srcString ;
 8003d22:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8003d26:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003d2a:	1883      	adds	r3, r0, r2
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2900      	cmp	r1, #0
 8003d30:	d1f5      	bne.n	8003d1e <RI_GetRegCommandParser+0x526>
 8003d32:	e5d9      	b.n	80038e8 <RI_GetRegCommandParser+0xf0>
 8003d34:	4c86      	ldr	r4, [pc, #536]	; (8003f50 <RI_GetRegCommandParser+0x758>)
 8003d36:	7821      	ldrb	r1, [r4, #0]
 8003d38:	b361      	cbz	r1, 8003d94 <RI_GetRegCommandParser+0x59c>
 8003d3a:	2d01      	cmp	r5, #1
 8003d3c:	dde1      	ble.n	8003d02 <RI_GetRegCommandParser+0x50a>
 8003d3e:	4638      	mov	r0, r7
 8003d40:	f1c7 0201 	rsb	r2, r7, #1
 8003d44:	e001      	b.n	8003d4a <RI_GetRegCommandParser+0x552>
 8003d46:	42ab      	cmp	r3, r5
 8003d48:	dadb      	bge.n	8003d02 <RI_GetRegCommandParser+0x50a>
    *destString = *srcString ;
 8003d4a:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*srcString != 0) && (*size < maxSize) )
 8003d4e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003d52:	1883      	adds	r3, r0, r2
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2900      	cmp	r1, #0
 8003d58:	d1f5      	bne.n	8003d46 <RI_GetRegCommandParser+0x54e>
 8003d5a:	e5c5      	b.n	80038e8 <RI_GetRegCommandParser+0xf0>
          *data = STM_GetState(&STM[motorID]);
 8003d5c:	487d      	ldr	r0, [pc, #500]	; (8003f54 <RI_GetRegCommandParser+0x75c>)
 8003d5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003d62:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8003d66:	f003 ff1d 	bl	8007ba4 <STM_GetState>
 8003d6a:	2401      	movs	r4, #1
 8003d6c:	7038      	strb	r0, [r7, #0]
        *size = 1;
 8003d6e:	4623      	mov	r3, r4
 8003d70:	e5bd      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *data = (RevUpControl[motorID] != MC_NULL ) ? RUC_GetNumberOfPhases(RevUpControl[motorID])
 8003d72:	4b79      	ldr	r3, [pc, #484]	; (8003f58 <RI_GetRegCommandParser+0x760>)
 8003d74:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003d78:	b108      	cbz	r0, 8003d7e <RI_GetRegCommandParser+0x586>
 8003d7a:	f004 f905 	bl	8007f88 <RUC_GetNumberOfPhases>
          break;
 8003d7e:	2401      	movs	r4, #1
          *data = (RevUpControl[motorID] != MC_NULL ) ? RUC_GetNumberOfPhases(RevUpControl[motorID])
 8003d80:	7038      	strb	r0, [r7, #0]
        *size = 1;
 8003d82:	4623      	mov	r3, r4
          break;
 8003d84:	e5b3      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *data =  MCI_GetControlMode(pMCI);
 8003d86:	4658      	mov	r0, fp
 8003d88:	f7fe f9b4 	bl	80020f4 <MCI_GetControlMode>
          break;
 8003d8c:	2401      	movs	r4, #1
          *data =  MCI_GetControlMode(pMCI);
 8003d8e:	7038      	strb	r0, [r7, #0]
        *size = 1;
 8003d90:	4623      	mov	r3, r4
          break;
 8003d92:	e5ac      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
  while ((*srcString != 0) && (*size < maxSize) )
 8003d94:	2401      	movs	r4, #1
  *size= 1 ; /* /0 is the min String size */
 8003d96:	4623      	mov	r3, r4
  while ((*srcString != 0) && (*size < maxSize) )
 8003d98:	4638      	mov	r0, r7
 8003d9a:	e5a6      	b.n	80038ea <RI_GetRegCommandParser+0xf2>
          *rpm = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8003d9c:	4658      	mov	r0, fp
 8003d9e:	f7fe f9cd 	bl	800213c <MCI_GetLastRampFinalSpeed>
 8003da2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003da6:	0040      	lsls	r0, r0, #1
 8003da8:	f8c7 0002 	str.w	r0, [r7, #2]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8003dac:	4658      	mov	r0, fp
 8003dae:	f7fe f9cd 	bl	800214c <MCI_GetLastRampFinalDuration>
          *rawSize = 6;
 8003db2:	2408      	movs	r4, #8
 8003db4:	2306      	movs	r3, #6
 8003db6:	803b      	strh	r3, [r7, #0]
          *duration = MCI_GetLastRampFinalDuration(pMCI) ;
 8003db8:	80f8      	strh	r0, [r7, #6]
      *size = (*rawSize)+2;
 8003dba:	4623      	mov	r3, r4
 8003dbc:	e597      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
        *rawSize = sizeof(GlobalConfig_reg_t);
 8003dbe:	230a      	movs	r3, #10
        if ((*rawSize) +2  > freeSpace)
 8003dc0:	2d0b      	cmp	r5, #11
        *rawSize = sizeof(GlobalConfig_reg_t);
 8003dc2:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 8003dc4:	f77f ad6b 	ble.w	800389e <RI_GetRegCommandParser+0xa6>
          memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t) );
 8003dc8:	4b64      	ldr	r3, [pc, #400]	; (8003f5c <RI_GetRegCommandParser+0x764>)
 8003dca:	240c      	movs	r4, #12
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	891b      	ldrh	r3, [r3, #8]
 8003dd2:	8113      	strh	r3, [r2, #8]
 8003dd4:	6010      	str	r0, [r2, #0]
 8003dd6:	6051      	str	r1, [r2, #4]
      *size = (*rawSize)+2;
 8003dd8:	4623      	mov	r3, r4
 8003dda:	e588      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
        *rawSize = RUC_MAX_PHASE_NUMBER*8;
 8003ddc:	2328      	movs	r3, #40	; 0x28
        if ((*rawSize) +2  > freeSpace)
 8003dde:	2d29      	cmp	r5, #41	; 0x29
        *rawSize = RUC_MAX_PHASE_NUMBER*8;
 8003de0:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 8003de2:	f77f ad5c 	ble.w	800389e <RI_GetRegCommandParser+0xa6>
 8003de6:	f04f 0b00 	mov.w	fp, #0
 8003dea:	9501      	str	r5, [sp, #4]
 8003dec:	463c      	mov	r4, r7
 8003dee:	465d      	mov	r5, fp
 8003df0:	468b      	mov	fp, r1
            RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 8003df2:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <RI_GetRegCommandParser+0x760>)
 8003df4:	b2e9      	uxtb	r1, r5
 8003df6:	aa15      	add	r2, sp, #84	; 0x54
 8003df8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003dfc:	f004 f8c8 	bl	8007f90 <RUC_GetPhase>
            *rpm = (revUpPhase.hFinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8003e00:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
            *finalTorque = revUpPhase.hFinalTorque;
 8003e04:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
 8003e08:	80e1      	strh	r1, [r4, #6]
            *rpm = (revUpPhase.hFinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8003e0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003e0e:	3501      	adds	r5, #1
            *durationms  = revUpPhase.hDurationms;
 8003e10:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
            *rpm = (revUpPhase.hFinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8003e14:	0052      	lsls	r2, r2, #1
          for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++){
 8003e16:	2d05      	cmp	r5, #5
            *rpm = (revUpPhase.hFinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8003e18:	f8c4 2002 	str.w	r2, [r4, #2]
            *durationms  = revUpPhase.hDurationms;
 8003e1c:	f824 1f08 	strh.w	r1, [r4, #8]!
          for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++){
 8003e20:	d1e7      	bne.n	8003df2 <RI_GetRegCommandParser+0x5fa>
      *size = (*rawSize)+2;
 8003e22:	883b      	ldrh	r3, [r7, #0]
 8003e24:	9d01      	ldr	r5, [sp, #4]
 8003e26:	3302      	adds	r3, #2
 8003e28:	b29b      	uxth	r3, r3
    break;
 8003e2a:	461c      	mov	r4, r3
 8003e2c:	e55f      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
        *rawSize = sizeof(ApplicationConfig_reg_t);
 8003e2e:	230e      	movs	r3, #14
        if ((*rawSize) +2  > freeSpace)
 8003e30:	2d0f      	cmp	r5, #15
        *rawSize = sizeof(ApplicationConfig_reg_t);
 8003e32:	803b      	strh	r3, [r7, #0]
        if ((*rawSize) +2  > freeSpace)
 8003e34:	f77f ad33 	ble.w	800389e <RI_GetRegCommandParser+0xa6>
          memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 8003e38:	4b49      	ldr	r3, [pc, #292]	; (8003f60 <RI_GetRegCommandParser+0x768>)
 8003e3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e3e:	689c      	ldr	r4, [r3, #8]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	6051      	str	r1, [r2, #4]
 8003e46:	6094      	str	r4, [r2, #8]
 8003e48:	6010      	str	r0, [r2, #0]
 8003e4a:	899b      	ldrh	r3, [r3, #12]
 8003e4c:	8193      	strh	r3, [r2, #12]
 8003e4e:	2410      	movs	r4, #16
      *size = (*rawSize)+2;
 8003e50:	4623      	mov	r3, r4
 8003e52:	e54c      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003e54:	4658      	mov	r0, fp
 8003e56:	f7fe f987 	bl	8002168 <MCI_GetMecSpeedRefUnit>
 8003e5a:	e5ab      	b.n	80039b4 <RI_GetRegCommandParser+0x1bc>
          *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 8003e5c:	4b39      	ldr	r3, [pc, #228]	; (8003f44 <RI_GetRegCommandParser+0x74c>)
 8003e5e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003e62:	f004 fb4b 	bl	80084fc <STO_PLL_GetEstimatedBemfLevel>
 8003e66:	2404      	movs	r4, #4
 8003e68:	6038      	str	r0, [r7, #0]
        *size = 4;
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	e53f      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdataU32 = STM_GetFaultState(&STM[motorID]);
 8003e6e:	4839      	ldr	r0, [pc, #228]	; (8003f54 <RI_GetRegCommandParser+0x75c>)
 8003e70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003e74:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8003e78:	f003 fea2 	bl	8007bc0 <STM_GetFaultState>
 8003e7c:	2404      	movs	r4, #4
 8003e7e:	6038      	str	r0, [r7, #0]
        *size = 4;
 8003e80:	4623      	mov	r3, r4
 8003e82:	e534      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          memcpy(rawData, MotorConfig_reg[motorID], sizeof(MotorConfig_reg_t) );
 8003e84:	4b37      	ldr	r3, [pc, #220]	; (8003f64 <RI_GetRegCommandParser+0x76c>)
 8003e86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e8a:	f103 0e30 	add.w	lr, r3, #48	; 0x30
 8003e8e:	681c      	ldr	r4, [r3, #0]
 8003e90:	6858      	ldr	r0, [r3, #4]
 8003e92:	6899      	ldr	r1, [r3, #8]
 8003e94:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8003e98:	f8c2 c00c 	str.w	ip, [r2, #12]
 8003e9c:	3310      	adds	r3, #16
 8003e9e:	4573      	cmp	r3, lr
 8003ea0:	6014      	str	r4, [r2, #0]
 8003ea2:	6050      	str	r0, [r2, #4]
 8003ea4:	6091      	str	r1, [r2, #8]
 8003ea6:	f102 0210 	add.w	r2, r2, #16
 8003eaa:	d1f0      	bne.n	8003e8e <RI_GetRegCommandParser+0x696>
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	6093      	str	r3, [r2, #8]
 8003eb4:	243e      	movs	r4, #62	; 0x3e
 8003eb6:	6010      	str	r0, [r2, #0]
 8003eb8:	6051      	str	r1, [r2, #4]
      *size = (*rawSize)+2;
 8003eba:	4623      	mov	r3, r4
 8003ebc:	e517      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
  uint8_t retVal = MCP_CMD_NOK;
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	e4d3      	b.n	800386a <RI_GetRegCommandParser+0x72>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 8003ec2:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <RI_GetRegCommandParser+0x750>)
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8003ec4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003ec8:	f002 fe16 	bl	8006af8 <PID_GetKPDivisorPOW2>
 8003ecc:	2402      	movs	r4, #2
 8003ece:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003ed0:	4623      	mov	r3, r4
 8003ed2:	e50c      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
            *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <RI_GetRegCommandParser+0x74c>)
 8003ed6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003eda:	3034      	adds	r0, #52	; 0x34
 8003edc:	f002 fdf8 	bl	8006ad0 <PID_GetKP>
 8003ee0:	2402      	movs	r4, #2
 8003ee2:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003ee4:	4623      	mov	r3, r4
 8003ee6:	e502      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8003ee8:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <RI_GetRegCommandParser+0x744>)
 8003eea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003eee:	f002 fe0f 	bl	8006b10 <PID_GetKIDivisorPOW2>
 8003ef2:	2402      	movs	r4, #2
 8003ef4:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003ef6:	4623      	mov	r3, r4
 8003ef8:	e4f9      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8003efa:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <RI_GetRegCommandParser+0x744>)
 8003efc:	e7e2      	b.n	8003ec4 <RI_GetRegCommandParser+0x6cc>
          *regdata16 = MCI_GetIqd(pMCI).d;
 8003efe:	4658      	mov	r0, fp
 8003f00:	f7fe f952 	bl	80021a8 <MCI_GetIqd>
         break;
 8003f04:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIqd(pMCI).d;
 8003f06:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003f0a:	900f      	str	r0, [sp, #60]	; 0x3c
 8003f0c:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8003f0e:	4623      	mov	r3, r4
         break;
 8003f10:	e4ed      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdata16 = MCI_GetIqd(pMCI).q;
 8003f12:	4658      	mov	r0, fp
 8003f14:	f7fe f948 	bl	80021a8 <MCI_GetIqd>
         break;
 8003f18:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIqd(pMCI).q;
 8003f1a:	9010      	str	r0, [sp, #64]	; 0x40
        *size = 2;
 8003f1c:	4623      	mov	r3, r4
          *regdata16 = MCI_GetIqd(pMCI).q;
 8003f1e:	8038      	strh	r0, [r7, #0]
         break;
 8003f20:	e4e5      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdata16 = MCI_GetIab(pMCI).b;
 8003f22:	4658      	mov	r0, fp
 8003f24:	f7fe f924 	bl	8002170 <MCI_GetIab>
         break;
 8003f28:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIab(pMCI).b;
 8003f2a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003f2e:	9013      	str	r0, [sp, #76]	; 0x4c
 8003f30:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8003f32:	4623      	mov	r3, r4
         break;
 8003f34:	e4db      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
 8003f36:	bf00      	nop
 8003f38:	2000056c 	.word	0x2000056c
 8003f3c:	20000568 	.word	0x20000568
 8003f40:	20000644 	.word	0x20000644
 8003f44:	20000650 	.word	0x20000650
 8003f48:	2000064c 	.word	0x2000064c
 8003f4c:	20000584 	.word	0x20000584
 8003f50:	0800b46c 	.word	0x0800b46c
 8003f54:	200009bc 	.word	0x200009bc
 8003f58:	20000648 	.word	0x20000648
 8003f5c:	0800b4f0 	.word	0x0800b4f0
 8003f60:	20000578 	.word	0x20000578
 8003f64:	20000580 	.word	0x20000580
            *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 8003f68:	4b4e      	ldr	r3, [pc, #312]	; (80040a4 <RI_GetRegCommandParser+0x8ac>)
 8003f6a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003f6e:	3034      	adds	r0, #52	; 0x34
 8003f70:	f002 fdb2 	bl	8006ad8 <PID_GetKI>
 8003f74:	2402      	movs	r4, #2
 8003f76:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003f78:	4623      	mov	r3, r4
 8003f7a:	e4b8      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID],&hC1,&hC2);
 8003f7c:	4b49      	ldr	r3, [pc, #292]	; (80040a4 <RI_GetRegCommandParser+0x8ac>)
 8003f7e:	aa15      	add	r2, sp, #84	; 0x54
 8003f80:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003f84:	f10d 010a 	add.w	r1, sp, #10
 8003f88:	f004 faa2 	bl	80084d0 <STO_PLL_GetObserverGains>
        break;
 8003f8c:	2402      	movs	r4, #2
            *regdata16 = hC1;
 8003f8e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003f92:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8003f94:	4623      	mov	r3, r4
        break;
 8003f96:	e4aa      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003f98:	4b43      	ldr	r3, [pc, #268]	; (80040a8 <RI_GetRegCommandParser+0x8b0>)
 8003f9a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003f9e:	f002 fdd5 	bl	8006b4c <PID_GetKD>
         break;
 8003fa2:	2402      	movs	r4, #2
          *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003fa4:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003fa6:	4623      	mov	r3, r4
         break;
 8003fa8:	e4a1      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003faa:	4b40      	ldr	r3, [pc, #256]	; (80040ac <RI_GetRegCommandParser+0x8b4>)
 8003fac:	e7f5      	b.n	8003f9a <RI_GetRegCommandParser+0x7a2>
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 8003fae:	4b40      	ldr	r3, [pc, #256]	; (80040b0 <RI_GetRegCommandParser+0x8b8>)
 8003fb0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003fb4:	f002 fd26 	bl	8006a04 <MPM_GetAvrgElMotorPowerW>
         break;
 8003fb8:	2402      	movs	r4, #2
          *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]);
 8003fba:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003fbc:	4623      	mov	r3, r4
         break;
 8003fbe:	e496      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdata16 = MCI_GetValphabeta(pMCI).beta;
 8003fc0:	4658      	mov	r0, fp
 8003fc2:	f7fe f91b 	bl	80021fc <MCI_GetValphabeta>
         break;
 8003fc6:	2402      	movs	r4, #2
          *regdata16 = MCI_GetValphabeta(pMCI).beta;
 8003fc8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003fcc:	9009      	str	r0, [sp, #36]	; 0x24
 8003fce:	803b      	strh	r3, [r7, #0]
        *size = 2;
 8003fd0:	4623      	mov	r3, r4
         break;
 8003fd2:	e48c      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8003fd4:	4658      	mov	r0, fp
 8003fd6:	f7fe f8d9 	bl	800218c <MCI_GetIalphabeta>
         break;
 8003fda:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8003fdc:	9012      	str	r0, [sp, #72]	; 0x48
        *size = 2;
 8003fde:	4623      	mov	r3, r4
          *regdata16 = MCI_GetIalphabeta(pMCI).alpha;
 8003fe0:	8038      	strh	r0, [r7, #0]
         break;
 8003fe2:	e484      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8003fe4:	4b33      	ldr	r3, [pc, #204]	; (80040b4 <RI_GetRegCommandParser+0x8bc>)
 8003fe6:	e780      	b.n	8003eea <RI_GetRegCommandParser+0x6f2>
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8003fe8:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <RI_GetRegCommandParser+0x8ac>)
 8003fea:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003fee:	3034      	adds	r0, #52	; 0x34
 8003ff0:	f002 fd8e 	bl	8006b10 <PID_GetKIDivisorPOW2>
 8003ff4:	2402      	movs	r4, #2
 8003ff6:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8003ff8:	4623      	mov	r3, r4
 8003ffa:	e478      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8003ffc:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <RI_GetRegCommandParser+0x8b4>)
 8003ffe:	e761      	b.n	8003ec4 <RI_GetRegCommandParser+0x6cc>
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 8004000:	4b29      	ldr	r3, [pc, #164]	; (80040a8 <RI_GetRegCommandParser+0x8b0>)
 8004002:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004006:	f002 fd63 	bl	8006ad0 <PID_GetKP>
         break;
 800400a:	2402      	movs	r4, #2
          *regdata16 = PID_GetKP(pPIDId[motorID]);
 800400c:	8038      	strh	r0, [r7, #0]
        *size = 2;
 800400e:	4623      	mov	r3, r4
         break;
 8004010:	e46d      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8004012:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <RI_GetRegCommandParser+0x8c0>)
 8004014:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004018:	f002 fd38 	bl	8006a8c <NTC_GetAvTemp_C>
         break;
 800401c:	2402      	movs	r4, #2
          *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 800401e:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8004020:	4623      	mov	r3, r4
         break;
 8004022:	e464      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
            *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8004024:	4b1f      	ldr	r3, [pc, #124]	; (80040a4 <RI_GetRegCommandParser+0x8ac>)
 8004026:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800402a:	f004 fa31 	bl	8008490 <STO_PLL_GetEstimatedBemf>
          break;
 800402e:	2402      	movs	r4, #2
            *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8004030:	9006      	str	r0, [sp, #24]
        *size = 2;
 8004032:	4623      	mov	r3, r4
            *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8004034:	8038      	strh	r0, [r7, #0]
          break;
 8004036:	e45a      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
            *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t*) stoPLLSensor[motorID]);
 8004038:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <RI_GetRegCommandParser+0x8ac>)
 800403a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800403e:	f003 fc43 	bl	80078c8 <SPD_GetS16Speed>
          break;
 8004042:	2402      	movs	r4, #2
            *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t*) stoPLLSensor[motorID]);
 8004044:	8038      	strh	r0, [r7, #0]
        *size = 2;
 8004046:	4623      	mov	r3, r4
          break;
 8004048:	e451      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 800404a:	4658      	mov	r0, fp
 800404c:	f7fe f8d6 	bl	80021fc <MCI_GetValphabeta>
         break;
 8004050:	2402      	movs	r4, #2
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8004052:	900a      	str	r0, [sp, #40]	; 0x28
        *size = 2;
 8004054:	4623      	mov	r3, r4
          *regdata16 = MCI_GetValphabeta(pMCI).alpha;
 8004056:	8038      	strh	r0, [r7, #0]
         break;
 8004058:	e449      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
            *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 800405a:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <RI_GetRegCommandParser+0x8ac>)
 800405c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004060:	f004 fa22 	bl	80084a8 <STO_PLL_GetEstimatedCurrent>
          break;
 8004064:	2402      	movs	r4, #2
            *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8004066:	9008      	str	r0, [sp, #32]
        *size = 2;
 8004068:	4623      	mov	r3, r4
            *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 800406a:	8038      	strh	r0, [r7, #0]
          break;
 800406c:	e43f      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdata16 = MCI_GetIqdref(pMCI).d;
 800406e:	4658      	mov	r0, fp
 8004070:	f7fe f8a8 	bl	80021c4 <MCI_GetIqdref>
         break;
 8004074:	2402      	movs	r4, #2
          *regdata16 = MCI_GetIqdref(pMCI).d;
 8004076:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800407a:	900d      	str	r0, [sp, #52]	; 0x34
 800407c:	803b      	strh	r3, [r7, #0]
        *size = 2;
 800407e:	4623      	mov	r3, r4
         break;
 8004080:	e435      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <RI_GetRegCommandParser+0x8bc>)
 8004084:	e7bd      	b.n	8004002 <RI_GetRegCommandParser+0x80a>
          *regdata16 = MCI_GetVqd(pMCI).q;
 8004086:	4658      	mov	r0, fp
 8004088:	f7fe f8aa 	bl	80021e0 <MCI_GetVqd>
         break;
 800408c:	2402      	movs	r4, #2
          *regdata16 = MCI_GetVqd(pMCI).q;
 800408e:	900c      	str	r0, [sp, #48]	; 0x30
        *size = 2;
 8004090:	4623      	mov	r3, r4
          *regdata16 = MCI_GetVqd(pMCI).q;
 8004092:	8038      	strh	r0, [r7, #0]
         break;
 8004094:	e42b      	b.n	80038ee <RI_GetRegCommandParser+0xf6>
          *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <RI_GetRegCommandParser+0x8b4>)
 8004098:	e7b3      	b.n	8004002 <RI_GetRegCommandParser+0x80a>
          *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <RI_GetRegCommandParser+0x8bc>)
 800409c:	e77d      	b.n	8003f9a <RI_GetRegCommandParser+0x7a2>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 800409e:	4b03      	ldr	r3, [pc, #12]	; (80040ac <RI_GetRegCommandParser+0x8b4>)
 80040a0:	e723      	b.n	8003eea <RI_GetRegCommandParser+0x6f2>
 80040a2:	bf00      	nop
 80040a4:	20000650 	.word	0x20000650
 80040a8:	20000568 	.word	0x20000568
 80040ac:	2000056c 	.word	0x2000056c
 80040b0:	20000564 	.word	0x20000564
 80040b4:	2000064c 	.word	0x2000064c
 80040b8:	20000574 	.word	0x20000574

080040bc <RI_GetIDSize>:
return retVal;
}

uint8_t RI_GetIDSize (uint16_t dataID)
{
  uint8_t typeID = dataID & TYPE_MASK;
 80040bc:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80040c0:	3808      	subs	r0, #8
 80040c2:	b2c0      	uxtb	r0, r0
 80040c4:	2810      	cmp	r0, #16
 80040c6:	bf9a      	itte	ls
 80040c8:	4b01      	ldrls	r3, [pc, #4]	; (80040d0 <RI_GetIDSize+0x14>)
 80040ca:	5c18      	ldrbls	r0, [r3, r0]
 80040cc:	2000      	movhi	r0, #0
    default:
      result=0;
      break;
  }
  return result;
}
 80040ce:	4770      	bx	lr
 80040d0:	0800b774 	.word	0x0800b774

080040d4 <RI_GetPtrReg>:
  uint16_t regID = dataID & REG_MASK;
  uint8_t retVal = MCP_CMD_OK;

  MCI_Handle_t * pMCI = &Mci[motorID];

  switch (typeID)
 80040d4:	f000 0238 	and.w	r2, r0, #56	; 0x38
 80040d8:	2a10      	cmp	r2, #16
  uint8_t typeID = dataID & TYPE_MASK;
 80040da:	b2c3      	uxtb	r3, r0
  switch (typeID)
 80040dc:	d003      	beq.n	80040e6 <RI_GetPtrReg+0x12>
      break;
      case MC_REG_STOPLL_BEMF_BETA:
        *dataPtr = &(stoPLLSensor[motorID]->hBemf_beta_est);
      break;
      default:
        *dataPtr = &nullData16;
 80040de:	4b6c      	ldr	r3, [pc, #432]	; (8004290 <RI_GetPtrReg+0x1bc>)
 80040e0:	600b      	str	r3, [r1, #0]
        retVal = MCP_ERROR_UNKNOWN_REG;
 80040e2:	2005      	movs	r0, #5
      *dataPtr = &nullData16;
      retVal = MCP_ERROR_UNKNOWN_REG;
      break;
  }
  return retVal;
}
 80040e4:	4770      	bx	lr
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 80040e6:	f003 0207 	and.w	r2, r3, #7
  uint16_t regID = dataID & REG_MASK;
 80040ea:	f020 0007 	bic.w	r0, r0, #7
  uint8_t motorID = (dataID & MOTOR_MASK)-1;
 80040ee:	3a01      	subs	r2, #1
 80040f0:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
  MCI_Handle_t * pMCI = &Mci[motorID];
 80040f4:	b2d2      	uxtb	r2, r2
  uint16_t regID = dataID & REG_MASK;
 80040f6:	b283      	uxth	r3, r0
 80040f8:	f000 8081 	beq.w	80041fe <RI_GetPtrReg+0x12a>
 80040fc:	d816      	bhi.n	800412c <RI_GetPtrReg+0x58>
 80040fe:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8004102:	f000 8086 	beq.w	8004212 <RI_GetPtrReg+0x13e>
 8004106:	d835      	bhi.n	8004174 <RI_GetPtrReg+0xa0>
 8004108:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 800410c:	f000 808b 	beq.w	8004226 <RI_GetPtrReg+0x152>
 8004110:	d91f      	bls.n	8004152 <RI_GetPtrReg+0x7e>
 8004112:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8004116:	d1e2      	bne.n	80040de <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8004118:	4b5e      	ldr	r3, [pc, #376]	; (8004294 <RI_GetPtrReg+0x1c0>)
 800411a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800411e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8004122:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.beta);
 8004124:	6893      	ldr	r3, [r2, #8]
 8004126:	3306      	adds	r3, #6
 8004128:	600b      	str	r3, [r1, #0]
       break;
 800412a:	4770      	bx	lr
 800412c:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8004130:	f000 8083 	beq.w	800423a <RI_GetPtrReg+0x166>
 8004134:	d938      	bls.n	80041a8 <RI_GetPtrReg+0xd4>
 8004136:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 800413a:	f000 8085 	beq.w	8004248 <RI_GetPtrReg+0x174>
 800413e:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8004142:	d127      	bne.n	8004194 <RI_GetPtrReg+0xc0>
        *dataPtr = &(stoPLLSensor[motorID]->hBemf_beta_est);
 8004144:	4b54      	ldr	r3, [pc, #336]	; (8004298 <RI_GetPtrReg+0x1c4>)
 8004146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414a:	3372      	adds	r3, #114	; 0x72
 800414c:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800414e:	2000      	movs	r0, #0
      break;
 8004150:	4770      	bx	lr
 8004152:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004156:	f000 8092 	beq.w	800427e <RI_GetPtrReg+0x1aa>
 800415a:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800415e:	d1be      	bne.n	80040de <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 8004160:	4b4c      	ldr	r3, [pc, #304]	; (8004294 <RI_GetPtrReg+0x1c0>)
 8004162:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004166:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 800416a:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.b);
 800416c:	6893      	ldr	r3, [r2, #8]
 800416e:	3302      	adds	r3, #2
 8004170:	600b      	str	r3, [r1, #0]
       break;
 8004172:	4770      	bx	lr
 8004174:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8004178:	d06d      	beq.n	8004256 <RI_GetPtrReg+0x182>
 800417a:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 800417e:	d123      	bne.n	80041c8 <RI_GetPtrReg+0xf4>
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 8004180:	4b44      	ldr	r3, [pc, #272]	; (8004294 <RI_GetPtrReg+0x1c0>)
 8004182:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004186:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 800418a:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.d);
 800418c:	6893      	ldr	r3, [r2, #8]
 800418e:	3312      	adds	r3, #18
 8004190:	600b      	str	r3, [r1, #0]
       break;
 8004192:	4770      	bx	lr
 8004194:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8004198:	d1a1      	bne.n	80040de <RI_GetPtrReg+0xa>
        *dataPtr = &(stoPLLSensor[motorID]->_Super.hAvrMecSpeedUnit);
 800419a:	4b3f      	ldr	r3, [pc, #252]	; (8004298 <RI_GetPtrReg+0x1c4>)
 800419c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a0:	330c      	adds	r3, #12
 80041a2:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80041a4:	2000      	movs	r0, #0
      break;
 80041a6:	4770      	bx	lr
 80041a8:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 80041ac:	d05d      	beq.n	800426a <RI_GetPtrReg+0x196>
 80041ae:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 80041b2:	d116      	bne.n	80041e2 <RI_GetPtrReg+0x10e>
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 80041b4:	4b37      	ldr	r3, [pc, #220]	; (8004294 <RI_GetPtrReg+0x1c0>)
 80041b6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80041ba:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 80041be:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.beta);
 80041c0:	6893      	ldr	r3, [r2, #8]
 80041c2:	331c      	adds	r3, #28
 80041c4:	600b      	str	r3, [r1, #0]
       break;
 80041c6:	4770      	bx	lr
 80041c8:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80041cc:	d187      	bne.n	80040de <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 80041ce:	4b31      	ldr	r3, [pc, #196]	; (8004294 <RI_GetPtrReg+0x1c0>)
 80041d0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80041d4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 80041d8:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.d);
 80041da:	6893      	ldr	r3, [r2, #8]
 80041dc:	330e      	adds	r3, #14
 80041de:	600b      	str	r3, [r1, #0]
       break;
 80041e0:	4770      	bx	lr
 80041e2:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80041e6:	f47f af7a 	bne.w	80040de <RI_GetPtrReg+0xa>
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 80041ea:	4b2a      	ldr	r3, [pc, #168]	; (8004294 <RI_GetPtrReg+0x1c0>)
 80041ec:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80041f0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 80041f4:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.d);
 80041f6:	6893      	ldr	r3, [r2, #8]
 80041f8:	3318      	adds	r3, #24
 80041fa:	600b      	str	r3, [r1, #0]
       break;
 80041fc:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 80041fe:	4b25      	ldr	r3, [pc, #148]	; (8004294 <RI_GetPtrReg+0x1c0>)
 8004200:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004204:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8004208:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Vqd.q);
 800420a:	6893      	ldr	r3, [r2, #8]
 800420c:	3316      	adds	r3, #22
 800420e:	600b      	str	r3, [r1, #0]
       break;
 8004210:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <RI_GetPtrReg+0x1c0>)
 8004214:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004218:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 800421c:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqd.q);
 800421e:	6893      	ldr	r3, [r2, #8]
 8004220:	330c      	adds	r3, #12
 8004222:	600b      	str	r3, [r1, #0]
       break;
 8004224:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 8004226:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <RI_GetPtrReg+0x1c0>)
 8004228:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800422c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8004230:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Ialphabeta.alpha);
 8004232:	6893      	ldr	r3, [r2, #8]
 8004234:	3304      	adds	r3, #4
 8004236:	600b      	str	r3, [r1, #0]
       break;
 8004238:	4770      	bx	lr
        *dataPtr = &(stoPLLSensor[motorID]->_Super.hElAngle);
 800423a:	4b17      	ldr	r3, [pc, #92]	; (8004298 <RI_GetPtrReg+0x1c4>)
 800423c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004240:	3304      	adds	r3, #4
 8004242:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8004244:	2000      	movs	r0, #0
      break;
 8004246:	4770      	bx	lr
        *dataPtr = &(stoPLLSensor[motorID]->hBemf_alfa_est);
 8004248:	4b13      	ldr	r3, [pc, #76]	; (8004298 <RI_GetPtrReg+0x1c4>)
 800424a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800424e:	3370      	adds	r3, #112	; 0x70
 8004250:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8004252:	2000      	movs	r0, #0
      break;
 8004254:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 8004256:	4b0f      	ldr	r3, [pc, #60]	; (8004294 <RI_GetPtrReg+0x1c0>)
 8004258:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800425c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8004260:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iqdref.q);
 8004262:	6893      	ldr	r3, [r2, #8]
 8004264:	3310      	adds	r3, #16
 8004266:	600b      	str	r3, [r1, #0]
       break;
 8004268:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 800426a:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <RI_GetPtrReg+0x1c0>)
 800426c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004270:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8004274:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Valphabeta.alpha);
 8004276:	6893      	ldr	r3, [r2, #8]
 8004278:	331a      	adds	r3, #26
 800427a:	600b      	str	r3, [r1, #0]
       break;
 800427c:	4770      	bx	lr
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <RI_GetPtrReg+0x1c0>)
 8004280:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004284:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  uint8_t retVal = MCP_CMD_OK;
 8004288:	2000      	movs	r0, #0
        *dataPtr = &(pMCI->pFOCVars->Iab.a);
 800428a:	6893      	ldr	r3, [r2, #8]
 800428c:	600b      	str	r3, [r1, #0]
       break;
 800428e:	4770      	bx	lr
 8004290:	20000858 	.word	0x20000858
 8004294:	200009a0 	.word	0x200009a0
 8004298:	20000650 	.word	0x20000650

0800429c <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800429c:	4b66      	ldr	r3, [pc, #408]	; (8004438 <RCM_RegisterRegConv+0x19c>)
 800429e:	681a      	ldr	r2, [r3, #0]
{
 80042a0:	b4f0      	push	{r4, r5, r6, r7}
 80042a2:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80042a4:	2a00      	cmp	r2, #0
 80042a6:	f000 808f 	beq.w	80043c8 <RCM_RegisterRegConv+0x12c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80042aa:	7904      	ldrb	r4, [r0, #4]
 80042ac:	7910      	ldrb	r0, [r2, #4]
 80042ae:	4284      	cmp	r4, r0
 80042b0:	d01e      	beq.n	80042f0 <RCM_RegisterRegConv+0x54>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80042b2:	685d      	ldr	r5, [r3, #4]
 80042b4:	2d00      	cmp	r5, #0
 80042b6:	f000 80ad 	beq.w	8004414 <RCM_RegisterRegConv+0x178>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80042ba:	792a      	ldrb	r2, [r5, #4]
 80042bc:	42a2      	cmp	r2, r4
  uint8_t handle=255;
 80042be:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80042c2:	f000 8089 	beq.w	80043d8 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80042c6:	689e      	ldr	r6, [r3, #8]
 80042c8:	b1fe      	cbz	r6, 800430a <RCM_RegisterRegConv+0x6e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80042ca:	7932      	ldrb	r2, [r6, #4]
 80042cc:	42a2      	cmp	r2, r4
 80042ce:	f000 8094 	beq.w	80043fa <RCM_RegisterRegConv+0x15e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80042d2:	68dd      	ldr	r5, [r3, #12]
 80042d4:	2d00      	cmp	r5, #0
 80042d6:	f000 8099 	beq.w	800440c <RCM_RegisterRegConv+0x170>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80042da:	792a      	ldrb	r2, [r5, #4]
 80042dc:	42a2      	cmp	r2, r4
 80042de:	f000 80a8 	beq.w	8004432 <RCM_RegisterRegConv+0x196>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 80042e2:	2803      	cmp	r0, #3
 80042e4:	bf98      	it	ls
 80042e6:	680a      	ldrls	r2, [r1, #0]
 80042e8:	d91e      	bls.n	8004328 <RCM_RegisterRegConv+0x8c>
 80042ea:	20ff      	movs	r0, #255	; 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 80042ec:	bcf0      	pop	{r4, r5, r6, r7}
 80042ee:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80042f0:	6810      	ldr	r0, [r2, #0]
 80042f2:	680a      	ldr	r2, [r1, #0]
 80042f4:	4290      	cmp	r0, r2
 80042f6:	f000 8087 	beq.w	8004408 <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80042fa:	685d      	ldr	r5, [r3, #4]
 80042fc:	2d00      	cmp	r5, #0
 80042fe:	d1dc      	bne.n	80042ba <RCM_RegisterRegConv+0x1e>
 8004300:	689e      	ldr	r6, [r3, #8]
      i++;
 8004302:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004304:	2e00      	cmp	r6, #0
 8004306:	d1e0      	bne.n	80042ca <RCM_RegisterRegConv+0x2e>
 8004308:	e004      	b.n	8004314 <RCM_RegisterRegConv+0x78>
 800430a:	2804      	cmp	r0, #4
 800430c:	f240 808e 	bls.w	800442c <RCM_RegisterRegConv+0x190>
 8004310:	680a      	ldr	r2, [r1, #0]
      i++;
 8004312:	2002      	movs	r0, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004314:	68dd      	ldr	r5, [r3, #12]
 8004316:	b13d      	cbz	r5, 8004328 <RCM_RegisterRegConv+0x8c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8004318:	792e      	ldrb	r6, [r5, #4]
 800431a:	790c      	ldrb	r4, [r1, #4]
 800431c:	42a6      	cmp	r6, r4
 800431e:	d103      	bne.n	8004328 <RCM_RegisterRegConv+0x8c>
 8004320:	682c      	ldr	r4, [r5, #0]
 8004322:	4294      	cmp	r4, r2
 8004324:	d1dd      	bne.n	80042e2 <RCM_RegisterRegConv+0x46>
      i++;
 8004326:	2003      	movs	r0, #3
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8004328:	6894      	ldr	r4, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800432a:	4d44      	ldr	r5, [pc, #272]	; (800443c <RCM_RegisterRegConv+0x1a0>)
      RCM_handle_array [handle] = regConv;
 800432c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8004330:	2300      	movs	r3, #0
 8004332:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8004336:	07e3      	lsls	r3, r4, #31
 8004338:	d411      	bmi.n	800435e <RCM_RegisterRegConv+0xc2>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800433a:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800433c:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8004340:	f023 0320 	bic.w	r3, r3, #32
 8004344:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8004346:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8004348:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800434a:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800434e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004352:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8004354:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8004356:	6893      	ldr	r3, [r2, #8]
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800435e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004360:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004364:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8004366:	790b      	ldrb	r3, [r1, #4]
 8004368:	2b09      	cmp	r3, #9
 800436a:	d83c      	bhi.n	80043e6 <RCM_RegisterRegConv+0x14a>
 800436c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8004370:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8004374:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004378:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8004380:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8004384:	fab4 f484 	clz	r4, r4
 8004388:	40e6      	lsrs	r6, r4
 800438a:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 800438c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8004390:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 8004394:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 8004398:	fa94 f7a4 	rbit	r7, r4
 800439c:	fab7 f787 	clz	r7, r7
 80043a0:	fa94 f4a4 	rbit	r4, r4
 80043a4:	f04f 0c07 	mov.w	ip, #7
 80043a8:	6889      	ldr	r1, [r1, #8]
 80043aa:	fab4 f484 	clz	r4, r4
 80043ae:	fa23 f707 	lsr.w	r7, r3, r7
 80043b2:	fa0c f707 	lsl.w	r7, ip, r7
 80043b6:	40e3      	lsrs	r3, r4
 80043b8:	4099      	lsls	r1, r3
 80043ba:	ea25 0307 	bic.w	r3, r5, r7
 80043be:	430b      	orrs	r3, r1
 80043c0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
}
 80043c4:	bcf0      	pop	{r4, r5, r6, r7}
 80043c6:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80043c8:	685d      	ldr	r5, [r3, #4]
 80043ca:	b355      	cbz	r5, 8004422 <RCM_RegisterRegConv+0x186>
 80043cc:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 80043ce:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80043d0:	792a      	ldrb	r2, [r5, #4]
 80043d2:	42a2      	cmp	r2, r4
 80043d4:	f47f af77 	bne.w	80042c6 <RCM_RegisterRegConv+0x2a>
 80043d8:	682d      	ldr	r5, [r5, #0]
 80043da:	680a      	ldr	r2, [r1, #0]
 80043dc:	4295      	cmp	r5, r2
 80043de:	f47f af72 	bne.w	80042c6 <RCM_RegisterRegConv+0x2a>
 80043e2:	2001      	movs	r0, #1
 80043e4:	e7a0      	b.n	8004328 <RCM_RegisterRegConv+0x8c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80043e6:	2403      	movs	r4, #3
 80043e8:	f06f 051d 	mvn.w	r5, #29
 80043ec:	fb14 5403 	smlabb	r4, r4, r3, r5
 80043f0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80043f4:	f003 7600 	and.w	r6, r3, #33554432	; 0x2000000
 80043f8:	e7c0      	b.n	800437c <RCM_RegisterRegConv+0xe0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80043fa:	6835      	ldr	r5, [r6, #0]
 80043fc:	680a      	ldr	r2, [r1, #0]
 80043fe:	4295      	cmp	r5, r2
 8004400:	f47f af67 	bne.w	80042d2 <RCM_RegisterRegConv+0x36>
      i++;
 8004404:	2002      	movs	r0, #2
 8004406:	e78f      	b.n	8004328 <RCM_RegisterRegConv+0x8c>
  uint8_t i=0;
 8004408:	2000      	movs	r0, #0
 800440a:	e78d      	b.n	8004328 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800440c:	2804      	cmp	r0, #4
 800440e:	680a      	ldr	r2, [r1, #0]
 8004410:	d889      	bhi.n	8004326 <RCM_RegisterRegConv+0x8a>
 8004412:	e789      	b.n	8004328 <RCM_RegisterRegConv+0x8c>
 8004414:	689e      	ldr	r6, [r3, #8]
      i++;
 8004416:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8004418:	2e00      	cmp	r6, #0
 800441a:	f47f af56 	bne.w	80042ca <RCM_RegisterRegConv+0x2e>
 800441e:	680a      	ldr	r2, [r1, #0]
 8004420:	e778      	b.n	8004314 <RCM_RegisterRegConv+0x78>
 8004422:	689e      	ldr	r6, [r3, #8]
 8004424:	b116      	cbz	r6, 800442c <RCM_RegisterRegConv+0x190>
 8004426:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8004428:	4628      	mov	r0, r5
 800442a:	e74e      	b.n	80042ca <RCM_RegisterRegConv+0x2e>
 800442c:	680a      	ldr	r2, [r1, #0]
 800442e:	4630      	mov	r0, r6
 8004430:	e770      	b.n	8004314 <RCM_RegisterRegConv+0x78>
 8004432:	680a      	ldr	r2, [r1, #0]
 8004434:	e774      	b.n	8004320 <RCM_RegisterRegConv+0x84>
 8004436:	bf00      	nop
 8004438:	20001ccc 	.word	0x20001ccc
 800443c:	20001ca8 	.word	0x20001ca8

08004440 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8004440:	b430      	push	{r4, r5}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8004442:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <RCM_ExecRegularConv+0x70>)
 8004444:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8004448:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	2b09      	cmp	r3, #9
 800444e:	d827      	bhi.n	80044a0 <RCM_ExecRegularConv+0x60>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8004450:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004454:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8004458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800445c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004460:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8004464:	f44f 7500 	mov.w	r5, #512	; 0x200
 8004468:	fab1 f181 	clz	r1, r1
 800446c:	40cd      	lsrs	r5, r1
 800446e:	f102 042c 	add.w	r4, r2, #44	; 0x2c
  MODIFY_REG(*preg,
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800447a:	f020 001f 	bic.w	r0, r0, #31
 800447e:	4303      	orrs	r3, r0

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8004486:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 800448a:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800448c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800448e:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8004492:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8004494:	079b      	lsls	r3, r3, #30
 8004496:	d5fc      	bpl.n	8004492 <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8004498:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 800449a:	bc30      	pop	{r4, r5}
 800449c:	b280      	uxth	r0, r0
 800449e:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80044a0:	2103      	movs	r1, #3
 80044a2:	f06f 001d 	mvn.w	r0, #29
 80044a6:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80044aa:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80044ae:	e7d5      	b.n	800445c <RCM_ExecRegularConv+0x1c>
 80044b0:	20001ccc 	.word	0x20001ccc

080044b4 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80044b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80044b8:	4c0f      	ldr	r4, [pc, #60]	; (80044f8 <RCM_ExecUserConv+0x44>)
 80044ba:	7823      	ldrb	r3, [r4, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d001      	beq.n	80044c4 <RCM_ExecUserConv+0x10>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 80044c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80044c4:	4d0d      	ldr	r5, [pc, #52]	; (80044fc <RCM_ExecUserConv+0x48>)
 80044c6:	4f0e      	ldr	r7, [pc, #56]	; (8004500 <RCM_ExecUserConv+0x4c>)
 80044c8:	7828      	ldrb	r0, [r5, #0]
 80044ca:	f7ff ffb9 	bl	8004440 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80044ce:	782d      	ldrb	r5, [r5, #0]
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <RCM_ExecUserConv+0x50>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80044d2:	8038      	strh	r0, [r7, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80044d4:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 80044d8:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80044da:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 80044dc:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80044de:	2e00      	cmp	r6, #0
 80044e0:	d0ee      	beq.n	80044c0 <RCM_ExecUserConv+0xc>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80044e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80044e6:	2000      	movs	r0, #0
 80044e8:	7020      	strb	r0, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	4628      	mov	r0, r5
 80044ee:	4633      	mov	r3, r6
}
 80044f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80044f4:	4718      	bx	r3
 80044f6:	bf00      	nop
 80044f8:	20001cc8 	.word	0x20001cc8
 80044fc:	20001ca4 	.word	0x20001ca4
 8004500:	20001cdc 	.word	0x20001cdc
 8004504:	20001ca8 	.word	0x20001ca8

08004508 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004508:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800450a:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <HAL_MspInit+0x38>)
 800450c:	2100      	movs	r1, #0
 800450e:	9100      	str	r1, [sp, #0]
 8004510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
 8004518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800451e:	9200      	str	r2, [sp, #0]
 8004520:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004522:	9101      	str	r1, [sp, #4]
 8004524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004526:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004536:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004538:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800453a:	f000 bd33 	b.w	8004fa4 <HAL_NVIC_SetPriorityGrouping>
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800

08004544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004544:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8004546:	6802      	ldr	r2, [r0, #0]
 8004548:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <HAL_ADC_MspInit+0x84>)
{
 800454a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800454c:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800454e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004550:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004554:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004558:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 800455a:	d001      	beq.n	8004560 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800455c:	b00b      	add	sp, #44	; 0x2c
 800455e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004560:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004564:	9401      	str	r4, [sp, #4]
 8004566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004568:	4818      	ldr	r0, [pc, #96]	; (80045cc <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800456a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800456e:	645a      	str	r2, [r3, #68]	; 0x44
 8004570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004572:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8004576:	9201      	str	r2, [sp, #4]
 8004578:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800457a:	9402      	str	r4, [sp, #8]
 800457c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457e:	f042 0204 	orr.w	r2, r2, #4
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
 8004584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004586:	f002 0204 	and.w	r2, r2, #4
 800458a:	9202      	str	r2, [sp, #8]
 800458c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800458e:	9403      	str	r4, [sp, #12]
 8004590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459a:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 80045a2:	2207      	movs	r2, #7
 80045a4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045a6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 80045a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ac:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045ae:	f000 fdcd 	bl	800514c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 80045b2:	2203      	movs	r2, #3
 80045b4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b6:	4806      	ldr	r0, [pc, #24]	; (80045d0 <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ba:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 80045bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c0:	f000 fdc4 	bl	800514c <HAL_GPIO_Init>
}
 80045c4:	b00b      	add	sp, #44	; 0x2c
 80045c6:	bd30      	pop	{r4, r5, pc}
 80045c8:	40012000 	.word	0x40012000
 80045cc:	40020800 	.word	0x40020800
 80045d0:	40020000 	.word	0x40020000

080045d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045d4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80045d6:	6801      	ldr	r1, [r0, #0]
 80045d8:	4a18      	ldr	r2, [pc, #96]	; (800463c <HAL_TIM_Base_MspInit+0x68>)
{
 80045da:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045dc:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 80045de:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80045e4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80045e8:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 80045ea:	d001      	beq.n	80045f0 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80045ec:	b009      	add	sp, #36	; 0x24
 80045ee:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045f0:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80045f8:	4811      	ldr	r0, [pc, #68]	; (8004640 <HAL_TIM_Base_MspInit+0x6c>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045fa:	f041 0101 	orr.w	r1, r1, #1
 80045fe:	6451      	str	r1, [r2, #68]	; 0x44
 8004600:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004602:	f001 0101 	and.w	r1, r1, #1
 8004606:	9100      	str	r1, [sp, #0]
 8004608:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6313      	str	r3, [r2, #48]	; 0x30
 8004614:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800461c:	2301      	movs	r3, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004620:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8004622:	2201      	movs	r2, #1
 8004624:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004626:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8004628:	2440      	movs	r4, #64	; 0x40
 800462a:	2502      	movs	r5, #2
 800462c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004630:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004634:	f000 fd8a 	bl	800514c <HAL_GPIO_Init>
}
 8004638:	b009      	add	sp, #36	; 0x24
 800463a:	bd30      	pop	{r4, r5, pc}
 800463c:	40010000 	.word	0x40010000
 8004640:	40020000 	.word	0x40020000

08004644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004644:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8004646:	6801      	ldr	r1, [r0, #0]
 8004648:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <HAL_TIM_MspPostInit+0x9c>)
{
 800464a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800464c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800464e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004650:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004654:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004658:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800465a:	d001      	beq.n	8004660 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800465c:	b008      	add	sp, #32
 800465e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004660:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004668:	481e      	ldr	r0, [pc, #120]	; (80046e4 <HAL_TIM_MspPostInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466a:	f041 0101 	orr.w	r1, r1, #1
 800466e:	6311      	str	r1, [r2, #48]	; 0x30
 8004670:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004672:	f001 0101 	and.w	r1, r1, #1
 8004676:	9100      	str	r1, [sp, #0]
 8004678:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800467e:	f043 0302 	orr.w	r3, r3, #2
 8004682:	6313      	str	r3, [r2, #48]	; 0x30
 8004684:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800468c:	2401      	movs	r4, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800468e:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004690:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	2302      	movs	r3, #2
 8004696:	2601      	movs	r6, #1
 8004698:	2702      	movs	r7, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 800469a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 800469c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046a0:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80046a4:	f000 fd52 	bl	800514c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80046a8:	2203      	movs	r2, #3
 80046aa:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ac:	a902      	add	r1, sp, #8
 80046ae:	480e      	ldr	r0, [pc, #56]	; (80046e8 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80046b0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80046b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80046b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80046ba:	f44f 66e0 	mov.w	r6, #1792	; 0x700
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046be:	f000 fd45 	bl	800514c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80046c2:	2702      	movs	r7, #2
 80046c4:	2202      	movs	r2, #2
 80046c6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c8:	4806      	ldr	r0, [pc, #24]	; (80046e4 <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80046ca:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046cc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80046ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80046d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d6:	f000 fd39 	bl	800514c <HAL_GPIO_Init>
}
 80046da:	b008      	add	sp, #32
 80046dc:	bdd0      	pop	{r4, r6, r7, pc}
 80046de:	bf00      	nop
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40020000 	.word	0x40020000
 80046e8:	40020400 	.word	0x40020400

080046ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046ec:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80046ee:	6802      	ldr	r2, [r0, #0]
 80046f0:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <HAL_UART_MspInit+0x78>)
{
 80046f2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f4:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 80046f6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80046fc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004700:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 8004702:	d001      	beq.n	8004708 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004704:	b008      	add	sp, #32
 8004706:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8004708:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800470c:	9400      	str	r4, [sp, #0]
 800470e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004710:	4815      	ldr	r0, [pc, #84]	; (8004768 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004712:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004716:	641a      	str	r2, [r3, #64]	; 0x40
 8004718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800471a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800471e:	9200      	str	r2, [sp, #0]
 8004720:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004722:	9401      	str	r4, [sp, #4]
 8004724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	631a      	str	r2, [r3, #48]	; 0x30
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004734:	220c      	movs	r2, #12
 8004736:	2302      	movs	r3, #2
 8004738:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800473e:	2303      	movs	r3, #3
 8004740:	2200      	movs	r2, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004742:	2507      	movs	r5, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004744:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004748:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800474a:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800474c:	f000 fcfe 	bl	800514c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004750:	4622      	mov	r2, r4
 8004752:	4621      	mov	r1, r4
 8004754:	2026      	movs	r0, #38	; 0x26
 8004756:	f000 fc39 	bl	8004fcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800475a:	2026      	movs	r0, #38	; 0x26
 800475c:	f000 fc6e 	bl	800503c <HAL_NVIC_EnableIRQ>
}
 8004760:	b008      	add	sp, #32
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	40004400 	.word	0x40004400
 8004768:	40020000 	.word	0x40020000

0800476c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <USART2_IRQHandler+0x8>)
 800476e:	f001 bd1d 	b.w	80061ac <HAL_UART_IRQHandler>
 8004772:	bf00      	nop
 8004774:	2000086c 	.word	0x2000086c

08004778 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <ADC_IRQHandler+0x18>)
 800477a:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 800477c:	0752      	lsls	r2, r2, #29
 800477e:	d400      	bmi.n	8004782 <ADC_IRQHandler+0xa>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004780:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	f022 020c 	bic.w	r2, r2, #12
 8004788:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 800478a:	f7fe b93f 	b.w	8002a0c <TSK_HighFrequencyTask>
 800478e:	bf00      	nop
 8004790:	40012000 	.word	0x40012000

08004794 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8004794:	4804      	ldr	r0, [pc, #16]	; (80047a8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004796:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800479a:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800479c:	f06f 0201 	mvn.w	r2, #1
 80047a0:	611a      	str	r2, [r3, #16]
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80047a2:	f002 be1d 	b.w	80073e0 <R3_1_TIMx_UP_IRQHandler>
 80047a6:	bf00      	nop
 80047a8:	20000274 	.word	0x20000274

080047ac <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80047ac:	4808      	ldr	r0, [pc, #32]	; (80047d0 <TIM1_BRK_TIM9_IRQHandler+0x24>)
{
 80047ae:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80047b0:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80047b4:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	0612      	lsls	r2, r2, #24
 80047ba:	d504      	bpl.n	80047c6 <TIM1_BRK_TIM9_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80047bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047c0:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 80047c2:	f002 fe2f 	bl	8007424 <R3_1_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80047c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80047ca:	f7fe b8d7 	b.w	800297c <MC_Scheduler>
 80047ce:	bf00      	nop
 80047d0:	20000274 	.word	0x20000274

080047d4 <DMA1_Stream5_IRQHandler>:
  WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream) );
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Stream )
{
  register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <DMA1_Stream5_IRQHandler+0x18>)
  return ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) ) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	051b      	lsls	r3, r3, #20
 80047da:	d400      	bmi.n	80047de <DMA1_Stream5_IRQHandler+0xa>
  }
  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

}
 80047dc:	4770      	bx	lr
  register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 80047de:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <DMA1_Stream5_IRQHandler+0x1c>)
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80047e0:	4804      	ldr	r0, [pc, #16]	; (80047f4 <DMA1_Stream5_IRQHandler+0x20>)
  WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 80047e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047e6:	605a      	str	r2, [r3, #4]
 80047e8:	f7fc be90 	b.w	800150c <ASPEP_HWDataReceivedIT>
 80047ec:	40026000 	.word	0x40026000
 80047f0:	40026008 	.word	0x40026008
 80047f4:	200005d8 	.word	0x200005d8

080047f8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80047f8:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80047fa:	f7fe fa4d 	bl	8002c98 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80047fe:	e7fe      	b.n	80047fe <HardFault_Handler+0x6>

08004800 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004800:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004802:	4c0a      	ldr	r4, [pc, #40]	; (800482c <SysTick_Handler+0x2c>)
 8004804:	7823      	ldrb	r3, [r4, #0]
 8004806:	2b02      	cmp	r3, #2
 8004808:	d006      	beq.n	8004818 <SysTick_Handler+0x18>
 800480a:	3301      	adds	r3, #1
 800480c:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800480e:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8004810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004814:	f7fe ba34 	b.w	8002c80 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8004818:	f000 f962 	bl	8004ae0 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800481c:	f000 fc38 	bl	8005090 <HAL_SYSTICK_IRQHandler>
 8004820:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8004822:	7023      	strb	r3, [r4, #0]
}
 8004824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004828:	f7fe ba2a 	b.w	8002c80 <MC_RunMotorControlTasks>
 800482c:	20000654 	.word	0x20000654

08004830 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <EXTI15_10_IRQHandler+0x14>)
 8004832:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8004834:	0492      	lsls	r2, r2, #18
 8004836:	d400      	bmi.n	800483a <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

}
 8004838:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800483a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800483e:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8004840:	f7fe ba3a 	b.w	8002cb8 <UI_HandleStartStopButton_cb>
 8004844:	40013c00 	.word	0x40013c00

08004848 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004848:	2001      	movs	r0, #1
 800484a:	4770      	bx	lr

0800484c <_kill>:

int _kill(int pid, int sig)
{
 800484c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800484e:	f003 fe71 	bl	8008534 <__errno>
 8004852:	2316      	movs	r3, #22
 8004854:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004856:	f04f 30ff 	mov.w	r0, #4294967295
 800485a:	bd08      	pop	{r3, pc}

0800485c <_exit>:

void _exit (int status)
{
 800485c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800485e:	f003 fe69 	bl	8008534 <__errno>
 8004862:	2316      	movs	r3, #22
 8004864:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004866:	e7fe      	b.n	8004866 <_exit+0xa>

08004868 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004868:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800486a:	1e16      	subs	r6, r2, #0
 800486c:	dd07      	ble.n	800487e <_read+0x16>
 800486e:	460c      	mov	r4, r1
 8004870:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8004872:	f3af 8000 	nop.w
 8004876:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800487a:	42a5      	cmp	r5, r4
 800487c:	d1f9      	bne.n	8004872 <_read+0xa>
	}

return len;
}
 800487e:	4630      	mov	r0, r6
 8004880:	bd70      	pop	{r4, r5, r6, pc}
 8004882:	bf00      	nop

08004884 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004884:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004886:	1e16      	subs	r6, r2, #0
 8004888:	dd07      	ble.n	800489a <_write+0x16>
 800488a:	460c      	mov	r4, r1
 800488c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800488e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004892:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004896:	42ac      	cmp	r4, r5
 8004898:	d1f9      	bne.n	800488e <_write+0xa>
	}
	return len;
}
 800489a:	4630      	mov	r0, r6
 800489c:	bd70      	pop	{r4, r5, r6, pc}
 800489e:	bf00      	nop

080048a0 <_close>:

int _close(int file)
{
	return -1;
}
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop

080048a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80048a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048ac:	604b      	str	r3, [r1, #4]
	return 0;
}
 80048ae:	2000      	movs	r0, #0
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop

080048b4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80048b4:	2001      	movs	r0, #1
 80048b6:	4770      	bx	lr

080048b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80048b8:	2000      	movs	r0, #0
 80048ba:	4770      	bx	lr

080048bc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80048bc:	490c      	ldr	r1, [pc, #48]	; (80048f0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048be:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80048c0:	680b      	ldr	r3, [r1, #0]
{
 80048c2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048c4:	4c0c      	ldr	r4, [pc, #48]	; (80048f8 <_sbrk+0x3c>)
 80048c6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80048c8:	b12b      	cbz	r3, 80048d6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048ca:	4418      	add	r0, r3
 80048cc:	4290      	cmp	r0, r2
 80048ce:	d807      	bhi.n	80048e0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80048d0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80048d6:	4b09      	ldr	r3, [pc, #36]	; (80048fc <_sbrk+0x40>)
 80048d8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80048da:	4418      	add	r0, r3
 80048dc:	4290      	cmp	r0, r2
 80048de:	d9f7      	bls.n	80048d0 <_sbrk+0x14>
    errno = ENOMEM;
 80048e0:	f003 fe28 	bl	8008534 <__errno>
 80048e4:	230c      	movs	r3, #12
 80048e6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80048e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd10      	pop	{r4, pc}
 80048f0:	2000085c 	.word	0x2000085c
 80048f4:	20018000 	.word	0x20018000
 80048f8:	00000400 	.word	0x00000400
 80048fc:	20001cf8 	.word	0x20001cf8

08004900 <UASPEP_INIT>:
}

void UASPEP_DAMCONFIG_TX (UASPEP_Handle_t *pHandle)
{
/* Enable DMA UART */
 LL_USART_ClearFlag_TC (pHandle->USARTx);
 8004900:	6803      	ldr	r3, [r0, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8004902:	461a      	mov	r2, r3
 8004904:	f06f 0140 	mvn.w	r1, #64	; 0x40
{
 8004908:	b4f0      	push	{r4, r5, r6, r7}
 800490a:	f842 1b0c 	str.w	r1, [r2], #12
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	e852 1f00 	ldrex	r1, [r2]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004912:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	e842 1400 	strex	r4, r1, [r2]
 800491a:	2c00      	cmp	r4, #0
 800491c:	d1f7      	bne.n	800490e <UASPEP_INIT+0xe>
  * @brief  Enable DMA Mode for transmission
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
 800491e:	f103 0114 	add.w	r1, r3, #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	e851 2f00 	ldrex	r2, [r1]
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004926:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	e841 2400 	strex	r4, r2, [r1]
 800492e:	2c00      	cmp	r4, #0
 8004930:	d1f7      	bne.n	8004922 <UASPEP_INIT+0x22>
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8004932:	6902      	ldr	r2, [r0, #16]
 8004934:	4d16      	ldr	r5, [pc, #88]	; (8004990 <UASPEP_INIT+0x90>)
 8004936:	6881      	ldr	r1, [r0, #8]
 8004938:	5cac      	ldrb	r4, [r5, r2]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800493a:	68c6      	ldr	r6, [r0, #12]
 800493c:	6842      	ldr	r2, [r0, #4]
 800493e:	5dae      	ldrb	r6, [r5, r6]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8004940:	440c      	add	r4, r1
/* Enable DMA UART to start the TX request */
 LL_USART_EnableDMAReq_TX (pHandle->USARTx);

/* Write the USART_TDR register address in the DMA control register to configure it as
the destination of the transfer. */
  LL_DMA_SetPeriphAddress ( pHandle->txDMA, pHandle->txChannel , ( uint32_t ) &pHandle->USARTx->DR );
 8004942:	1d1f      	adds	r7, r3, #4
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8004944:	4619      	mov	r1, r3
 8004946:	60a7      	str	r7, [r4, #8]
 8004948:	f06f 0440 	mvn.w	r4, #64	; 0x40
 800494c:	f841 4b14 	str.w	r4, [r1], #20
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8004950:	5994      	ldr	r4, [r2, r6]
 8004952:	f044 0410 	orr.w	r4, r4, #16
 8004956:	5194      	str	r4, [r2, r6]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	e851 4f00 	ldrex	r4, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800495c:	f044 0401 	orr.w	r4, r4, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	e841 4600 	strex	r6, r4, [r1]
 8004964:	2e00      	cmp	r6, #0
 8004966:	d1f7      	bne.n	8004958 <UASPEP_INIT+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8004968:	68c1      	ldr	r1, [r0, #12]
 800496a:	5c68      	ldrb	r0, [r5, r1]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800496c:	4619      	mov	r1, r3
 800496e:	4402      	add	r2, r0
  /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
 LL_USART_EnableIT_ERROR (pHandle->USARTx);

/* Write the USART_RDR register address in the DMA control register to configure it as
the source of the transfer. */
 LL_DMA_SetPeriphAddress ( pHandle->rxDMA, pHandle->rxChannel , ( uint32_t ) &pHandle->USARTx->DR );
 8004970:	3304      	adds	r3, #4
 8004972:	f06f 0040 	mvn.w	r0, #64	; 0x40
 8004976:	6093      	str	r3, [r2, #8]
 8004978:	f841 0b14 	str.w	r0, [r1], #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	e841 3200 	strex	r2, r3, [r1]
 8004988:	2a00      	cmp	r2, #0
 800498a:	d1f7      	bne.n	800497c <UASPEP_INIT+0x7c>
}
 800498c:	bcf0      	pop	{r4, r5, r6, r7}
 800498e:	4770      	bx	lr
 8004990:	0800b788 	.word	0x0800b788

08004994 <UASPEP_SEND_PACKET>:

 LL_USART_EnableDMAReq_RX (pHandle->USARTx);
}

bool UASPEP_SEND_PACKET (void *pHWHandle, void *data, uint16_t length)
{
 8004994:	b4f0      	push	{r4, r5, r6, r7}
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8004996:	4f19      	ldr	r7, [pc, #100]	; (80049fc <UASPEP_SEND_PACKET+0x68>)
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  bool result;
  if ( LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel) )
 8004998:	6905      	ldr	r5, [r0, #16]
 800499a:	6884      	ldr	r4, [r0, #8]
 800499c:	5d7b      	ldrb	r3, [r7, r5]
 800499e:	58e6      	ldr	r6, [r4, r3]
 80049a0:	07f6      	lsls	r6, r6, #31
 80049a2:	4423      	add	r3, r4
 80049a4:	d41a      	bmi.n	80049dc <UASPEP_SEND_PACKET+0x48>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80049a6:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80049a8:	6859      	ldr	r1, [r3, #4]
 80049aa:	0c09      	lsrs	r1, r1, #16
 80049ac:	0409      	lsls	r1, r1, #16
  register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 80049ae:	2d03      	cmp	r5, #3
 80049b0:	ea42 0201 	orr.w	r2, r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	f104 0308 	add.w	r3, r4, #8
  WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 80049ba:	bf88      	it	hi
 80049bc:	f104 030c 	addhi.w	r3, r4, #12
 80049c0:	f015 0503 	ands.w	r5, r5, #3
 80049c4:	d10d      	bne.n	80049e2 <UASPEP_SEND_PACKET+0x4e>
 80049c6:	2220      	movs	r2, #32
 80049c8:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80049ca:	6903      	ldr	r3, [r0, #16]
 80049cc:	5cfa      	ldrb	r2, [r7, r3]
 80049ce:	58a3      	ldr	r3, [r4, r2]
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	50a3      	str	r3, [r4, r2]
  else {
    LL_DMA_SetMemoryAddress( pHandle->txDMA, pHandle->txChannel, (uint32_t) data );
    LL_DMA_SetDataLength( pHandle->txDMA, pHandle->txChannel, length );
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel) ;
    LL_DMA_EnableStream( pHandle->txDMA, pHandle->txChannel );
   result = true;
 80049d6:	2001      	movs	r0, #1
  }
  return result;
}
 80049d8:	bcf0      	pop	{r4, r5, r6, r7}
 80049da:	4770      	bx	lr
    result = false;
 80049dc:	2000      	movs	r0, #0
}
 80049de:	bcf0      	pop	{r4, r5, r6, r7}
 80049e0:	4770      	bx	lr
 80049e2:	2d01      	cmp	r5, #1
 80049e4:	d006      	beq.n	80049f4 <UASPEP_SEND_PACKET+0x60>
 80049e6:	2d02      	cmp	r5, #2
 80049e8:	bf0c      	ite	eq
 80049ea:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 80049ee:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 80049f2:	e7e9      	b.n	80049c8 <UASPEP_SEND_PACKET+0x34>
 80049f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049f8:	e7e6      	b.n	80049c8 <UASPEP_SEND_PACKET+0x34>
 80049fa:	bf00      	nop
 80049fc:	0800b788 	.word	0x0800b788

08004a00 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER (void *pHWHandle, void* buffer, uint16_t length)
{
 8004a00:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8004a02:	68c3      	ldr	r3, [r0, #12]
 8004a04:	4d07      	ldr	r5, [pc, #28]	; (8004a24 <UASPEP_RECEIVE_BUFFER+0x24>)
 8004a06:	6844      	ldr	r4, [r0, #4]
 8004a08:	5ce8      	ldrb	r0, [r5, r3]
 8004a0a:	1825      	adds	r5, r4, r0
 8004a0c:	60e9      	str	r1, [r5, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8004a0e:	686b      	ldr	r3, [r5, #4]
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	041b      	lsls	r3, r3, #16
 8004a14:	431a      	orrs	r2, r3
 8004a16:	606a      	str	r2, [r5, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8004a18:	5823      	ldr	r3, [r4, r0]
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	5023      	str	r3, [r4, r0]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
  LL_DMA_SetMemoryAddress( pHandle->rxDMA, pHandle->rxChannel, (uint32_t) buffer );
  LL_DMA_SetDataLength(  pHandle->rxDMA, pHandle->rxChannel, length );
  LL_DMA_EnableStream(  pHandle->rxDMA, pHandle->rxChannel );
}
 8004a20:	bc30      	pop	{r4, r5}
 8004a22:	4770      	bx	lr
 8004a24:	0800b788 	.word	0x0800b788

08004a28 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE (void *pHWHandle)
{
   UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *) pHWHandle;
   LL_USART_ClearFlag_IDLE (pHandle->USARTx);
 8004a28:	6802      	ldr	r2, [r0, #0]
{
 8004a2a:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8004a2c:	6813      	ldr	r3, [r2, #0]
 8004a2e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004a30:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8004a32:	6853      	ldr	r3, [r2, #4]
 8004a34:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004a36:	9b01      	ldr	r3, [sp, #4]
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
 8004a38:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004a3e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	e842 3100 	strex	r1, r3, [r2]
 8004a46:	2900      	cmp	r1, #0
 8004a48:	d1f7      	bne.n	8004a3a <UASPEP_IDLE_ENABLE+0x12>
   LL_USART_EnableIT_IDLE (pHandle->USARTx);
}
 8004a4a:	b002      	add	sp, #8
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop

08004a50 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a50:	4a03      	ldr	r2, [pc, #12]	; (8004a60 <SystemInit+0x10>)
 8004a52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a5e:	4770      	bx	lr
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a64:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a66:	4a0e      	ldr	r2, [pc, #56]	; (8004aa0 <HAL_InitTick+0x3c>)
 8004a68:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <HAL_InitTick+0x40>)
 8004a6a:	7812      	ldrb	r2, [r2, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
{
 8004a6e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a74:	fbb0 f0f2 	udiv	r0, r0, r2
 8004a78:	fbb3 f0f0 	udiv	r0, r3, r0
 8004a7c:	f000 faec 	bl	8005058 <HAL_SYSTICK_Config>
 8004a80:	b908      	cbnz	r0, 8004a86 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a82:	2d0f      	cmp	r5, #15
 8004a84:	d901      	bls.n	8004a8a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8004a86:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004a88:	bd38      	pop	{r3, r4, r5, pc}
 8004a8a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4629      	mov	r1, r5
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	f000 fa9a 	bl	8004fcc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <HAL_InitTick+0x44>)
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	601d      	str	r5, [r3, #0]
}
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
 8004aa0:	2000065c 	.word	0x2000065c
 8004aa4:	20000658 	.word	0x20000658
 8004aa8:	20000660 	.word	0x20000660

08004aac <HAL_Init>:
{
 8004aac:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_Init+0x30>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ab6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004abe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ac8:	2003      	movs	r0, #3
 8004aca:	f000 fa6b 	bl	8004fa4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ace:	2004      	movs	r0, #4
 8004ad0:	f7ff ffc8 	bl	8004a64 <HAL_InitTick>
  HAL_MspInit();
 8004ad4:	f7ff fd18 	bl	8004508 <HAL_MspInit>
}
 8004ad8:	2000      	movs	r0, #0
 8004ada:	bd08      	pop	{r3, pc}
 8004adc:	40023c00 	.word	0x40023c00

08004ae0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004ae0:	4a03      	ldr	r2, [pc, #12]	; (8004af0 <HAL_IncTick+0x10>)
 8004ae2:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <HAL_IncTick+0x14>)
 8004ae4:	6811      	ldr	r1, [r2, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	440b      	add	r3, r1
 8004aea:	6013      	str	r3, [r2, #0]
}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20001ce0 	.word	0x20001ce0
 8004af4:	2000065c 	.word	0x2000065c

08004af8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004af8:	4b01      	ldr	r3, [pc, #4]	; (8004b00 <HAL_GetTick+0x8>)
 8004afa:	6818      	ldr	r0, [r3, #0]
}
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20001ce0 	.word	0x20001ce0

08004b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004b08:	f7ff fff6 	bl	8004af8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b0c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004b0e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004b10:	d002      	beq.n	8004b18 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b12:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <HAL_Delay+0x20>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b18:	f7ff ffee 	bl	8004af8 <HAL_GetTick>
 8004b1c:	1b43      	subs	r3, r0, r5
 8004b1e:	42a3      	cmp	r3, r4
 8004b20:	d3fa      	bcc.n	8004b18 <HAL_Delay+0x14>
  {
  }
}
 8004b22:	bd38      	pop	{r3, r4, r5, pc}
 8004b24:	2000065c 	.word	0x2000065c

08004b28 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	f000 80a0 	beq.w	8004c6e <HAL_ADC_Init+0x146>
{
 8004b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b30:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004b32:	4604      	mov	r4, r0
 8004b34:	b13d      	cbz	r5, 8004b46 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b38:	06db      	lsls	r3, r3, #27
 8004b3a:	d50c      	bpl.n	8004b56 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8004b42:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8004b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8004b46:	f7ff fcfd 	bl	8004544 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004b4a:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8004b4e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b52:	06db      	lsls	r3, r3, #27
 8004b54:	d4f2      	bmi.n	8004b3c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8004b56:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b58:	4948      	ldr	r1, [pc, #288]	; (8004c7c <HAL_ADC_Init+0x154>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b5a:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b5c:	4d48      	ldr	r5, [pc, #288]	; (8004c80 <HAL_ADC_Init+0x158>)
    ADC_STATE_CLR_SET(hadc->State,
 8004b5e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8004b62:	f022 0202 	bic.w	r2, r2, #2
 8004b66:	f042 0202 	orr.w	r2, r2, #2
 8004b6a:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b6c:	684a      	ldr	r2, [r1, #4]
 8004b6e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004b72:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b74:	684a      	ldr	r2, [r1, #4]
 8004b76:	6860      	ldr	r0, [r4, #4]
 8004b78:	4302      	orrs	r2, r0
 8004b7a:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b7c:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b7e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b80:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b82:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b84:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8004b88:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b92:	6858      	ldr	r0, [r3, #4]
 8004b94:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8004b98:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b9a:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b9c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b9e:	4339      	orrs	r1, r7
 8004ba0:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ba2:	6899      	ldr	r1, [r3, #8]
 8004ba4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8004ba8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004baa:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bac:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004bae:	ea42 0206 	orr.w	r2, r2, r6
 8004bb2:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bb4:	d052      	beq.n	8004c5c <HAL_ADC_Init+0x134>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bb6:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004bb8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bba:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8004bbe:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	4310      	orrs	r0, r2
 8004bc4:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bc6:	6899      	ldr	r1, [r3, #8]
 8004bc8:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004bcc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	432a      	orrs	r2, r5
 8004bd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	f022 0202 	bic.w	r2, r2, #2
 8004bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	7e21      	ldrb	r1, [r4, #24]
 8004be0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004be4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004be6:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	d041      	beq.n	8004c72 <HAL_ADC_Init+0x14a>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004bee:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004bf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bf6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	3901      	subs	r1, #1
 8004c04:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8004c08:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c0c:	69e0      	ldr	r0, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c0e:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c10:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c18:	3801      	subs	r0, #1
 8004c1a:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
 8004c1e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c20:	6899      	ldr	r1, [r3, #8]
 8004c22:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004c26:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c28:	6899      	ldr	r1, [r3, #8]
 8004c2a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8004c2e:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8004c32:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c34:	6899      	ldr	r1, [r3, #8]
 8004c36:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004c3a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c3c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004c3e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c40:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8004c44:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004c46:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c4a:	f023 0303 	bic.w	r3, r3, #3
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004c54:	2300      	movs	r3, #0
 8004c56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c6a:	609a      	str	r2, [r3, #8]
 8004c6c:	e7b2      	b.n	8004bd4 <HAL_ADC_Init+0xac>
    return HAL_ERROR;
 8004c6e:	2001      	movs	r0, #1
}
 8004c70:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	e7c6      	b.n	8004c0a <HAL_ADC_Init+0xe2>
 8004c7c:	40012300 	.word	0x40012300
 8004c80:	0f000001 	.word	0x0f000001

08004c84 <HAL_ADC_ConfigChannel>:
{
 8004c84:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8004c86:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004c8a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8004c8c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004c8e:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8004c90:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004c92:	f000 8094 	beq.w	8004dbe <HAL_ADC_ConfigChannel+0x13a>
 8004c96:	2301      	movs	r3, #1
 8004c98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c9c:	680d      	ldr	r5, [r1, #0]
 8004c9e:	2d09      	cmp	r5, #9
 8004ca0:	d829      	bhi.n	8004cf6 <HAL_ADC_ConfigChannel+0x72>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ca2:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ca4:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ca6:	6922      	ldr	r2, [r4, #16]
 8004ca8:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8004cac:	2607      	movs	r6, #7
 8004cae:	40be      	lsls	r6, r7
 8004cb0:	ea22 0206 	bic.w	r2, r2, r6
 8004cb4:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004cb6:	6922      	ldr	r2, [r4, #16]
 8004cb8:	40bb      	lsls	r3, r7
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7U)
 8004cbe:	684b      	ldr	r3, [r1, #4]
 8004cc0:	2b06      	cmp	r3, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004cc2:	462e      	mov	r6, r5
  if (sConfig->Rank < 7U)
 8004cc4:	d82c      	bhi.n	8004d20 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004cc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004cca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004ccc:	3b05      	subs	r3, #5
 8004cce:	211f      	movs	r1, #31
 8004cd0:	4099      	lsls	r1, r3
 8004cd2:	ea22 0201 	bic.w	r2, r2, r1
 8004cd6:	6362      	str	r2, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004cd8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004cda:	fa06 f303 	lsl.w	r3, r6, r3
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ce2:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <HAL_ADC_ConfigChannel+0x144>)
 8004ce4:	429c      	cmp	r4, r3
 8004ce6:	d02f      	beq.n	8004d48 <HAL_ADC_ConfigChannel+0xc4>
  __HAL_UNLOCK(hadc);
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004cee:	4618      	mov	r0, r3
}
 8004cf0:	b002      	add	sp, #8
 8004cf2:	bcf0      	pop	{r4, r5, r6, r7}
 8004cf4:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004cf6:	6804      	ldr	r4, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004cf8:	688b      	ldr	r3, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004cfa:	68e7      	ldr	r7, [r4, #12]
 8004cfc:	b2ae      	uxth	r6, r5
 8004cfe:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004d02:	3a1e      	subs	r2, #30
 8004d04:	f04f 0c07 	mov.w	ip, #7
 8004d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8004d0c:	ea27 070c 	bic.w	r7, r7, ip
 8004d10:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d12:	68e7      	ldr	r7, [r4, #12]
 8004d14:	4093      	lsls	r3, r2
 8004d16:	433b      	orrs	r3, r7
 8004d18:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8004d1a:	684b      	ldr	r3, [r1, #4]
 8004d1c:	2b06      	cmp	r3, #6
 8004d1e:	d9d2      	bls.n	8004cc6 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	d837      	bhi.n	8004d94 <HAL_ADC_ConfigChannel+0x110>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d28:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8004d2c:	221f      	movs	r2, #31
 8004d2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d30:	408a      	lsls	r2, r1
 8004d32:	ea23 0302 	bic.w	r3, r3, r2
 8004d36:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d3a:	fa06 f101 	lsl.w	r1, r6, r1
 8004d3e:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d40:	4b21      	ldr	r3, [pc, #132]	; (8004dc8 <HAL_ADC_ConfigChannel+0x144>)
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d42:	6321      	str	r1, [r4, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d44:	429c      	cmp	r4, r3
 8004d46:	d1cf      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x64>
 8004d48:	2d12      	cmp	r5, #18
 8004d4a:	d032      	beq.n	8004db2 <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d4c:	f1a5 0310 	sub.w	r3, r5, #16
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d8c9      	bhi.n	8004ce8 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d54:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <HAL_ADC_ConfigChannel+0x148>)
 8004d56:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d58:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d5e:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d60:	d1c2      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x64>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d62:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_ADC_ConfigChannel+0x14c>)
 8004d64:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8004d6e:	f202 3283 	addw	r2, r2, #899	; 0x383
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	0c9b      	lsrs	r3, r3, #18
 8004d78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8004d80:	9b01      	ldr	r3, [sp, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0b0      	beq.n	8004ce8 <HAL_ADC_ConfigChannel+0x64>
        counter--;
 8004d86:	9b01      	ldr	r3, [sp, #4]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8004d8c:	9b01      	ldr	r3, [sp, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f9      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x102>
 8004d92:	e7a9      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d94:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004d98:	3a41      	subs	r2, #65	; 0x41
 8004d9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d9c:	211f      	movs	r1, #31
 8004d9e:	4091      	lsls	r1, r2
 8004da0:	ea23 0301 	bic.w	r3, r3, r1
 8004da4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004da6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004da8:	fa06 f102 	lsl.w	r1, r6, r2
 8004dac:	4319      	orrs	r1, r3
 8004dae:	62e1      	str	r1, [r4, #44]	; 0x2c
 8004db0:	e797      	b.n	8004ce2 <HAL_ADC_ConfigChannel+0x5e>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004db2:	4a06      	ldr	r2, [pc, #24]	; (8004dcc <HAL_ADC_ConfigChannel+0x148>)
 8004db4:	6853      	ldr	r3, [r2, #4]
 8004db6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004dba:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004dbc:	e794      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x64>
  __HAL_LOCK(hadc);
 8004dbe:	2002      	movs	r0, #2
}
 8004dc0:	b002      	add	sp, #8
 8004dc2:	bcf0      	pop	{r4, r5, r6, r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40012000 	.word	0x40012000
 8004dcc:	40012300 	.word	0x40012300
 8004dd0:	20000658 	.word	0x20000658

08004dd4 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dd6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004dda:	698f      	ldr	r7, [r1, #24]
  __HAL_LOCK(hadc);
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	f000 80d9 	beq.w	8004f94 <HAL_ADCEx_InjectedConfigChannel+0x1c0>
 8004de2:	2301      	movs	r3, #1
 8004de4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004de8:	680e      	ldr	r6, [r1, #0]
 8004dea:	2e09      	cmp	r6, #9
 8004dec:	d870      	bhi.n	8004ed0 <HAL_ADCEx_InjectedConfigChannel+0xfc>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004dee:	6803      	ldr	r3, [r0, #0]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004df0:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004df2:	691c      	ldr	r4, [r3, #16]
 8004df4:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8004df8:	2507      	movs	r5, #7
 8004dfa:	fa05 f50c 	lsl.w	r5, r5, ip
 8004dfe:	ea24 0405 	bic.w	r4, r4, r5
 8004e02:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004e04:	691c      	ldr	r4, [r3, #16]
 8004e06:	fa02 f20c 	lsl.w	r2, r2, ip
 8004e0a:	4322      	orrs	r2, r4
 8004e0c:	611a      	str	r2, [r3, #16]
 8004e0e:	4634      	mov	r4, r6
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004e12:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004e16:	684d      	ldr	r5, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004e18:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e20:	f10e 3cff 	add.w	ip, lr, #4294967295
 8004e24:	ea42 5c0c 	orr.w	ip, r2, ip, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004e28:	1cea      	adds	r2, r5, #3
 8004e2a:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004e2e:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
 8004e38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004e3c:	f04f 0e1f 	mov.w	lr, #31
 8004e40:	fa0e fe02 	lsl.w	lr, lr, r2
 8004e44:	ea2c 0c0e 	bic.w	ip, ip, lr
 8004e48:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004e4c:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004e50:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8004fa0 <HAL_ADCEx_InjectedConfigChannel+0x1cc>
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004e54:	fa04 f202 	lsl.w	r2, r4, r2
 8004e58:	ea42 020e 	orr.w	r2, r2, lr
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004e5c:	4567      	cmp	r7, ip
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004e5e:	639a      	str	r2, [r3, #56]	; 0x38
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004e60:	d072      	beq.n	8004f48 <HAL_ADCEx_InjectedConfigChannel+0x174>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004e62:	689c      	ldr	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004e64:	f8d1 c01c 	ldr.w	ip, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004e68:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
 8004e6c:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	4317      	orrs	r7, r2
 8004e72:	609f      	str	r7, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004e74:	689c      	ldr	r4, [r3, #8]
 8004e76:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8004e7a:	609c      	str	r4, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	ea42 020c 	orr.w	r2, r2, ip
 8004e82:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004e84:	7d4a      	ldrb	r2, [r1, #21]
 8004e86:	2a00      	cmp	r2, #0
 8004e88:	d039      	beq.n	8004efe <HAL_ADCEx_InjectedConfigChannel+0x12a>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e90:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004e92:	7d0a      	ldrb	r2, [r1, #20]
 8004e94:	2a00      	cmp	r2, #0
 8004e96:	d039      	beq.n	8004f0c <HAL_ADCEx_InjectedConfigChannel+0x138>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004e98:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8004e9a:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004e9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ea0:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8004ea2:	d039      	beq.n	8004f18 <HAL_ADCEx_InjectedConfigChannel+0x144>
 8004ea4:	2d03      	cmp	r5, #3
 8004ea6:	d063      	beq.n	8004f70 <HAL_ADCEx_InjectedConfigChannel+0x19c>
 8004ea8:	2d01      	cmp	r5, #1
 8004eaa:	d056      	beq.n	8004f5a <HAL_ADCEx_InjectedConfigChannel+0x186>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004eac:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004eae:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004eb0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004eb4:	f022 020f 	bic.w	r2, r2, #15
 8004eb8:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004eba:	6a1a      	ldr	r2, [r3, #32]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004ec0:	4a35      	ldr	r2, [pc, #212]	; (8004f98 <HAL_ADCEx_InjectedConfigChannel+0x1c4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d035      	beq.n	8004f32 <HAL_ADCEx_InjectedConfigChannel+0x15e>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ecc:	4618      	mov	r0, r3
}
 8004ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004ed0:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004ed2:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004ed4:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8004ed8:	b2b4      	uxth	r4, r6
 8004eda:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8004ede:	3d1e      	subs	r5, #30
 8004ee0:	f04f 0e07 	mov.w	lr, #7
 8004ee4:	fa0e fe05 	lsl.w	lr, lr, r5
 8004ee8:	ea2c 0c0e 	bic.w	ip, ip, lr
 8004eec:	f8c3 c00c 	str.w	ip, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004ef0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8004ef4:	40aa      	lsls	r2, r5
 8004ef6:	ea42 020c 	orr.w	r2, r2, ip
 8004efa:	60da      	str	r2, [r3, #12]
 8004efc:	e788      	b.n	8004e10 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f04:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004f06:	7d0a      	ldrb	r2, [r1, #20]
 8004f08:	2a00      	cmp	r2, #0
 8004f0a:	d1c5      	bne.n	8004e98 <HAL_ADCEx_InjectedConfigChannel+0xc4>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004f0c:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8004f0e:	2d02      	cmp	r5, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004f10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f14:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8004f16:	d1c5      	bne.n	8004ea4 <HAL_ADCEx_InjectedConfigChannel+0xd0>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004f18:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004f1a:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004f1c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004f20:	f022 020f 	bic.w	r2, r2, #15
 8004f24:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004f26:	699a      	ldr	r2, [r3, #24]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004f2c:	4a1a      	ldr	r2, [pc, #104]	; (8004f98 <HAL_ADCEx_InjectedConfigChannel+0x1c4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d1c9      	bne.n	8004ec6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8004f32:	2e12      	cmp	r6, #18
 8004f34:	d027      	beq.n	8004f86 <HAL_ADCEx_InjectedConfigChannel+0x1b2>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004f36:	3e10      	subs	r6, #16
 8004f38:	2e01      	cmp	r6, #1
 8004f3a:	d8c4      	bhi.n	8004ec6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f3c:	4a17      	ldr	r2, [pc, #92]	; (8004f9c <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 8004f3e:	6853      	ldr	r3, [r2, #4]
 8004f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f44:	6053      	str	r3, [r2, #4]
 8004f46:	e7be      	b.n	8004ec6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8004f4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	e794      	b.n	8004e84 <HAL_ADCEx_InjectedConfigChannel+0xb0>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004f5a:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004f5c:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004f5e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004f62:	f022 020f 	bic.w	r2, r2, #15
 8004f66:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	615a      	str	r2, [r3, #20]
      break;
 8004f6e:	e7a7      	b.n	8004ec0 <HAL_ADCEx_InjectedConfigChannel+0xec>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004f70:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004f72:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004f74:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004f78:	f022 020f 	bic.w	r2, r2, #15
 8004f7c:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	61da      	str	r2, [r3, #28]
      break;
 8004f84:	e79c      	b.n	8004ec0 <HAL_ADCEx_InjectedConfigChannel+0xec>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f86:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8004f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f8e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004f92:	e798      	b.n	8004ec6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __HAL_LOCK(hadc);
 8004f94:	2002      	movs	r0, #2
}
 8004f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f98:	40012000 	.word	0x40012000
 8004f9c:	40012300 	.word	0x40012300
 8004fa0:	000f0001 	.word	0x000f0001

08004fa4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fa4:	4908      	ldr	r1, [pc, #32]	; (8004fc8 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8004fa6:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa8:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004faa:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fac:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004fb0:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fb2:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8004fc4:	60cb      	str	r3, [r1, #12]
 8004fc6:	4770      	bx	lr
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fcc:	4b19      	ldr	r3, [pc, #100]	; (8005034 <HAL_NVIC_SetPriority+0x68>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fd4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fd6:	f1c3 0507 	rsb	r5, r3, #7
 8004fda:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fdc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe0:	bf28      	it	cs
 8004fe2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fe4:	2c06      	cmp	r4, #6
 8004fe6:	d919      	bls.n	800501c <HAL_NVIC_SetPriority+0x50>
 8004fe8:	3b03      	subs	r3, #3
 8004fea:	f04f 34ff 	mov.w	r4, #4294967295
 8004fee:	409c      	lsls	r4, r3
 8004ff0:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ff8:	40ac      	lsls	r4, r5
 8004ffa:	ea21 0104 	bic.w	r1, r1, r4
 8004ffe:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005000:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005002:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005006:	db0c      	blt.n	8005022 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005008:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800500c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005010:	0109      	lsls	r1, r1, #4
 8005012:	b2c9      	uxtb	r1, r1
 8005014:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005018:	bc30      	pop	{r4, r5}
 800501a:	4770      	bx	lr
 800501c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800501e:	4613      	mov	r3, r2
 8005020:	e7e8      	b.n	8004ff4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005022:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_NVIC_SetPriority+0x6c>)
 8005024:	f000 000f 	and.w	r0, r0, #15
 8005028:	0109      	lsls	r1, r1, #4
 800502a:	4403      	add	r3, r0
 800502c:	b2c9      	uxtb	r1, r1
 800502e:	7619      	strb	r1, [r3, #24]
 8005030:	bc30      	pop	{r4, r5}
 8005032:	4770      	bx	lr
 8005034:	e000ed00 	.word	0xe000ed00
 8005038:	e000ecfc 	.word	0xe000ecfc

0800503c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800503c:	2800      	cmp	r0, #0
 800503e:	db07      	blt.n	8005050 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005040:	f000 011f 	and.w	r1, r0, #31
 8005044:	4a03      	ldr	r2, [pc, #12]	; (8005054 <HAL_NVIC_EnableIRQ+0x18>)
 8005046:	0940      	lsrs	r0, r0, #5
 8005048:	2301      	movs	r3, #1
 800504a:	408b      	lsls	r3, r1
 800504c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	e000e100 	.word	0xe000e100

08005058 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005058:	3801      	subs	r0, #1
 800505a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800505e:	d20e      	bcs.n	800507e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005060:	4b08      	ldr	r3, [pc, #32]	; (8005084 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005062:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005064:	4c08      	ldr	r4, [pc, #32]	; (8005088 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005066:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005068:	20f0      	movs	r0, #240	; 0xf0
 800506a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800506e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005070:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005072:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005074:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8005076:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800507a:	6019      	str	r1, [r3, #0]
 800507c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800507e:	2001      	movs	r0, #1
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	e000e010 	.word	0xe000e010
 8005088:	e000ed00 	.word	0xe000ed00

0800508c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop

08005090 <HAL_SYSTICK_IRQHandler>:
{
 8005090:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8005092:	f7ff fffb 	bl	800508c <HAL_SYSTICK_Callback>
}
 8005096:	bd08      	pop	{r3, pc}

08005098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800509c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 800509e:	f7ff fd2b 	bl	8004af8 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050a2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d006      	beq.n	80050b8 <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050aa:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050ac:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80050ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050b2:	6562      	str	r2, [r4, #84]	; 0x54
    
    return HAL_ERROR;
 80050b4:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050b8:	6823      	ldr	r3, [r4, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	f022 0216 	bic.w	r2, r2, #22
 80050c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ca:	4605      	mov	r5, r0
 80050cc:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050ce:	b339      	cbz	r1, 8005120 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	f022 0208 	bic.w	r2, r2, #8
 80050d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050e0:	e005      	b.n	80050ee <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050e2:	f7ff fd09 	bl	8004af8 <HAL_GetTick>
 80050e6:	1b43      	subs	r3, r0, r5
 80050e8:	2b05      	cmp	r3, #5
 80050ea:	d80f      	bhi.n	800510c <HAL_DMA_Abort+0x74>
 80050ec:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f013 0301 	ands.w	r3, r3, #1
 80050f4:	d1f5      	bne.n	80050e2 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050f6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80050f8:	223f      	movs	r2, #63	; 0x3f
 80050fa:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 80050fc:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050fe:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 8005100:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005104:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  return HAL_OK;
 8005108:	4618      	mov	r0, r3
}
 800510a:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800510c:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800510e:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8005110:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005112:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005114:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005118:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 800511c:	4618      	mov	r0, r3
}
 800511e:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005120:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005122:	2a00      	cmp	r2, #0
 8005124:	d1d4      	bne.n	80050d0 <HAL_DMA_Abort+0x38>
 8005126:	e7d7      	b.n	80050d8 <HAL_DMA_Abort+0x40>

08005128 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005128:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800512c:	2b02      	cmp	r3, #2
 800512e:	d003      	beq.n	8005138 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8005134:	2001      	movs	r0, #1
 8005136:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005138:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800513a:	2305      	movs	r3, #5
 800513c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005140:	6813      	ldr	r3, [r2, #0]
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005148:	2000      	movs	r0, #0
}
 800514a:	4770      	bx	lr

0800514c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005150:	468b      	mov	fp, r1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005152:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8005320 <HAL_GPIO_Init+0x1d4>
 8005156:	6809      	ldr	r1, [r1, #0]
{
 8005158:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800515a:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800515c:	f04f 0a01 	mov.w	sl, #1
 8005160:	46d9      	mov	r9, fp
 8005162:	e002      	b.n	800516a <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005164:	3301      	adds	r3, #1
 8005166:	2b10      	cmp	r3, #16
 8005168:	d079      	beq.n	800525e <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 800516a:	fa0a f203 	lsl.w	r2, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800516e:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 8005172:	438a      	bics	r2, r1
 8005174:	d1f6      	bne.n	8005164 <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005176:	f8d9 5004 	ldr.w	r5, [r9, #4]
 800517a:	f005 0203 	and.w	r2, r5, #3
 800517e:	1e54      	subs	r4, r2, #1
 8005180:	2c01      	cmp	r4, #1
 8005182:	ea4f 0743 	mov.w	r7, r3, lsl #1
 8005186:	d96d      	bls.n	8005264 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005188:	2a03      	cmp	r2, #3
 800518a:	f040 80ab 	bne.w	80052e4 <HAL_GPIO_Init+0x198>
 800518e:	40ba      	lsls	r2, r7
 8005190:	43d4      	mvns	r4, r2
 8005192:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 8005194:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005196:	9c00      	ldr	r4, [sp, #0]
 8005198:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800519a:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800519c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80051a0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051a2:	d0df      	beq.n	8005164 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051a4:	4c59      	ldr	r4, [pc, #356]	; (800530c <HAL_GPIO_Init+0x1c0>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	9203      	str	r2, [sp, #12]
 80051aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80051ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b0:	6462      	str	r2, [r4, #68]	; 0x44
 80051b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80051b4:	f023 0603 	bic.w	r6, r3, #3
 80051b8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80051bc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80051c0:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80051c4:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051c6:	f003 0403 	and.w	r4, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ca:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80051cc:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051ce:	00a4      	lsls	r4, r4, #2
 80051d0:	220f      	movs	r2, #15
 80051d2:	40a2      	lsls	r2, r4
 80051d4:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051d8:	4f4d      	ldr	r7, [pc, #308]	; (8005310 <HAL_GPIO_Init+0x1c4>)
 80051da:	42b8      	cmp	r0, r7
 80051dc:	d014      	beq.n	8005208 <HAL_GPIO_Init+0xbc>
 80051de:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80051e2:	42b8      	cmp	r0, r7
 80051e4:	f000 8083 	beq.w	80052ee <HAL_GPIO_Init+0x1a2>
 80051e8:	4f4a      	ldr	r7, [pc, #296]	; (8005314 <HAL_GPIO_Init+0x1c8>)
 80051ea:	42b8      	cmp	r0, r7
 80051ec:	f000 8083 	beq.w	80052f6 <HAL_GPIO_Init+0x1aa>
 80051f0:	4f49      	ldr	r7, [pc, #292]	; (8005318 <HAL_GPIO_Init+0x1cc>)
 80051f2:	42b8      	cmp	r0, r7
 80051f4:	f000 8084 	beq.w	8005300 <HAL_GPIO_Init+0x1b4>
 80051f8:	4f48      	ldr	r7, [pc, #288]	; (800531c <HAL_GPIO_Init+0x1d0>)
 80051fa:	42b8      	cmp	r0, r7
 80051fc:	bf0c      	ite	eq
 80051fe:	2704      	moveq	r7, #4
 8005200:	2707      	movne	r7, #7
 8005202:	fa07 f404 	lsl.w	r4, r7, r4
 8005206:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005208:	60b2      	str	r2, [r6, #8]
        temp = EXTI->IMR;
 800520a:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 800520e:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005212:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8005214:	bf54      	ite	pl
 8005216:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8005218:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 800521c:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 8005220:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005224:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8005226:	bf54      	ite	pl
 8005228:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800522a:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 800522e:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005232:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005236:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8005238:	bf54      	ite	pl
 800523a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800523c:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 8005240:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 8005244:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005248:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 800524a:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 800524e:	bf54      	ite	pl
 8005250:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8005252:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005256:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8005258:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800525c:	d185      	bne.n	800516a <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 800525e:	b005      	add	sp, #20
 8005260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8005264:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005266:	2403      	movs	r4, #3
 8005268:	40bc      	lsls	r4, r7
 800526a:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800526e:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8005272:	40be      	lsls	r6, r7
 8005274:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8005278:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800527a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800527e:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005282:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005286:	409e      	lsls	r6, r3
 8005288:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800528c:	43e4      	mvns	r4, r4
 800528e:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 8005290:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8005292:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005294:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005298:	f8d9 6008 	ldr.w	r6, [r9, #8]
 800529c:	40be      	lsls	r6, r7
 800529e:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052a2:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80052a4:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052a6:	d001      	beq.n	80052ac <HAL_GPIO_Init+0x160>
 80052a8:	40ba      	lsls	r2, r7
 80052aa:	e773      	b.n	8005194 <HAL_GPIO_Init+0x48>
        temp = GPIOx->AFR[position >> 3U];
 80052ac:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80052b0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052b4:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80052b8:	f8d8 4020 	ldr.w	r4, [r8, #32]
 80052bc:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052be:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80052c2:	240f      	movs	r4, #15
 80052c4:	fa04 f60e 	lsl.w	r6, r4, lr
 80052c8:	9c01      	ldr	r4, [sp, #4]
 80052ca:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052ce:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052d2:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052d4:	fa04 f60e 	lsl.w	r6, r4, lr
 80052d8:	9c01      	ldr	r4, [sp, #4]
 80052da:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 80052dc:	40ba      	lsls	r2, r7
 80052de:	f8c8 6020 	str.w	r6, [r8, #32]
 80052e2:	e757      	b.n	8005194 <HAL_GPIO_Init+0x48>
 80052e4:	2403      	movs	r4, #3
 80052e6:	40bc      	lsls	r4, r7
 80052e8:	43e4      	mvns	r4, r4
 80052ea:	9400      	str	r4, [sp, #0]
 80052ec:	e7d1      	b.n	8005292 <HAL_GPIO_Init+0x146>
 80052ee:	fa0a f404 	lsl.w	r4, sl, r4
 80052f2:	4322      	orrs	r2, r4
 80052f4:	e788      	b.n	8005208 <HAL_GPIO_Init+0xbc>
 80052f6:	2702      	movs	r7, #2
 80052f8:	fa07 f404 	lsl.w	r4, r7, r4
 80052fc:	4322      	orrs	r2, r4
 80052fe:	e783      	b.n	8005208 <HAL_GPIO_Init+0xbc>
 8005300:	2703      	movs	r7, #3
 8005302:	fa07 f404 	lsl.w	r4, r7, r4
 8005306:	4322      	orrs	r2, r4
 8005308:	e77e      	b.n	8005208 <HAL_GPIO_Init+0xbc>
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
 8005310:	40020000 	.word	0x40020000
 8005314:	40020800 	.word	0x40020800
 8005318:	40020c00 	.word	0x40020c00
 800531c:	40021000 	.word	0x40021000
 8005320:	40013c00 	.word	0x40013c00

08005324 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005324:	b902      	cbnz	r2, 8005328 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005326:	0409      	lsls	r1, r1, #16
 8005328:	6181      	str	r1, [r0, #24]
  }
}
 800532a:	4770      	bx	lr

0800532c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800532c:	2800      	cmp	r0, #0
 800532e:	f000 81a5 	beq.w	800567c <HAL_RCC_OscConfig+0x350>
{
 8005332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005336:	6803      	ldr	r3, [r0, #0]
 8005338:	07dd      	lsls	r5, r3, #31
{
 800533a:	b082      	sub	sp, #8
 800533c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533e:	d52f      	bpl.n	80053a0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005340:	49ac      	ldr	r1, [pc, #688]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
 8005342:	688a      	ldr	r2, [r1, #8]
 8005344:	f002 020c 	and.w	r2, r2, #12
 8005348:	2a04      	cmp	r2, #4
 800534a:	f000 80ec 	beq.w	8005526 <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800534e:	688a      	ldr	r2, [r1, #8]
 8005350:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005354:	2a08      	cmp	r2, #8
 8005356:	f000 80e2 	beq.w	800551e <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800535a:	6863      	ldr	r3, [r4, #4]
 800535c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005360:	f000 80eb 	beq.w	800553a <HAL_RCC_OscConfig+0x20e>
 8005364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005368:	f000 8178 	beq.w	800565c <HAL_RCC_OscConfig+0x330>
 800536c:	4da1      	ldr	r5, [pc, #644]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
 800536e:	682a      	ldr	r2, [r5, #0]
 8005370:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005374:	602a      	str	r2, [r5, #0]
 8005376:	682a      	ldr	r2, [r5, #0]
 8005378:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800537c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800537e:	2b00      	cmp	r3, #0
 8005380:	f040 80e0 	bne.w	8005544 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7ff fbb8 	bl	8004af8 <HAL_GetTick>
 8005388:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800538a:	e005      	b.n	8005398 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800538c:	f7ff fbb4 	bl	8004af8 <HAL_GetTick>
 8005390:	1b80      	subs	r0, r0, r6
 8005392:	2864      	cmp	r0, #100	; 0x64
 8005394:	f200 8100 	bhi.w	8005598 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	039b      	lsls	r3, r3, #14
 800539c:	d4f6      	bmi.n	800538c <HAL_RCC_OscConfig+0x60>
 800539e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a0:	079f      	lsls	r7, r3, #30
 80053a2:	d528      	bpl.n	80053f6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053a4:	4a93      	ldr	r2, [pc, #588]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
 80053a6:	6891      	ldr	r1, [r2, #8]
 80053a8:	f011 0f0c 	tst.w	r1, #12
 80053ac:	f000 8090 	beq.w	80054d0 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053b0:	6891      	ldr	r1, [r2, #8]
 80053b2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053b6:	2908      	cmp	r1, #8
 80053b8:	f000 8086 	beq.w	80054c8 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053bc:	68e3      	ldr	r3, [r4, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8106 	beq.w	80055d0 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053c4:	4b8c      	ldr	r3, [pc, #560]	; (80055f8 <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c6:	4e8b      	ldr	r6, [pc, #556]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 80053c8:	2201      	movs	r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80053cc:	f7ff fb94 	bl	8004af8 <HAL_GetTick>
 80053d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d2:	e005      	b.n	80053e0 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d4:	f7ff fb90 	bl	8004af8 <HAL_GetTick>
 80053d8:	1b40      	subs	r0, r0, r5
 80053da:	2802      	cmp	r0, #2
 80053dc:	f200 80dc 	bhi.w	8005598 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e0:	6833      	ldr	r3, [r6, #0]
 80053e2:	0798      	lsls	r0, r3, #30
 80053e4:	d5f6      	bpl.n	80053d4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e6:	6833      	ldr	r3, [r6, #0]
 80053e8:	6922      	ldr	r2, [r4, #16]
 80053ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80053ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80053f2:	6033      	str	r3, [r6, #0]
 80053f4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f6:	071a      	lsls	r2, r3, #28
 80053f8:	d452      	bmi.n	80054a0 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053fa:	0758      	lsls	r0, r3, #29
 80053fc:	d52f      	bpl.n	800545e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053fe:	4a7d      	ldr	r2, [pc, #500]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
 8005400:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005402:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8005406:	d07e      	beq.n	8005506 <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 8005408:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800540a:	4e7c      	ldr	r6, [pc, #496]	; (80055fc <HAL_RCC_OscConfig+0x2d0>)
 800540c:	6833      	ldr	r3, [r6, #0]
 800540e:	05d9      	lsls	r1, r3, #23
 8005410:	f140 80b2 	bpl.w	8005578 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005414:	68a3      	ldr	r3, [r4, #8]
 8005416:	2b01      	cmp	r3, #1
 8005418:	f000 80c2 	beq.w	80055a0 <HAL_RCC_OscConfig+0x274>
 800541c:	2b05      	cmp	r3, #5
 800541e:	f000 812f 	beq.w	8005680 <HAL_RCC_OscConfig+0x354>
 8005422:	4e74      	ldr	r6, [pc, #464]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
 8005424:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8005426:	f022 0201 	bic.w	r2, r2, #1
 800542a:	6732      	str	r2, [r6, #112]	; 0x70
 800542c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800542e:	f022 0204 	bic.w	r2, r2, #4
 8005432:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005434:	2b00      	cmp	r3, #0
 8005436:	f040 80b8 	bne.w	80055aa <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543a:	f7ff fb5d 	bl	8004af8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800543e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005442:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005444:	e005      	b.n	8005452 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005446:	f7ff fb57 	bl	8004af8 <HAL_GetTick>
 800544a:	1bc0      	subs	r0, r0, r7
 800544c:	4540      	cmp	r0, r8
 800544e:	f200 80a3 	bhi.w	8005598 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005452:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8005454:	0798      	lsls	r0, r3, #30
 8005456:	d4f6      	bmi.n	8005446 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005458:	2d00      	cmp	r5, #0
 800545a:	f040 8109 	bne.w	8005670 <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800545e:	69a0      	ldr	r0, [r4, #24]
 8005460:	b1d0      	cbz	r0, 8005498 <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005462:	4d64      	ldr	r5, [pc, #400]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
 8005464:	68ab      	ldr	r3, [r5, #8]
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	2b08      	cmp	r3, #8
 800546c:	f000 80cc 	beq.w	8005608 <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005470:	4b63      	ldr	r3, [pc, #396]	; (8005600 <HAL_RCC_OscConfig+0x2d4>)
 8005472:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005474:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005476:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005478:	f000 810c 	beq.w	8005694 <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547c:	f7ff fb3c 	bl	8004af8 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005480:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8005482:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005484:	e005      	b.n	8005492 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005486:	f7ff fb37 	bl	8004af8 <HAL_GetTick>
 800548a:	1b40      	subs	r0, r0, r5
 800548c:	2802      	cmp	r0, #2
 800548e:	f200 8083 	bhi.w	8005598 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	019b      	lsls	r3, r3, #6
 8005496:	d4f6      	bmi.n	8005486 <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005498:	2000      	movs	r0, #0
}
 800549a:	b002      	add	sp, #8
 800549c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054a0:	6963      	ldr	r3, [r4, #20]
 80054a2:	b303      	cbz	r3, 80054e6 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80054a4:	4b57      	ldr	r3, [pc, #348]	; (8005604 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054a6:	4e53      	ldr	r6, [pc, #332]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 80054a8:	2201      	movs	r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80054ac:	f7ff fb24 	bl	8004af8 <HAL_GetTick>
 80054b0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054b2:	e004      	b.n	80054be <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054b4:	f7ff fb20 	bl	8004af8 <HAL_GetTick>
 80054b8:	1b40      	subs	r0, r0, r5
 80054ba:	2802      	cmp	r0, #2
 80054bc:	d86c      	bhi.n	8005598 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054be:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80054c0:	079b      	lsls	r3, r3, #30
 80054c2:	d5f7      	bpl.n	80054b4 <HAL_RCC_OscConfig+0x188>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	e798      	b.n	80053fa <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c8:	6852      	ldr	r2, [r2, #4]
 80054ca:	0256      	lsls	r6, r2, #9
 80054cc:	f53f af76 	bmi.w	80053bc <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d0:	4a48      	ldr	r2, [pc, #288]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	0795      	lsls	r5, r2, #30
 80054d6:	d543      	bpl.n	8005560 <HAL_RCC_OscConfig+0x234>
 80054d8:	68e2      	ldr	r2, [r4, #12]
 80054da:	2a01      	cmp	r2, #1
 80054dc:	d040      	beq.n	8005560 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 80054de:	2001      	movs	r0, #1
}
 80054e0:	b002      	add	sp, #8
 80054e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80054e6:	4a47      	ldr	r2, [pc, #284]	; (8005604 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e8:	4e42      	ldr	r6, [pc, #264]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 80054ea:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80054ec:	f7ff fb04 	bl	8004af8 <HAL_GetTick>
 80054f0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f2:	e004      	b.n	80054fe <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f4:	f7ff fb00 	bl	8004af8 <HAL_GetTick>
 80054f8:	1b40      	subs	r0, r0, r5
 80054fa:	2802      	cmp	r0, #2
 80054fc:	d84c      	bhi.n	8005598 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054fe:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8005500:	079f      	lsls	r7, r3, #30
 8005502:	d4f7      	bmi.n	80054f4 <HAL_RCC_OscConfig+0x1c8>
 8005504:	e7de      	b.n	80054c4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800550a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550e:	6413      	str	r3, [r2, #64]	; 0x40
 8005510:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800551a:	2501      	movs	r5, #1
 800551c:	e775      	b.n	800540a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800551e:	684a      	ldr	r2, [r1, #4]
 8005520:	0250      	lsls	r0, r2, #9
 8005522:	f57f af1a 	bpl.w	800535a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005526:	4a33      	ldr	r2, [pc, #204]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	0391      	lsls	r1, r2, #14
 800552c:	f57f af38 	bpl.w	80053a0 <HAL_RCC_OscConfig+0x74>
 8005530:	6862      	ldr	r2, [r4, #4]
 8005532:	2a00      	cmp	r2, #0
 8005534:	f47f af34 	bne.w	80053a0 <HAL_RCC_OscConfig+0x74>
 8005538:	e7d1      	b.n	80054de <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800553a:	4a2e      	ldr	r2, [pc, #184]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
 800553c:	6813      	ldr	r3, [r2, #0]
 800553e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005542:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005544:	f7ff fad8 	bl	8004af8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005548:	4e2a      	ldr	r6, [pc, #168]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800554a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554c:	e004      	b.n	8005558 <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800554e:	f7ff fad3 	bl	8004af8 <HAL_GetTick>
 8005552:	1b40      	subs	r0, r0, r5
 8005554:	2864      	cmp	r0, #100	; 0x64
 8005556:	d81f      	bhi.n	8005598 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005558:	6833      	ldr	r3, [r6, #0]
 800555a:	039a      	lsls	r2, r3, #14
 800555c:	d5f7      	bpl.n	800554e <HAL_RCC_OscConfig+0x222>
 800555e:	e71e      	b.n	800539e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005560:	4924      	ldr	r1, [pc, #144]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
 8005562:	6920      	ldr	r0, [r4, #16]
 8005564:	680a      	ldr	r2, [r1, #0]
 8005566:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800556a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800556e:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005570:	071a      	lsls	r2, r3, #28
 8005572:	f57f af42 	bpl.w	80053fa <HAL_RCC_OscConfig+0xce>
 8005576:	e793      	b.n	80054a0 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005578:	6833      	ldr	r3, [r6, #0]
 800557a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800557e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005580:	f7ff faba 	bl	8004af8 <HAL_GetTick>
 8005584:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005586:	6833      	ldr	r3, [r6, #0]
 8005588:	05da      	lsls	r2, r3, #23
 800558a:	f53f af43 	bmi.w	8005414 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558e:	f7ff fab3 	bl	8004af8 <HAL_GetTick>
 8005592:	1bc0      	subs	r0, r0, r7
 8005594:	2802      	cmp	r0, #2
 8005596:	d9f6      	bls.n	8005586 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8005598:	2003      	movs	r0, #3
}
 800559a:	b002      	add	sp, #8
 800559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a0:	4a14      	ldr	r2, [pc, #80]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
 80055a2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80055a4:	f043 0301 	orr.w	r3, r3, #1
 80055a8:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80055aa:	f7ff faa5 	bl	8004af8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ae:	4f11      	ldr	r7, [pc, #68]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80055b0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b6:	e004      	b.n	80055c2 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b8:	f7ff fa9e 	bl	8004af8 <HAL_GetTick>
 80055bc:	1b80      	subs	r0, r0, r6
 80055be:	4540      	cmp	r0, r8
 80055c0:	d8ea      	bhi.n	8005598 <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055c4:	079b      	lsls	r3, r3, #30
 80055c6:	d5f7      	bpl.n	80055b8 <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	f43f af48 	beq.w	800545e <HAL_RCC_OscConfig+0x132>
 80055ce:	e04f      	b.n	8005670 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 80055d0:	4a09      	ldr	r2, [pc, #36]	; (80055f8 <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055d2:	4e08      	ldr	r6, [pc, #32]	; (80055f4 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 80055d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80055d6:	f7ff fa8f 	bl	8004af8 <HAL_GetTick>
 80055da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055dc:	e004      	b.n	80055e8 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055de:	f7ff fa8b 	bl	8004af8 <HAL_GetTick>
 80055e2:	1b40      	subs	r0, r0, r5
 80055e4:	2802      	cmp	r0, #2
 80055e6:	d8d7      	bhi.n	8005598 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055e8:	6833      	ldr	r3, [r6, #0]
 80055ea:	0799      	lsls	r1, r3, #30
 80055ec:	d4f7      	bmi.n	80055de <HAL_RCC_OscConfig+0x2b2>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	e701      	b.n	80053f6 <HAL_RCC_OscConfig+0xca>
 80055f2:	bf00      	nop
 80055f4:	40023800 	.word	0x40023800
 80055f8:	42470000 	.word	0x42470000
 80055fc:	40007000 	.word	0x40007000
 8005600:	42470060 	.word	0x42470060
 8005604:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005608:	2801      	cmp	r0, #1
 800560a:	f43f af46 	beq.w	800549a <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 800560e:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005610:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005612:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005616:	4291      	cmp	r1, r2
 8005618:	f47f af61 	bne.w	80054de <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800561c:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800561e:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005622:	4291      	cmp	r1, r2
 8005624:	f47f af5b 	bne.w	80054de <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005628:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800562a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800562e:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005630:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005634:	f47f af53 	bne.w	80054de <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005638:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800563a:	0852      	lsrs	r2, r2, #1
 800563c:	3a01      	subs	r2, #1
 800563e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005642:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005646:	f47f af4a 	bne.w	80054de <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800564a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800564c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005650:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8005654:	bf14      	ite	ne
 8005656:	2001      	movne	r0, #1
 8005658:	2000      	moveq	r0, #0
 800565a:	e71e      	b.n	800549a <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800565c:	4b24      	ldr	r3, [pc, #144]	; (80056f0 <HAL_RCC_OscConfig+0x3c4>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800566c:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800566e:	e769      	b.n	8005544 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005670:	4a1f      	ldr	r2, [pc, #124]	; (80056f0 <HAL_RCC_OscConfig+0x3c4>)
 8005672:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005678:	6413      	str	r3, [r2, #64]	; 0x40
 800567a:	e6f0      	b.n	800545e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 800567c:	2001      	movs	r0, #1
}
 800567e:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005680:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <HAL_RCC_OscConfig+0x3c4>)
 8005682:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005684:	f042 0204 	orr.w	r2, r2, #4
 8005688:	671a      	str	r2, [r3, #112]	; 0x70
 800568a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800568c:	f042 0201 	orr.w	r2, r2, #1
 8005690:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005692:	e78a      	b.n	80055aa <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8005694:	f7ff fa30 	bl	8004af8 <HAL_GetTick>
 8005698:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800569a:	e005      	b.n	80056a8 <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800569c:	f7ff fa2c 	bl	8004af8 <HAL_GetTick>
 80056a0:	1b80      	subs	r0, r0, r6
 80056a2:	2802      	cmp	r0, #2
 80056a4:	f63f af78 	bhi.w	8005598 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	0199      	lsls	r1, r3, #6
 80056ac:	d4f6      	bmi.n	800569c <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056ae:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 80056b2:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 80056b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80056b8:	4333      	orrs	r3, r6
 80056ba:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80056be:	0852      	lsrs	r2, r2, #1
 80056c0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80056c4:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80056c6:	490b      	ldr	r1, [pc, #44]	; (80056f4 <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c8:	4e09      	ldr	r6, [pc, #36]	; (80056f0 <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80056ce:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056d0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80056d2:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 80056d4:	f7ff fa10 	bl	8004af8 <HAL_GetTick>
 80056d8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056da:	e005      	b.n	80056e8 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056dc:	f7ff fa0c 	bl	8004af8 <HAL_GetTick>
 80056e0:	1b00      	subs	r0, r0, r4
 80056e2:	2802      	cmp	r0, #2
 80056e4:	f63f af58 	bhi.w	8005598 <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056e8:	6833      	ldr	r3, [r6, #0]
 80056ea:	019a      	lsls	r2, r3, #6
 80056ec:	d5f6      	bpl.n	80056dc <HAL_RCC_OscConfig+0x3b0>
 80056ee:	e6d3      	b.n	8005498 <HAL_RCC_OscConfig+0x16c>
 80056f0:	40023800 	.word	0x40023800
 80056f4:	42470060 	.word	0x42470060

080056f8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80056f8:	4b01      	ldr	r3, [pc, #4]	; (8005700 <HAL_RCC_EnableCSS+0x8>)
 80056fa:	2201      	movs	r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
}
 80056fe:	4770      	bx	lr
 8005700:	4247004c 	.word	0x4247004c

08005704 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005704:	4917      	ldr	r1, [pc, #92]	; (8005764 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8005706:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005708:	688b      	ldr	r3, [r1, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b04      	cmp	r3, #4
 8005710:	d01b      	beq.n	800574a <HAL_RCC_GetSysClockFreq+0x46>
 8005712:	2b08      	cmp	r3, #8
 8005714:	d117      	bne.n	8005746 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005716:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005718:	684b      	ldr	r3, [r1, #4]
 800571a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800571e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005722:	d114      	bne.n	800574e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005724:	6849      	ldr	r1, [r1, #4]
 8005726:	4810      	ldr	r0, [pc, #64]	; (8005768 <HAL_RCC_GetSysClockFreq+0x64>)
 8005728:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800572c:	fba1 0100 	umull	r0, r1, r1, r0
 8005730:	f7fb fa92 	bl	8000c58 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005734:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <HAL_RCC_GetSysClockFreq+0x60>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800573c:	3301      	adds	r3, #1
 800573e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005740:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005744:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8005746:	4808      	ldr	r0, [pc, #32]	; (8005768 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8005748:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800574a:	4808      	ldr	r0, [pc, #32]	; (800576c <HAL_RCC_GetSysClockFreq+0x68>)
}
 800574c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800574e:	684b      	ldr	r3, [r1, #4]
 8005750:	4806      	ldr	r0, [pc, #24]	; (800576c <HAL_RCC_GetSysClockFreq+0x68>)
 8005752:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8005756:	fba3 0100 	umull	r0, r1, r3, r0
 800575a:	2300      	movs	r3, #0
 800575c:	f7fb fa7c 	bl	8000c58 <__aeabi_uldivmod>
 8005760:	e7e8      	b.n	8005734 <HAL_RCC_GetSysClockFreq+0x30>
 8005762:	bf00      	nop
 8005764:	40023800 	.word	0x40023800
 8005768:	00f42400 	.word	0x00f42400
 800576c:	007a1200 	.word	0x007a1200

08005770 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005770:	2800      	cmp	r0, #0
 8005772:	f000 8087 	beq.w	8005884 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005776:	4a48      	ldr	r2, [pc, #288]	; (8005898 <HAL_RCC_ClockConfig+0x128>)
 8005778:	6813      	ldr	r3, [r2, #0]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	428b      	cmp	r3, r1
{
 8005780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005784:	460d      	mov	r5, r1
 8005786:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005788:	d209      	bcs.n	800579e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578a:	b2cb      	uxtb	r3, r1
 800578c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800578e:	6813      	ldr	r3, [r2, #0]
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	428b      	cmp	r3, r1
 8005796:	d002      	beq.n	800579e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005798:	2001      	movs	r0, #1
}
 800579a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	0798      	lsls	r0, r3, #30
 80057a2:	d514      	bpl.n	80057ce <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a4:	0759      	lsls	r1, r3, #29
 80057a6:	d504      	bpl.n	80057b2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057a8:	493c      	ldr	r1, [pc, #240]	; (800589c <HAL_RCC_ClockConfig+0x12c>)
 80057aa:	688a      	ldr	r2, [r1, #8]
 80057ac:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80057b0:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b2:	071a      	lsls	r2, r3, #28
 80057b4:	d504      	bpl.n	80057c0 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057b6:	4939      	ldr	r1, [pc, #228]	; (800589c <HAL_RCC_ClockConfig+0x12c>)
 80057b8:	688a      	ldr	r2, [r1, #8]
 80057ba:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80057be:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c0:	4936      	ldr	r1, [pc, #216]	; (800589c <HAL_RCC_ClockConfig+0x12c>)
 80057c2:	68a0      	ldr	r0, [r4, #8]
 80057c4:	688a      	ldr	r2, [r1, #8]
 80057c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80057ca:	4302      	orrs	r2, r0
 80057cc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ce:	07df      	lsls	r7, r3, #31
 80057d0:	d521      	bpl.n	8005816 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d2:	6862      	ldr	r2, [r4, #4]
 80057d4:	2a01      	cmp	r2, #1
 80057d6:	d057      	beq.n	8005888 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057d8:	1e93      	subs	r3, r2, #2
 80057da:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057dc:	4b2f      	ldr	r3, [pc, #188]	; (800589c <HAL_RCC_ClockConfig+0x12c>)
 80057de:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057e0:	d94d      	bls.n	800587e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e2:	0799      	lsls	r1, r3, #30
 80057e4:	d5d8      	bpl.n	8005798 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e6:	4e2d      	ldr	r6, [pc, #180]	; (800589c <HAL_RCC_ClockConfig+0x12c>)
 80057e8:	68b3      	ldr	r3, [r6, #8]
 80057ea:	f023 0303 	bic.w	r3, r3, #3
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80057f2:	f7ff f981 	bl	8004af8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80057fa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fc:	e004      	b.n	8005808 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fe:	f7ff f97b 	bl	8004af8 <HAL_GetTick>
 8005802:	1bc0      	subs	r0, r0, r7
 8005804:	4540      	cmp	r0, r8
 8005806:	d844      	bhi.n	8005892 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005808:	68b3      	ldr	r3, [r6, #8]
 800580a:	6862      	ldr	r2, [r4, #4]
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005814:	d1f3      	bne.n	80057fe <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005816:	4a20      	ldr	r2, [pc, #128]	; (8005898 <HAL_RCC_ClockConfig+0x128>)
 8005818:	6813      	ldr	r3, [r2, #0]
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	42ab      	cmp	r3, r5
 8005820:	d906      	bls.n	8005830 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	b2eb      	uxtb	r3, r5
 8005824:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005826:	6813      	ldr	r3, [r2, #0]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	42ab      	cmp	r3, r5
 800582e:	d1b3      	bne.n	8005798 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	075a      	lsls	r2, r3, #29
 8005834:	d506      	bpl.n	8005844 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005836:	4919      	ldr	r1, [pc, #100]	; (800589c <HAL_RCC_ClockConfig+0x12c>)
 8005838:	68e0      	ldr	r0, [r4, #12]
 800583a:	688a      	ldr	r2, [r1, #8]
 800583c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8005840:	4302      	orrs	r2, r0
 8005842:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005844:	071b      	lsls	r3, r3, #28
 8005846:	d507      	bpl.n	8005858 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005848:	4a14      	ldr	r2, [pc, #80]	; (800589c <HAL_RCC_ClockConfig+0x12c>)
 800584a:	6921      	ldr	r1, [r4, #16]
 800584c:	6893      	ldr	r3, [r2, #8]
 800584e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005852:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005856:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005858:	f7ff ff54 	bl	8005704 <HAL_RCC_GetSysClockFreq>
 800585c:	4a0f      	ldr	r2, [pc, #60]	; (800589c <HAL_RCC_ClockConfig+0x12c>)
 800585e:	4c10      	ldr	r4, [pc, #64]	; (80058a0 <HAL_RCC_ClockConfig+0x130>)
 8005860:	6892      	ldr	r2, [r2, #8]
 8005862:	4910      	ldr	r1, [pc, #64]	; (80058a4 <HAL_RCC_ClockConfig+0x134>)
 8005864:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005868:	4603      	mov	r3, r0
 800586a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 800586c:	480e      	ldr	r0, [pc, #56]	; (80058a8 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800586e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8005870:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005872:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8005874:	f7ff f8f6 	bl	8004a64 <HAL_InitTick>
  return HAL_OK;
 8005878:	2000      	movs	r0, #0
}
 800587a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800587e:	0198      	lsls	r0, r3, #6
 8005880:	d4b1      	bmi.n	80057e6 <HAL_RCC_ClockConfig+0x76>
 8005882:	e789      	b.n	8005798 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8005884:	2001      	movs	r0, #1
}
 8005886:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005888:	4b04      	ldr	r3, [pc, #16]	; (800589c <HAL_RCC_ClockConfig+0x12c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	039e      	lsls	r6, r3, #14
 800588e:	d4aa      	bmi.n	80057e6 <HAL_RCC_ClockConfig+0x76>
 8005890:	e782      	b.n	8005798 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8005892:	2003      	movs	r0, #3
 8005894:	e781      	b.n	800579a <HAL_RCC_ClockConfig+0x2a>
 8005896:	bf00      	nop
 8005898:	40023c00 	.word	0x40023c00
 800589c:	40023800 	.word	0x40023800
 80058a0:	0800b790 	.word	0x0800b790
 80058a4:	20000658 	.word	0x20000658
 80058a8:	20000660 	.word	0x20000660

080058ac <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80058ac:	4b01      	ldr	r3, [pc, #4]	; (80058b4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	20000658 	.word	0x20000658

080058b8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <HAL_RCC_GetPCLK1Freq+0x14>)
 80058ba:	4a05      	ldr	r2, [pc, #20]	; (80058d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80058bc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80058be:	4905      	ldr	r1, [pc, #20]	; (80058d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058c0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80058c4:	6808      	ldr	r0, [r1, #0]
 80058c6:	5cd3      	ldrb	r3, [r2, r3]
}
 80058c8:	40d8      	lsrs	r0, r3
 80058ca:	4770      	bx	lr
 80058cc:	40023800 	.word	0x40023800
 80058d0:	0800b7a0 	.word	0x0800b7a0
 80058d4:	20000658 	.word	0x20000658

080058d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058d8:	4b04      	ldr	r3, [pc, #16]	; (80058ec <HAL_RCC_GetPCLK2Freq+0x14>)
 80058da:	4a05      	ldr	r2, [pc, #20]	; (80058f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80058dc:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80058de:	4905      	ldr	r1, [pc, #20]	; (80058f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058e0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80058e4:	6808      	ldr	r0, [r1, #0]
 80058e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80058e8:	40d8      	lsrs	r0, r3
 80058ea:	4770      	bx	lr
 80058ec:	40023800 	.word	0x40023800
 80058f0:	0800b7a0 	.word	0x0800b7a0
 80058f4:	20000658 	.word	0x20000658

080058f8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d076      	beq.n	80059ea <HAL_TIM_Base_Init+0xf2>
{
 80058fc:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005902:	4604      	mov	r4, r0
 8005904:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005908:	2b00      	cmp	r3, #0
 800590a:	d055      	beq.n	80059b8 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800590c:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800590e:	4938      	ldr	r1, [pc, #224]	; (80059f0 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	2302      	movs	r3, #2
 8005912:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005916:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005918:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800591a:	d052      	beq.n	80059c2 <HAL_TIM_Base_Init+0xca>
 800591c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005920:	d021      	beq.n	8005966 <HAL_TIM_Base_Init+0x6e>
 8005922:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005926:	428a      	cmp	r2, r1
 8005928:	d01d      	beq.n	8005966 <HAL_TIM_Base_Init+0x6e>
 800592a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800592e:	428a      	cmp	r2, r1
 8005930:	d019      	beq.n	8005966 <HAL_TIM_Base_Init+0x6e>
 8005932:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005936:	428a      	cmp	r2, r1
 8005938:	d015      	beq.n	8005966 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800593a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800593e:	428a      	cmp	r2, r1
 8005940:	d015      	beq.n	800596e <HAL_TIM_Base_Init+0x76>
 8005942:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005946:	428a      	cmp	r2, r1
 8005948:	d011      	beq.n	800596e <HAL_TIM_Base_Init+0x76>
 800594a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800594e:	428a      	cmp	r2, r1
 8005950:	d00d      	beq.n	800596e <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005952:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005954:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005956:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800595c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800595e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005960:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005962:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005964:	e010      	b.n	8005988 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005966:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800596c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800596e:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005970:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005972:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005978:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800597a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800597e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005980:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005982:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005984:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005986:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005988:	2301      	movs	r3, #1
 800598a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800598c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005994:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005998:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800599c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80059ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80059b4:	2000      	movs	r0, #0
}
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 80059b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80059bc:	f7fe fe0a 	bl	80045d4 <HAL_TIM_Base_MspInit>
 80059c0:	e7a4      	b.n	800590c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80059c2:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059c4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80059cc:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059d8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80059da:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059dc:	68e3      	ldr	r3, [r4, #12]
 80059de:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059e0:	6863      	ldr	r3, [r4, #4]
 80059e2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80059e4:	6963      	ldr	r3, [r4, #20]
 80059e6:	6313      	str	r3, [r2, #48]	; 0x30
 80059e8:	e7ce      	b.n	8005988 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 80059ea:	2001      	movs	r0, #1
}
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40010000 	.word	0x40010000

080059f4 <HAL_TIM_PWM_MspInit>:
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop

080059f8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d076      	beq.n	8005aea <HAL_TIM_PWM_Init+0xf2>
{
 80059fc:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80059fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a02:	4604      	mov	r4, r0
 8005a04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d055      	beq.n	8005ab8 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a0e:	4938      	ldr	r1, [pc, #224]	; (8005af0 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	2302      	movs	r3, #2
 8005a12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a16:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005a18:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a1a:	d052      	beq.n	8005ac2 <HAL_TIM_PWM_Init+0xca>
 8005a1c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005a20:	d021      	beq.n	8005a66 <HAL_TIM_PWM_Init+0x6e>
 8005a22:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8005a26:	428a      	cmp	r2, r1
 8005a28:	d01d      	beq.n	8005a66 <HAL_TIM_PWM_Init+0x6e>
 8005a2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a2e:	428a      	cmp	r2, r1
 8005a30:	d019      	beq.n	8005a66 <HAL_TIM_PWM_Init+0x6e>
 8005a32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a36:	428a      	cmp	r2, r1
 8005a38:	d015      	beq.n	8005a66 <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8005a3e:	428a      	cmp	r2, r1
 8005a40:	d015      	beq.n	8005a6e <HAL_TIM_PWM_Init+0x76>
 8005a42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a46:	428a      	cmp	r2, r1
 8005a48:	d011      	beq.n	8005a6e <HAL_TIM_PWM_Init+0x76>
 8005a4a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005a4e:	428a      	cmp	r2, r1
 8005a50:	d00d      	beq.n	8005a6e <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a52:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a54:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005a56:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a5c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005a5e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a60:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a62:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a64:	e010      	b.n	8005a88 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005a66:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a6c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a6e:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a70:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a72:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a78:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a7e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005a80:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005a82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a84:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a86:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a8c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005a94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005a98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005a9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005aac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005ab0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005ab4:	2000      	movs	r0, #0
}
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 8005ab8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005abc:	f7ff ff9a 	bl	80059f4 <HAL_TIM_PWM_MspInit>
 8005ac0:	e7a4      	b.n	8005a0c <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8005ac2:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ac4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ac6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005acc:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ad2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005ada:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005adc:	68e3      	ldr	r3, [r4, #12]
 8005ade:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ae0:	6863      	ldr	r3, [r4, #4]
 8005ae2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae4:	6963      	ldr	r3, [r4, #20]
 8005ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ae8:	e7ce      	b.n	8005a88 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 8005aea:	2001      	movs	r0, #1
}
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40010000 	.word	0x40010000

08005af4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005af4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	f000 80d4 	beq.w	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 8005afe:	2301      	movs	r3, #1
{
 8005b00:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005b02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005b06:	2a0c      	cmp	r2, #12
 8005b08:	d808      	bhi.n	8005b1c <HAL_TIM_PWM_ConfigChannel+0x28>
 8005b0a:	e8df f002 	tbb	[pc, r2]
 8005b0e:	073e      	.short	0x073e
 8005b10:	076d0707 	.word	0x076d0707
 8005b14:	079d0707 	.word	0x079d0707
 8005b18:	0707      	.short	0x0707
 8005b1a:	0d          	.byte	0x0d
 8005b1b:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005b1c:	2200      	movs	r2, #0
  __HAL_LOCK(htim);
 8005b1e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005b20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b28:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b2a:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b2c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b2e:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b30:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8005d10 <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b34:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8005b38:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005b3a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005b3c:	f8d3 e004 	ldr.w	lr, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005b40:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8005b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b46:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b4a:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b4c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b50:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b54:	f000 80c7 	beq.w	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x1f2>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b58:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005b5a:	f8c3 e004 	str.w	lr, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005b5e:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005b60:	641d      	str	r5, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b62:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b64:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b66:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b68:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005b6c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b6e:	69d9      	ldr	r1, [r3, #28]
 8005b70:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005b74:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b76:	69da      	ldr	r2, [r3, #28]
 8005b78:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005b7c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005b7e:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005b80:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005b82:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b8a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8005b8c:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b90:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005b92:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b94:	4e5e      	ldr	r6, [pc, #376]	; (8005d10 <HAL_TIM_PWM_ConfigChannel+0x21c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b96:	f025 0501 	bic.w	r5, r5, #1
 8005b9a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005b9e:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005ba2:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8005ba4:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ba8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bac:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8005bae:	ea42 020e 	orr.w	r2, r2, lr
  tmpccmrx |= OC_Config->OCMode;
 8005bb2:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bb6:	d079      	beq.n	8005cac <HAL_TIM_PWM_ConfigChannel+0x1b8>
  TIMx->CCR1 = OC_Config->Pulse;
 8005bb8:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005bba:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005bbe:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005bc0:	635d      	str	r5, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005bc2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bc4:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bc6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bc8:	f044 0408 	orr.w	r4, r4, #8
 8005bcc:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bce:	6999      	ldr	r1, [r3, #24]
 8005bd0:	f021 0104 	bic.w	r1, r1, #4
 8005bd4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	432a      	orrs	r2, r5
 8005bda:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005bdc:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005bde:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005be0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005be8:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bea:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bec:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bee:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bf0:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8005d10 <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf4:	f025 0510 	bic.w	r5, r5, #16
 8005bf8:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005bfa:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005bfc:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005c00:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005c02:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c06:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c0a:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c0c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c10:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c14:	d058      	beq.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x1d4>
  TIMx->CCR2 = OC_Config->Pulse;
 8005c16:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005c18:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005c1c:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005c1e:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005c20:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c22:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c24:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c26:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8005c2a:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c2c:	6999      	ldr	r1, [r3, #24]
 8005c2e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005c32:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005c3a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005c3c:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005c40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c48:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c4a:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c4c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005c4e:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c50:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 8005d10 <HAL_TIM_PWM_ConfigChannel+0x21c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c54:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8005c58:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005c5a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005c5c:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005c60:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8005c62:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c66:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c6a:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c6c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8005c70:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c74:	d03d      	beq.n	8005cf2 <HAL_TIM_PWM_ConfigChannel+0x1fe>
  TIMx->CCR3 = OC_Config->Pulse;
 8005c76:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005c78:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005c7c:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005c7e:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005c80:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c82:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c84:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c86:	f044 0408 	orr.w	r4, r4, #8
 8005c8a:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c8c:	69d9      	ldr	r1, [r3, #28]
 8005c8e:	f021 0104 	bic.w	r1, r1, #4
 8005c92:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c94:	69da      	ldr	r2, [r3, #28]
 8005c96:	432a      	orrs	r2, r5
 8005c98:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005c9a:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c9c:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005c9e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8005ca6:	2302      	movs	r3, #2
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	4770      	bx	lr
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cac:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 8005cb0:	68cf      	ldr	r7, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cb2:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cb6:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8005cba:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cbc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cbe:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cc2:	ea45 0c0c 	orr.w	ip, r5, ip
 8005cc6:	e777      	b.n	8005bb8 <HAL_TIM_PWM_ConfigChannel+0xc4>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cc8:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ccc:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cd2:	f42c 6c40 	bic.w	ip, ip, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cd6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cda:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ce0:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
 8005ce4:	e797      	b.n	8005c16 <HAL_TIM_PWM_ConfigChannel+0x122>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ce6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ce8:	f42e 4e80 	bic.w	lr, lr, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cec:	ea4e 1e85 	orr.w	lr, lr, r5, lsl #6
 8005cf0:	e732      	b.n	8005b58 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cf2:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cf6:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cfc:	f42c 5c40 	bic.w	ip, ip, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d00:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d04:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d0a:	ea4c 1c05 	orr.w	ip, ip, r5, lsl #4
 8005d0e:	e7b2      	b.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x182>
 8005d10:	40010000 	.word	0x40010000

08005d14 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8005d14:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8005d18:	2a01      	cmp	r2, #1
 8005d1a:	d050      	beq.n	8005dbe <HAL_TIM_SlaveConfigSynchro+0xaa>
 8005d1c:	4603      	mov	r3, r0
{
 8005d1e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8005d20:	2001      	movs	r0, #1
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d22:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(htim);
 8005d24:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	2202      	movs	r2, #2
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005d2e:	e9d1 5000 	ldrd	r5, r0, [r1]
  tmpsmcr = htim->Instance->SMCR;
 8005d32:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005d38:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005d3a:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005d3e:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005d40:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8005d42:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8005d44:	d060      	beq.n	8005e08 <HAL_TIM_SlaveConfigSynchro+0xf4>
 8005d46:	d90f      	bls.n	8005d68 <HAL_TIM_SlaveConfigSynchro+0x54>
 8005d48:	2860      	cmp	r0, #96	; 0x60
 8005d4a:	d03a      	beq.n	8005dc2 <HAL_TIM_SlaveConfigSynchro+0xae>
 8005d4c:	2870      	cmp	r0, #112	; 0x70
 8005d4e:	d10e      	bne.n	8005d6e <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d50:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
 8005d54:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8005d56:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d58:	432a      	orrs	r2, r5
 8005d5a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d5e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d62:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d64:	60a2      	str	r2, [r4, #8]
 8005d66:	e00f      	b.n	8005d88 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8005d68:	2840      	cmp	r0, #64	; 0x40
 8005d6a:	d03d      	beq.n	8005de8 <HAL_TIM_SlaveConfigSynchro+0xd4>
 8005d6c:	d907      	bls.n	8005d7e <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 8005d6e:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005d70:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8005d72:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005d7a:	bcf0      	pop	{r4, r5, r6, r7}
 8005d7c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005d7e:	2820      	cmp	r0, #32
 8005d80:	d002      	beq.n	8005d88 <HAL_TIM_SlaveConfigSynchro+0x74>
 8005d82:	d912      	bls.n	8005daa <HAL_TIM_SlaveConfigSynchro+0x96>
 8005d84:	2830      	cmp	r0, #48	; 0x30
 8005d86:	d1f2      	bne.n	8005d6e <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005d88:	68e2      	ldr	r2, [r4, #12]
 8005d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d8e:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005d90:	68e2      	ldr	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005d92:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 8005d94:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005d96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d9a:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005d9c:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005da0:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8005da4:	4608      	mov	r0, r1
}
 8005da6:	bcf0      	pop	{r4, r5, r6, r7}
 8005da8:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005daa:	f030 0210 	bics.w	r2, r0, #16
 8005dae:	d0eb      	beq.n	8005d88 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8005db0:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005db2:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8005db4:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005dbc:	e7dd      	b.n	8005d7a <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8005dbe:	2002      	movs	r0, #2
}
 8005dc0:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc2:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dc4:	688d      	ldr	r5, [r1, #8]
 8005dc6:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc8:	f020 0010 	bic.w	r0, r0, #16
 8005dcc:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dce:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8005dd0:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dda:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dde:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005de2:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8005de4:	6222      	str	r2, [r4, #32]
 8005de6:	e7cf      	b.n	8005d88 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005de8:	2d05      	cmp	r5, #5
 8005dea:	d0c0      	beq.n	8005d6e <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8005dec:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005dee:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005df0:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005df2:	f020 0001 	bic.w	r0, r0, #1
 8005df6:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005df8:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dfa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005dfe:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005e02:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8005e04:	6225      	str	r5, [r4, #32]
      break;
 8005e06:	e7bf      	b.n	8005d88 <HAL_TIM_SlaveConfigSynchro+0x74>
  tmpccer = TIMx->CCER;
 8005e08:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e0a:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0c:	6888      	ldr	r0, [r1, #8]
 8005e0e:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e10:	f026 0601 	bic.w	r6, r6, #1
 8005e14:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e16:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e18:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8005e20:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e22:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005e26:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8005e28:	6221      	str	r1, [r4, #32]
 8005e2a:	e7ad      	b.n	8005d88 <HAL_TIM_SlaveConfigSynchro+0x74>

08005e2c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d02e      	beq.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0x66>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e34:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005e36:	2202      	movs	r2, #2
{
 8005e38:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005e3e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e40:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e42:	4d15      	ldr	r5, [pc, #84]	; (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e48:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e4a:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8005e4c:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8005e4e:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e50:	d011      	beq.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8005e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e56:	d00e      	beq.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8005e58:	4a10      	ldr	r2, [pc, #64]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00b      	beq.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8005e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d007      	beq.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8005e66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d003      	beq.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8005e6e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d104      	bne.n	8005e80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e76:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e78:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e7c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e7e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005e80:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005e82:	2201      	movs	r2, #1
 8005e84:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005e88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005e8c:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8005e8e:	4618      	mov	r0, r3
}
 8005e90:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005e92:	2002      	movs	r0, #2
}
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40010000 	.word	0x40010000
 8005e9c:	40000400 	.word	0x40000400

08005ea0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ea0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d022      	beq.n	8005eee <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 8005ea8:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eaa:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8005eae:	4604      	mov	r4, r0
 8005eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005eb4:	e9d1 2000 	ldrd	r2, r0, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eb8:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005eba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ebe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ec4:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ec8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005eca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ece:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ed4:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ed6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ed8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ede:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 8005ee0:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005ee2:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005ee4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 8005ee8:	4608      	mov	r0, r1
}
 8005eea:	bc30      	pop	{r4, r5}
 8005eec:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005eee:	2002      	movs	r0, #2
}
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop

08005ef4 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	f000 8090 	beq.w	800601a <HAL_UART_Init+0x126>
{
 8005efa:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005efc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005f00:	4604      	mov	r4, r0
 8005f02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 8082 	beq.w	8006010 <HAL_UART_Init+0x11c>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f0c:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f0e:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8005f10:	2224      	movs	r2, #36	; 0x24
 8005f12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005f16:	68d8      	ldr	r0, [r3, #12]
 8005f18:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f1c:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8005f20:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f22:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f24:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f26:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005f2a:	4329      	orrs	r1, r5
 8005f2c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005f2e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f30:	6965      	ldr	r5, [r4, #20]
 8005f32:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8005f34:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f38:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8005f3a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f3e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005f40:	430a      	orrs	r2, r1
 8005f42:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f44:	695a      	ldr	r2, [r3, #20]
 8005f46:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f48:	4935      	ldr	r1, [pc, #212]	; (8006020 <HAL_UART_Init+0x12c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f4a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f4e:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f50:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f52:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f54:	d035      	beq.n	8005fc2 <HAL_UART_Init+0xce>
 8005f56:	4a33      	ldr	r2, [pc, #204]	; (8006024 <HAL_UART_Init+0x130>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d032      	beq.n	8005fc2 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f5c:	f7ff fcac 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f60:	69e3      	ldr	r3, [r4, #28]
 8005f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f66:	d032      	beq.n	8005fce <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	4e2f      	ldr	r6, [pc, #188]	; (8006028 <HAL_UART_Init+0x134>)
 8005f6c:	2119      	movs	r1, #25
 8005f6e:	009a      	lsls	r2, r3, #2
 8005f70:	fba0 0101 	umull	r0, r1, r0, r1
 8005f74:	0f9b      	lsrs	r3, r3, #30
 8005f76:	f7fa fe6f 	bl	8000c58 <__aeabi_uldivmod>
 8005f7a:	fba6 2500 	umull	r2, r5, r6, r0
 8005f7e:	096d      	lsrs	r5, r5, #5
 8005f80:	2164      	movs	r1, #100	; 0x64
 8005f82:	fb01 0215 	mls	r2, r1, r5, r0
 8005f86:	0112      	lsls	r2, r2, #4
 8005f88:	3232      	adds	r2, #50	; 0x32
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	fba6 1202 	umull	r1, r2, r6, r2
 8005f90:	012d      	lsls	r5, r5, #4
 8005f92:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 8005f96:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f9e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fa6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005fa8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005faa:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8005fac:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8005fae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fb2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fb6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fba:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8005fbe:	4628      	mov	r0, r5
}
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8005fc2:	f7ff fc89 	bl	80058d8 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fc6:	69e3      	ldr	r3, [r4, #28]
 8005fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fcc:	d1cc      	bne.n	8005f68 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fce:	6862      	ldr	r2, [r4, #4]
 8005fd0:	4e15      	ldr	r6, [pc, #84]	; (8006028 <HAL_UART_Init+0x134>)
 8005fd2:	1892      	adds	r2, r2, r2
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	f04f 0119 	mov.w	r1, #25
 8005fdc:	415b      	adcs	r3, r3
 8005fde:	fba0 0101 	umull	r0, r1, r0, r1
 8005fe2:	f7fa fe39 	bl	8000c58 <__aeabi_uldivmod>
 8005fe6:	fba6 2100 	umull	r2, r1, r6, r0
 8005fea:	094d      	lsrs	r5, r1, #5
 8005fec:	2164      	movs	r1, #100	; 0x64
 8005fee:	fb01 0215 	mls	r2, r1, r5, r0
 8005ff2:	00d2      	lsls	r2, r2, #3
 8005ff4:	3232      	adds	r2, #50	; 0x32
 8005ff6:	fba6 1202 	umull	r1, r2, r6, r2
 8005ffa:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8005ffe:	0912      	lsrs	r2, r2, #4
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8006006:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800600a:	440a      	add	r2, r1
 800600c:	609a      	str	r2, [r3, #8]
 800600e:	e7c3      	b.n	8005f98 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8006010:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8006014:	f7fe fb6a 	bl	80046ec <HAL_UART_MspInit>
 8006018:	e778      	b.n	8005f0c <HAL_UART_Init+0x18>
    return HAL_ERROR;
 800601a:	2001      	movs	r0, #1
}
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40011000 	.word	0x40011000
 8006024:	40011400 	.word	0x40011400
 8006028:	51eb851f 	.word	0x51eb851f

0800602c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800602c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006030:	2b20      	cmp	r3, #32
 8006032:	d11a      	bne.n	800606a <HAL_UART_Transmit_IT+0x3e>
    if ((pData == NULL) || (Size == 0U))
 8006034:	b1b9      	cbz	r1, 8006066 <HAL_UART_Transmit_IT+0x3a>
 8006036:	b1b2      	cbz	r2, 8006066 <HAL_UART_Transmit_IT+0x3a>
    __HAL_LOCK(huart);
 8006038:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800603c:	2b01      	cmp	r3, #1
 800603e:	d014      	beq.n	800606a <HAL_UART_Transmit_IT+0x3e>
{
 8006040:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006042:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006044:	6805      	ldr	r5, [r0, #0]
    huart->TxXferCount = Size;
 8006046:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006048:	2421      	movs	r4, #33	; 0x21
    __HAL_UNLOCK(huart);
 800604a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604e:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006050:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006054:	68ec      	ldr	r4, [r5, #12]
    huart->pTxBuffPtr = pData;
 8006056:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006058:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    huart->TxXferSize = Size;
 800605c:	8482      	strh	r2, [r0, #36]	; 0x24
    return HAL_OK;
 800605e:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006060:	60ec      	str	r4, [r5, #12]
}
 8006062:	bc30      	pop	{r4, r5}
 8006064:	4770      	bx	lr
      return HAL_ERROR;
 8006066:	2001      	movs	r0, #1
 8006068:	4770      	bx	lr
    return HAL_BUSY;
 800606a:	2002      	movs	r0, #2
}
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop

08006070 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8006070:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006074:	2b20      	cmp	r3, #32
 8006076:	d123      	bne.n	80060c0 <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8006078:	b301      	cbz	r1, 80060bc <HAL_UART_Receive_IT+0x4c>
 800607a:	b1fa      	cbz	r2, 80060bc <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 800607c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006080:	2b01      	cmp	r3, #1
 8006082:	d01d      	beq.n	80060c0 <HAL_UART_Receive_IT+0x50>
{
 8006084:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006086:	2300      	movs	r3, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006088:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608a:	6303      	str	r3, [r0, #48]	; 0x30
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800608c:	2522      	movs	r5, #34	; 0x22
  huart->RxXferCount = Size;
 800608e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  __HAL_UNLOCK(huart);
 8006090:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006094:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006096:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800609a:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 800609c:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800609e:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 80060a2:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060a4:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060a6:	6962      	ldr	r2, [r4, #20]
 80060a8:	f042 0201 	orr.w	r2, r2, #1
 80060ac:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060ae:	68e2      	ldr	r2, [r4, #12]
 80060b0:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 80060b4:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060b6:	60e2      	str	r2, [r4, #12]
}
 80060b8:	bc30      	pop	{r4, r5}
 80060ba:	4770      	bx	lr
      return HAL_ERROR;
 80060bc:	2001      	movs	r0, #1
 80060be:	4770      	bx	lr
    return HAL_BUSY;
 80060c0:	2002      	movs	r0, #2
}
 80060c2:	4770      	bx	lr

080060c4 <HAL_UART_TxCpltCallback>:
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop

080060c8 <HAL_UART_ErrorCallback>:
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop

080060cc <UART_DMAAbortOnError>:
{
 80060cc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060d4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80060d6:	f7ff fff7 	bl	80060c8 <HAL_UART_ErrorCallback>
}
 80060da:	bd08      	pop	{r3, pc}

080060dc <HAL_UARTEx_RxEventCallback>:
}
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop

080060e0 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060e0:	6883      	ldr	r3, [r0, #8]
 80060e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e6:	d044      	beq.n	8006172 <UART_Receive_IT.part.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d038      	beq.n	8006160 <UART_Receive_IT.part.0+0x80>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060ee:	6803      	ldr	r3, [r0, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f6:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80060f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80060fa:	3301      	adds	r3, #1
 80060fc:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80060fe:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8006100:	3b01      	subs	r3, #1
 8006102:	b29b      	uxth	r3, r3
 8006104:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8006106:	2b00      	cmp	r3, #0
 8006108:	d131      	bne.n	800616e <UART_Receive_IT.part.0+0x8e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800610a:	6802      	ldr	r2, [r0, #0]
 800610c:	68d1      	ldr	r1, [r2, #12]
 800610e:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8006112:	b510      	push	{r4, lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006114:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006116:	68d1      	ldr	r1, [r2, #12]
 8006118:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800611c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800611e:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006120:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006122:	f021 0101 	bic.w	r1, r1, #1
 8006126:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006128:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800612c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800612e:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8006130:	b082      	sub	sp, #8
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006132:	d129      	bne.n	8006188 <UART_Receive_IT.part.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006134:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	f102 030c 	add.w	r3, r2, #12
 800613a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	f102 040c 	add.w	r4, r2, #12
 8006146:	e844 3100 	strex	r1, r3, [r4]
 800614a:	2900      	cmp	r1, #0
 800614c:	d1f3      	bne.n	8006136 <UART_Receive_IT.part.0+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800614e:	6813      	ldr	r3, [r2, #0]
 8006150:	06db      	lsls	r3, r3, #27
 8006152:	d423      	bmi.n	800619c <UART_Receive_IT.part.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006154:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8006156:	f7ff ffc1 	bl	80060dc <HAL_UARTEx_RxEventCallback>
}
 800615a:	2000      	movs	r0, #0
 800615c:	b002      	add	sp, #8
 800615e:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006160:	6903      	ldr	r3, [r0, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1c3      	bne.n	80060ee <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006166:	6803      	ldr	r3, [r0, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	7013      	strb	r3, [r2, #0]
 800616c:	e7c4      	b.n	80060f8 <UART_Receive_IT.part.0+0x18>
}
 800616e:	2000      	movs	r0, #0
 8006170:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006172:	6903      	ldr	r3, [r0, #16]
 8006174:	b96b      	cbnz	r3, 8006192 <UART_Receive_IT.part.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006176:	6802      	ldr	r2, [r0, #0]
 8006178:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800617a:	6852      	ldr	r2, [r2, #4]
 800617c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006180:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8006184:	6283      	str	r3, [r0, #40]	; 0x28
 8006186:	e7ba      	b.n	80060fe <UART_Receive_IT.part.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 8006188:	f7fb fef8 	bl	8001f7c <HAL_UART_RxCpltCallback>
}
 800618c:	2000      	movs	r0, #0
 800618e:	b002      	add	sp, #8
 8006190:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006192:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006194:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	7013      	strb	r3, [r2, #0]
 800619a:	e7ad      	b.n	80060f8 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800619c:	2300      	movs	r3, #0
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	6813      	ldr	r3, [r2, #0]
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	6853      	ldr	r3, [r2, #4]
 80061a6:	9301      	str	r3, [sp, #4]
 80061a8:	9b01      	ldr	r3, [sp, #4]
 80061aa:	e7d3      	b.n	8006154 <UART_Receive_IT.part.0+0x74>

080061ac <HAL_UART_IRQHandler>:
{
 80061ac:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061ae:	6803      	ldr	r3, [r0, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061b2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061b4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80061b6:	f012 0f0f 	tst.w	r2, #15
{
 80061ba:	b083      	sub	sp, #12
 80061bc:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80061be:	d16e      	bne.n	800629e <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061c0:	0695      	lsls	r5, r2, #26
 80061c2:	d502      	bpl.n	80061ca <HAL_UART_IRQHandler+0x1e>
 80061c4:	068d      	lsls	r5, r1, #26
 80061c6:	f100 80b1 	bmi.w	800632c <HAL_UART_IRQHandler+0x180>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80061cc:	2801      	cmp	r0, #1
 80061ce:	d00b      	beq.n	80061e8 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061d0:	0610      	lsls	r0, r2, #24
 80061d2:	d502      	bpl.n	80061da <HAL_UART_IRQHandler+0x2e>
 80061d4:	060d      	lsls	r5, r1, #24
 80061d6:	f100 80b3 	bmi.w	8006340 <HAL_UART_IRQHandler+0x194>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061da:	0650      	lsls	r0, r2, #25
 80061dc:	d502      	bpl.n	80061e4 <HAL_UART_IRQHandler+0x38>
 80061de:	064a      	lsls	r2, r1, #25
 80061e0:	f100 80cd 	bmi.w	800637e <HAL_UART_IRQHandler+0x1d2>
}
 80061e4:	b003      	add	sp, #12
 80061e6:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061e8:	06d5      	lsls	r5, r2, #27
 80061ea:	d5f1      	bpl.n	80061d0 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061ec:	06c8      	lsls	r0, r1, #27
 80061ee:	d5ef      	bpl.n	80061d0 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061f0:	2200      	movs	r2, #0
 80061f2:	9201      	str	r2, [sp, #4]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	9201      	str	r2, [sp, #4]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	9201      	str	r2, [sp, #4]
 80061fc:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061fe:	695a      	ldr	r2, [r3, #20]
 8006200:	0655      	lsls	r5, r2, #25
 8006202:	f140 8116 	bpl.w	8006432 <HAL_UART_IRQHandler+0x286>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006206:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006208:	6802      	ldr	r2, [r0, #0]
 800620a:	6852      	ldr	r2, [r2, #4]
 800620c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800620e:	2a00      	cmp	r2, #0
 8006210:	d0e8      	beq.n	80061e4 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006212:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006214:	4291      	cmp	r1, r2
 8006216:	d9e5      	bls.n	80061e4 <HAL_UART_IRQHandler+0x38>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006218:	69c5      	ldr	r5, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 800621a:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800621c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006220:	d036      	beq.n	8006290 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	f103 020c 	add.w	r2, r3, #12
 8006226:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800622a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	f103 050c 	add.w	r5, r3, #12
 8006232:	e845 2100 	strex	r1, r2, [r5]
 8006236:	2900      	cmp	r1, #0
 8006238:	d1f3      	bne.n	8006222 <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	f103 0214 	add.w	r2, r3, #20
 800623e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006242:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	f103 0514 	add.w	r5, r3, #20
 800624a:	e845 2100 	strex	r1, r2, [r5]
 800624e:	2900      	cmp	r1, #0
 8006250:	d1f3      	bne.n	800623a <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	f103 0214 	add.w	r2, r3, #20
 8006256:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800625a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	f103 0514 	add.w	r5, r3, #20
 8006262:	e845 2100 	strex	r1, r2, [r5]
 8006266:	2900      	cmp	r1, #0
 8006268:	d1f3      	bne.n	8006252 <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 800626a:	2220      	movs	r2, #32
 800626c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006270:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	f103 020c 	add.w	r2, r3, #12
 8006276:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800627a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	f103 050c 	add.w	r5, r3, #12
 8006282:	e845 2100 	strex	r1, r2, [r5]
 8006286:	2900      	cmp	r1, #0
 8006288:	d1f3      	bne.n	8006272 <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800628a:	f7fe ff05 	bl	8005098 <HAL_DMA_Abort>
 800628e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006290:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006292:	1ac9      	subs	r1, r1, r3
 8006294:	b289      	uxth	r1, r1
 8006296:	4620      	mov	r0, r4
 8006298:	f7ff ff20 	bl	80060dc <HAL_UARTEx_RxEventCallback>
 800629c:	e7a2      	b.n	80061e4 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800629e:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062a2:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80062a6:	4328      	orrs	r0, r5
 80062a8:	d08f      	beq.n	80061ca <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062aa:	07d0      	lsls	r0, r2, #31
 80062ac:	d505      	bpl.n	80062ba <HAL_UART_IRQHandler+0x10e>
 80062ae:	05c8      	lsls	r0, r1, #23
 80062b0:	d503      	bpl.n	80062ba <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80062b4:	f040 0001 	orr.w	r0, r0, #1
 80062b8:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062ba:	0750      	lsls	r0, r2, #29
 80062bc:	d52d      	bpl.n	800631a <HAL_UART_IRQHandler+0x16e>
 80062be:	b12d      	cbz	r5, 80062cc <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80062c2:	f040 0002 	orr.w	r0, r0, #2
 80062c6:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062c8:	0790      	lsls	r0, r2, #30
 80062ca:	d42a      	bmi.n	8006322 <HAL_UART_IRQHandler+0x176>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80062cc:	0710      	lsls	r0, r2, #28
 80062ce:	d507      	bpl.n	80062e0 <HAL_UART_IRQHandler+0x134>
 80062d0:	f001 0020 	and.w	r0, r1, #32
 80062d4:	4328      	orrs	r0, r5
 80062d6:	d003      	beq.n	80062e0 <HAL_UART_IRQHandler+0x134>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062d8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80062da:	f040 0008 	orr.w	r0, r0, #8
 80062de:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80062e2:	2800      	cmp	r0, #0
 80062e4:	f43f af7e 	beq.w	80061e4 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062e8:	0690      	lsls	r0, r2, #26
 80062ea:	d509      	bpl.n	8006300 <HAL_UART_IRQHandler+0x154>
 80062ec:	0689      	lsls	r1, r1, #26
 80062ee:	d507      	bpl.n	8006300 <HAL_UART_IRQHandler+0x154>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062f0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80062f4:	2a22      	cmp	r2, #34	; 0x22
 80062f6:	d103      	bne.n	8006300 <HAL_UART_IRQHandler+0x154>
 80062f8:	4620      	mov	r0, r4
 80062fa:	f7ff fef1 	bl	80060e0 <UART_Receive_IT.part.0>
 80062fe:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006300:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006302:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006304:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006308:	f005 0508 	and.w	r5, r5, #8
 800630c:	4315      	orrs	r5, r2
 800630e:	d141      	bne.n	8006394 <HAL_UART_IRQHandler+0x1e8>
        HAL_UART_ErrorCallback(huart);
 8006310:	4620      	mov	r0, r4
 8006312:	f7ff fed9 	bl	80060c8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006316:	6425      	str	r5, [r4, #64]	; 0x40
 8006318:	e764      	b.n	80061e4 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800631a:	0790      	lsls	r0, r2, #30
 800631c:	d5d6      	bpl.n	80062cc <HAL_UART_IRQHandler+0x120>
 800631e:	2d00      	cmp	r5, #0
 8006320:	d0d4      	beq.n	80062cc <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006322:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006324:	f040 0004 	orr.w	r0, r0, #4
 8006328:	6420      	str	r0, [r4, #64]	; 0x40
 800632a:	e7cf      	b.n	80062cc <HAL_UART_IRQHandler+0x120>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800632c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006330:	2b22      	cmp	r3, #34	; 0x22
 8006332:	f47f af57 	bne.w	80061e4 <HAL_UART_IRQHandler+0x38>
}
 8006336:	b003      	add	sp, #12
 8006338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800633c:	f7ff bed0 	b.w	80060e0 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006340:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8006344:	2a21      	cmp	r2, #33	; 0x21
 8006346:	f47f af4d 	bne.w	80061e4 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634a:	68a2      	ldr	r2, [r4, #8]
 800634c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006350:	f000 80a8 	beq.w	80064a4 <HAL_UART_IRQHandler+0x2f8>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006354:	6a22      	ldr	r2, [r4, #32]
 8006356:	1c51      	adds	r1, r2, #1
 8006358:	6221      	str	r1, [r4, #32]
 800635a:	7812      	ldrb	r2, [r2, #0]
 800635c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800635e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8006360:	3a01      	subs	r2, #1
 8006362:	b292      	uxth	r2, r2
 8006364:	84e2      	strh	r2, [r4, #38]	; 0x26
 8006366:	2a00      	cmp	r2, #0
 8006368:	f47f af3c 	bne.w	80061e4 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006372:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800637a:	60da      	str	r2, [r3, #12]
 800637c:	e732      	b.n	80061e4 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800637e:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006380:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006386:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8006388:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800638a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800638e:	f7ff fe99 	bl	80060c4 <HAL_UART_TxCpltCallback>
    return;
 8006392:	e727      	b.n	80061e4 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	f103 020c 	add.w	r2, r3, #12
 8006398:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800639c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	f103 000c 	add.w	r0, r3, #12
 80063a4:	e840 2100 	strex	r1, r2, [r0]
 80063a8:	2900      	cmp	r1, #0
 80063aa:	d1f3      	bne.n	8006394 <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	f103 0214 	add.w	r2, r3, #20
 80063b0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b8:	f103 0014 	add.w	r0, r3, #20
 80063bc:	e840 2100 	strex	r1, r2, [r0]
 80063c0:	2900      	cmp	r1, #0
 80063c2:	d1f3      	bne.n	80063ac <HAL_UART_IRQHandler+0x200>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80063c6:	2a01      	cmp	r2, #1
 80063c8:	d022      	beq.n	8006410 <HAL_UART_IRQHandler+0x264>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80063cc:	2120      	movs	r1, #32
 80063ce:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d2:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d4:	695a      	ldr	r2, [r3, #20]
 80063d6:	0652      	lsls	r2, r2, #25
 80063d8:	d527      	bpl.n	800642a <HAL_UART_IRQHandler+0x27e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063da:	f103 0214 	add.w	r2, r3, #20
 80063de:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	f103 0014 	add.w	r0, r3, #20
 80063ea:	e840 2100 	strex	r1, r2, [r0]
 80063ee:	2900      	cmp	r1, #0
 80063f0:	d1f3      	bne.n	80063da <HAL_UART_IRQHandler+0x22e>
          if (huart->hdmarx != NULL)
 80063f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80063f4:	b1c8      	cbz	r0, 800642a <HAL_UART_IRQHandler+0x27e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063f6:	4b31      	ldr	r3, [pc, #196]	; (80064bc <HAL_UART_IRQHandler+0x310>)
 80063f8:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063fa:	f7fe fe95 	bl	8005128 <HAL_DMA_Abort_IT>
 80063fe:	2800      	cmp	r0, #0
 8006400:	f43f aef0 	beq.w	80061e4 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006404:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006406:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8006408:	b003      	add	sp, #12
 800640a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800640e:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	f103 020c 	add.w	r2, r3, #12
 8006414:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006418:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	f103 000c 	add.w	r0, r3, #12
 8006420:	e840 2100 	strex	r1, r2, [r0]
 8006424:	2900      	cmp	r1, #0
 8006426:	d1f3      	bne.n	8006410 <HAL_UART_IRQHandler+0x264>
 8006428:	e7cf      	b.n	80063ca <HAL_UART_IRQHandler+0x21e>
            HAL_UART_ErrorCallback(huart);
 800642a:	4620      	mov	r0, r4
 800642c:	f7ff fe4c 	bl	80060c8 <HAL_UART_ErrorCallback>
 8006430:	e6d8      	b.n	80061e4 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006432:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8006434:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8006436:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006438:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800643a:	2a00      	cmp	r2, #0
 800643c:	f43f aed2 	beq.w	80061e4 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006440:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006442:	1a51      	subs	r1, r2, r1
 8006444:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8006446:	2900      	cmp	r1, #0
 8006448:	f43f aecc 	beq.w	80061e4 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	f103 020c 	add.w	r2, r3, #12
 8006450:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006454:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006458:	f103 050c 	add.w	r5, r3, #12
 800645c:	e845 2000 	strex	r0, r2, [r5]
 8006460:	2800      	cmp	r0, #0
 8006462:	d1f3      	bne.n	800644c <HAL_UART_IRQHandler+0x2a0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	f103 0214 	add.w	r2, r3, #20
 8006468:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	f103 0514 	add.w	r5, r3, #20
 8006474:	e845 2000 	strex	r0, r2, [r5]
 8006478:	2800      	cmp	r0, #0
 800647a:	d1f3      	bne.n	8006464 <HAL_UART_IRQHandler+0x2b8>
        huart->RxState = HAL_UART_STATE_READY;
 800647c:	2220      	movs	r2, #32
 800647e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006482:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	f103 020c 	add.w	r2, r3, #12
 8006488:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	f103 050c 	add.w	r5, r3, #12
 8006494:	e845 2000 	strex	r0, r2, [r5]
 8006498:	2800      	cmp	r0, #0
 800649a:	d1f3      	bne.n	8006484 <HAL_UART_IRQHandler+0x2d8>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800649c:	4620      	mov	r0, r4
 800649e:	f7ff fe1d 	bl	80060dc <HAL_UARTEx_RxEventCallback>
 80064a2:	e69f      	b.n	80061e4 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a4:	6922      	ldr	r2, [r4, #16]
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	f47f af54 	bne.w	8006354 <HAL_UART_IRQHandler+0x1a8>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064ac:	6a22      	ldr	r2, [r4, #32]
 80064ae:	f832 1b02 	ldrh.w	r1, [r2], #2
 80064b2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80064b6:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80064b8:	6222      	str	r2, [r4, #32]
 80064ba:	e750      	b.n	800635e <HAL_UART_IRQHandler+0x1b2>
 80064bc:	080060cd 	.word	0x080060cd

080064c0 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 80064c0:	88c0      	ldrh	r0, [r0, #6]
 80064c2:	4770      	bx	lr

080064c4 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80064c4:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80064c6:	8840      	ldrh	r0, [r0, #2]
 80064c8:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80064cc:	0c00      	lsrs	r0, r0, #16
 80064ce:	4770      	bx	lr

080064d0 <Circle_Limitation>:

#if defined CIRCLE_LIMITATION_SQRT_M0
const uint16_t SqrtTable[1025] = SQRT_CIRCLE_LIMITATION;
#endif
__weak qd_t Circle_Limitation(CircleLimitation_Handle_t * pHandle, qd_t Vqd)
{
 80064d0:	b570      	push	{r4, r5, r6, lr}
  int32_t vd_square_limit;
  int32_t new_q;
  int32_t new_d;
  qd_t Local_Vqd=Vqd;

  MaxModule = pHandle->MaxModule;
 80064d2:	8803      	ldrh	r3, [r0, #0]
 80064d4:	140c      	asrs	r4, r1, #16
{
 80064d6:	b084      	sub	sp, #16
 80064d8:	b20d      	sxth	r5, r1

  square_q = (int32_t)(Vqd.q) * Vqd.q;
  square_d = (int32_t)(Vqd.d) * Vqd.d;
 80064da:	fb04 f204 	mul.w	r2, r4, r4
{
 80064de:	9101      	str	r1, [sp, #4]
  square_limit = MaxModule * MaxModule;
 80064e0:	fb03 f303 	mul.w	r3, r3, r3
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
  square_sum = square_q + square_d;
 80064e4:	fb05 2105 	mla	r1, r5, r5, r2

  if (square_sum > square_limit)
 80064e8:	428b      	cmp	r3, r1
 80064ea:	da10      	bge.n	800650e <Circle_Limitation+0x3e>
  vd_square_limit = pHandle->MaxVd * pHandle->MaxVd;
 80064ec:	8846      	ldrh	r6, [r0, #2]
 80064ee:	fb06 f006 	mul.w	r0, r6, r6
  {
    if(square_d <= vd_square_limit)
 80064f2:	4282      	cmp	r2, r0
 80064f4:	dd14      	ble.n	8006520 <Circle_Limitation+0x50>
      new_d = Vqd.d;
    }
    else
    {
      new_d = pHandle->MaxVd;
      if(Vqd.d < 0)
 80064f6:	2c00      	cmp	r4, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
      square_temp = (square_limit - vd_square_limit)/1048576;
      new_q = SqrtTable[square_temp];
#else
      square_temp = square_limit - vd_square_limit;
      new_q = MCM_Sqrt(square_temp);
 80064f8:	eba3 0000 	sub.w	r0, r3, r0
        new_d = -new_d;
 80064fc:	bfb8      	it	lt
 80064fe:	4276      	neglt	r6, r6
      new_q = MCM_Sqrt(square_temp);
 8006500:	f7fb ff98 	bl	8002434 <MCM_Sqrt>
#endif
      if(Vqd.q < 0)
 8006504:	2d00      	cmp	r5, #0
      {
        new_q = - new_q;
 8006506:	bfb8      	it	lt
 8006508:	4240      	neglt	r0, r0
 800650a:	b234      	sxth	r4, r6
      }
    }
    Local_Vqd.q = new_q;
 800650c:	b205      	sxth	r5, r0
    Local_Vqd.d = new_d;
  }
  return(Local_Vqd);
 800650e:	b2ad      	uxth	r5, r5
 8006510:	2000      	movs	r0, #0
 8006512:	b2a4      	uxth	r4, r4
 8006514:	f365 000f 	bfi	r0, r5, #0, #16
 8006518:	f364 401f 	bfi	r0, r4, #16, #16
}
 800651c:	b004      	add	sp, #16
 800651e:	bd70      	pop	{r4, r5, r6, pc}
      new_q = MCM_Sqrt(square_temp);
 8006520:	1a98      	subs	r0, r3, r2
 8006522:	f7fb ff87 	bl	8002434 <MCM_Sqrt>
      if(Vqd.q < 0)
 8006526:	2d00      	cmp	r5, #0
 8006528:	daf0      	bge.n	800650c <Circle_Limitation+0x3c>
        new_q = -new_q;
 800652a:	4240      	negs	r0, r0
 800652c:	e7ee      	b.n	800650c <Circle_Limitation+0x3c>
 800652e:	bf00      	nop

08006530 <MCP_ReceivedPacket>:
  uint8_t motorID;
  uint8_t MCPResponse;
  uint8_t userCommand=0;
  int16_t txSyncFreeSpace;
  
  if (pHandle->rxLength != 0)
 8006530:	8982      	ldrh	r2, [r0, #12]
 8006532:	2a00      	cmp	r2, #0
 8006534:	d060      	beq.n	80065f8 <MCP_ReceivedPacket+0xc8>
{
 8006536:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    packetHeader = (uint16_t *) pHandle->rxBuffer;  
 8006538:	6846      	ldr	r6, [r0, #4]
    command = *packetHeader & CMD_MASK;
 800653a:	8833      	ldrh	r3, [r6, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800653c:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
    command = *packetHeader & CMD_MASK;
 8006540:	f023 0507 	bic.w	r5, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8006544:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8006548:	b083      	sub	sp, #12
 800654a:	4604      	mov	r4, r0
    command = *packetHeader & CMD_MASK;
 800654c:	b2ad      	uxth	r5, r5
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800654e:	d06c      	beq.n	800662a <MCP_ReceivedPacket+0xfa>
    MCI_Handle_t * pMCI = &Mci[motorID];
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006550:	6801      	ldr	r1, [r0, #0]
    MCI_Handle_t * pMCI = &Mci[motorID];
 8006552:	4f60      	ldr	r7, [pc, #384]	; (80066d4 <MCP_ReceivedPacket+0x1a4>)
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006554:	8989      	ldrh	r1, [r1, #12]
    motorID = (*packetHeader & MOTOR_MASK)-1;
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	3b01      	subs	r3, #1
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800655c:	3a02      	subs	r2, #2
    MCI_Handle_t * pMCI = &Mci[motorID];
 800655e:	b2db      	uxtb	r3, r3
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8006560:	b290      	uxth	r0, r2
    MCI_Handle_t * pMCI = &Mci[motorID];
 8006562:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8006566:	3602      	adds	r6, #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006568:	3901      	subs	r1, #1
    /* Initialization of the tx length, command which send back data has to set the txLength (case of Read register)*/
    pHandle->txLength = 0;
 800656a:	2200      	movs	r2, #0
    
    switch (command) 
 800656c:	2d60      	cmp	r5, #96	; 0x60
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800656e:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8006570:	6066      	str	r6, [r4, #4]
    MCI_Handle_t * pMCI = &Mci[motorID];
 8006572:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8006576:	b289      	uxth	r1, r1
    pHandle->txLength = 0;
 8006578:	81e2      	strh	r2, [r4, #14]
    switch (command) 
 800657a:	d83e      	bhi.n	80065fa <MCP_ReceivedPacket+0xca>
 800657c:	2d60      	cmp	r5, #96	; 0x60
 800657e:	d832      	bhi.n	80065e6 <MCP_ReceivedPacket+0xb6>
 8006580:	e8df f005 	tbb	[pc, r5]
 8006584:	31313197 	.word	0x31313197
 8006588:	31313131 	.word	0x31313131
 800658c:	3131319f 	.word	0x3131319f
 8006590:	31313131 	.word	0x31313131
 8006594:	31313175 	.word	0x31313175
 8006598:	31313131 	.word	0x31313131
 800659c:	3131314b 	.word	0x3131314b
 80065a0:	31313131 	.word	0x31313131
 80065a4:	31313145 	.word	0x31313145
 80065a8:	31313131 	.word	0x31313131
 80065ac:	3131317a 	.word	0x3131317a
 80065b0:	31313131 	.word	0x31313131
 80065b4:	31313141 	.word	0x31313141
 80065b8:	31313131 	.word	0x31313131
 80065bc:	31313185 	.word	0x31313185
 80065c0:	31313131 	.word	0x31313131
 80065c4:	3131318b 	.word	0x3131318b
 80065c8:	31313131 	.word	0x31313131
 80065cc:	31313191 	.word	0x31313191
 80065d0:	31313131 	.word	0x31313131
 80065d4:	313131a4 	.word	0x313131a4
 80065d8:	31313131 	.word	0x31313131
 80065dc:	313131a4 	.word	0x313131a4
 80065e0:	31313131 	.word	0x31313131
 80065e4:	a4          	.byte	0xa4
 80065e5:	00          	.byte	0x00
 80065e6:	2300      	movs	r3, #0
 80065e8:	2002      	movs	r0, #2
    	  }
        break;
      default :
        MCPResponse = MCP_CMD_UNKNOWN;
      }
      pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80065ea:	68a2      	ldr	r2, [r4, #8]
 80065ec:	54d0      	strb	r0, [r2, r3]
      pHandle->txLength++;
 80065ee:	89e3      	ldrh	r3, [r4, #14]
 80065f0:	3301      	adds	r3, #1
 80065f2:	81e3      	strh	r3, [r4, #14]
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
    /* Nothing to do, txBuffer and txLength have not been modified */
  } 
}
 80065f4:	b003      	add	sp, #12
 80065f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f8:	4770      	bx	lr
    switch (command) 
 80065fa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80065fe:	d065      	beq.n	80066cc <MCP_ReceivedPacket+0x19c>
 8006600:	4613      	mov	r3, r2
 8006602:	2002      	movs	r0, #2
 8006604:	e7f1      	b.n	80065ea <MCP_ReceivedPacket+0xba>
          if (MCI_GetSTMState(pMCI) == IDLE)
 8006606:	4638      	mov	r0, r7
 8006608:	f7fb fd70 	bl	80020ec <MCI_GetSTMState>
 800660c:	b128      	cbz	r0, 800661a <MCP_ReceivedPacket+0xea>
            MCI_StopMotor(pMCI);
 800660e:	4638      	mov	r0, r7
 8006610:	f7fb fd24 	bl	800205c <MCI_StopMotor>
            MCPResponse = MCP_CMD_OK;
 8006614:	89e3      	ldrh	r3, [r4, #14]
 8006616:	2000      	movs	r0, #0
 8006618:	e7e7      	b.n	80065ea <MCP_ReceivedPacket+0xba>
            MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 800661a:	4638      	mov	r0, r7
 800661c:	f7fb fd14 	bl	8002048 <MCI_StartMotor>
 8006620:	f080 0001 	eor.w	r0, r0, #1
 8006624:	89e3      	ldrh	r3, [r4, #14]
 8006626:	b2c0      	uxtb	r0, r0
 8006628:	e7df      	b.n	80065ea <MCP_ReceivedPacket+0xba>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800662a:	6801      	ldr	r1, [r0, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800662c:	3a02      	subs	r2, #2
        userCommand = (command >> 3) & 0x1f;
 800662e:	f3c5 03c7 	ubfx	r3, r5, #3, #8
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8006632:	b290      	uxth	r0, r2
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8006634:	3602      	adds	r6, #2
    pHandle->txLength = 0;
 8006636:	2200      	movs	r2, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8006638:	f013 0f1e 	tst.w	r3, #30
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800663c:	8989      	ldrh	r1, [r1, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800663e:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8006640:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0;
 8006642:	81e2      	strh	r2, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8006644:	d002      	beq.n	800664c <MCP_ReceivedPacket+0x11c>
        MCPResponse = MCP_CMD_OK;
 8006646:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8006648:	200d      	movs	r0, #13
 800664a:	e7ce      	b.n	80065ea <MCP_ReceivedPacket+0xba>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800664c:	3901      	subs	r1, #1
 800664e:	b20a      	sxth	r2, r1
        userCommand = (command >> 3) & 0x1f;
 8006650:	f003 031f 	and.w	r3, r3, #31
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8006654:	4920      	ldr	r1, [pc, #128]	; (80066d8 <MCP_ReceivedPacket+0x1a8>)
 8006656:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800665a:	2d00      	cmp	r5, #0
 800665c:	d0f3      	beq.n	8006646 <MCP_ReceivedPacket+0x116>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 800665e:	68a3      	ldr	r3, [r4, #8]
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	4631      	mov	r1, r6
 8006664:	f104 030e 	add.w	r3, r4, #14
 8006668:	47a8      	blx	r5
 800666a:	89e3      	ldrh	r3, [r4, #14]
 800666c:	e7bd      	b.n	80065ea <MCP_ReceivedPacket+0xba>
        MCPResponse = RI_GetRegCommandParser (pHandle,txSyncFreeSpace); 
 800666e:	4620      	mov	r0, r4
 8006670:	f7fd f8c2 	bl	80037f8 <RI_GetRegCommandParser>
        break;
 8006674:	89e3      	ldrh	r3, [r4, #14]
 8006676:	e7b8      	b.n	80065ea <MCP_ReceivedPacket+0xba>
          if (MCI_GetSTMState(pMCI) == RUN)
 8006678:	4638      	mov	r0, r7
 800667a:	f7fb fd37 	bl	80020ec <MCI_GetSTMState>
 800667e:	2806      	cmp	r0, #6
 8006680:	d1c8      	bne.n	8006614 <MCP_ReceivedPacket+0xe4>
            MCI_StopRamp(pMCI);
 8006682:	4638      	mov	r0, r7
 8006684:	f7fb fd64 	bl	8002150 <MCI_StopRamp>
 8006688:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800668a:	2000      	movs	r0, #0
 800668c:	e7ad      	b.n	80065ea <MCP_ReceivedPacket+0xba>
          MCI_FaultAcknowledged(pMCI);
 800668e:	4638      	mov	r0, r7
 8006690:	f7fb fce8 	bl	8002064 <MCI_FaultAcknowledged>
        break;
 8006694:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 8006696:	2000      	movs	r0, #0
        break;
 8006698:	e7a7      	b.n	80065ea <MCP_ReceivedPacket+0xba>
        MCI_EncoderAlign(pMCI);
 800669a:	4638      	mov	r0, r7
 800669c:	f7fb fce6 	bl	800206c <MCI_EncoderAlign>
        break;
 80066a0:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80066a2:	2000      	movs	r0, #0
        break;
 80066a4:	e7a1      	b.n	80065ea <MCP_ReceivedPacket+0xba>
        MCI_Clear_Iqdref(pMCI);
 80066a6:	4638      	mov	r0, r7
 80066a8:	f7fb fde2 	bl	8002270 <MCI_Clear_Iqdref>
        break;
 80066ac:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80066ae:	2000      	movs	r0, #0
        break;
 80066b0:	e79b      	b.n	80065ea <MCP_ReceivedPacket+0xba>
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80066b2:	68a3      	ldr	r3, [r4, #8]
    	pHandle->txLength = 4;
 80066b4:	2104      	movs	r1, #4
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80066b6:	2201      	movs	r2, #1
    	pHandle->txLength = 4;
 80066b8:	81e1      	strh	r1, [r4, #14]
    	*pHandle->txBuffer = (uint32_t) MCP_VERSION;
 80066ba:	701a      	strb	r2, [r3, #0]
      break;
 80066bc:	89e3      	ldrh	r3, [r4, #14]
    	MCPResponse = MCP_CMD_OK;
 80066be:	2000      	movs	r0, #0
      break;
 80066c0:	e793      	b.n	80065ea <MCP_ReceivedPacket+0xba>
        MCPResponse = RI_SetRegCommandParser (pHandle,txSyncFreeSpace); 
 80066c2:	4620      	mov	r0, r4
 80066c4:	f7fc fcf2 	bl	80030ac <RI_SetRegCommandParser>
      break;
 80066c8:	89e3      	ldrh	r3, [r4, #14]
 80066ca:	e78e      	b.n	80065ea <MCP_ReceivedPacket+0xba>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80066cc:	b20a      	sxth	r2, r1
  uint8_t userCommand=0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	e7c0      	b.n	8006654 <MCP_ReceivedPacket+0x124>
 80066d2:	bf00      	nop
 80066d4:	200009a0 	.word	0x200009a0
 80066d8:	20000a3c 	.word	0x20000a3c

080066dc <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog (MCPA_Handle_t *pHandle)
{
 80066dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80066de:	7fc3      	ldrb	r3, [r0, #31]
 80066e0:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 80066e4:	429a      	cmp	r2, r3
{
 80066e6:	4604      	mov	r4, r0
  if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80066e8:	d002      	beq.n	80066f0 <MCPA_dataLog+0x14>
    }     
  }
  else 
  {
    /* nothing to log just waiting next call to MCPA_datalog*/
    pHandle->HFIndex++;
 80066ea:	3301      	adds	r3, #1
 80066ec:	77c3      	strb	r3, [r0, #31]
  }
}  
 80066ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pHandle->bufferIndex == 0)
 80066f0:	8b05      	ldrh	r5, [r0, #24]
    pHandle->HFIndex = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	77c3      	strb	r3, [r0, #31]
    if (pHandle->bufferIndex == 0)
 80066f6:	b1a5      	cbz	r5, 8006722 <MCPA_dataLog+0x46>
 80066f8:	6961      	ldr	r1, [r4, #20]
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 80066fa:	8ba0      	ldrh	r0, [r4, #28]
 80066fc:	42a8      	cmp	r0, r5
 80066fe:	d24d      	bcs.n	800679c <MCPA_dataLog+0xc0>
 8006700:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
      if (pHandle->MFRateBuff == 254) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8006704:	2afe      	cmp	r2, #254	; 0xfe
 8006706:	d068      	beq.n	80067da <MCPA_dataLog+0xfe>
       *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8006708:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800670c:	534b      	strh	r3, [r1, r5]
       pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 800670e:	8b22      	ldrh	r2, [r4, #24]
 8006710:	6820      	ldr	r0, [r4, #0]
 8006712:	3202      	adds	r2, #2
 8006714:	2309      	movs	r3, #9
 8006716:	6845      	ldr	r5, [r0, #4]
 8006718:	b292      	uxth	r2, r2
 800671a:	47a8      	blx	r5
       pHandle->bufferIndex = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	8323      	strh	r3, [r4, #24]
}  
 8006720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer, (void **) &pHandle->currentBuffer, MCTL_ASYNC))
 8006722:	4601      	mov	r1, r0
 8006724:	2209      	movs	r2, #9
 8006726:	f851 0b14 	ldr.w	r0, [r1], #20
 800672a:	6803      	ldr	r3, [r0, #0]
 800672c:	4798      	blx	r3
 800672e:	b388      	cbz	r0, 8006794 <MCPA_dataLog+0xb8>
        *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8006730:	4b4b      	ldr	r3, [pc, #300]	; (8006860 <MCPA_dataLog+0x184>)
        logValue = (uint32_t *) pHandle->currentBuffer;
 8006732:	6961      	ldr	r1, [r4, #20]
        *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	600b      	str	r3, [r1, #0]
        if (pHandle->Mark != pHandle->MarkBuff)
 8006738:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800673c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
        pHandle->MFIndex = 0; /* Restart the motif from scratch at each buffer*/
 8006740:	f884 5020 	strb.w	r5, [r4, #32]
        if (pHandle->Mark != pHandle->MarkBuff)
 8006744:	429a      	cmp	r2, r3
        pHandle->bufferIndex = 4; 
 8006746:	f04f 0504 	mov.w	r5, #4
 800674a:	8325      	strh	r5, [r4, #24]
        if (pHandle->Mark != pHandle->MarkBuff)
 800674c:	d0d5      	beq.n	80066fa <MCPA_dataLog+0x1e>
          pHandle->HFNumBuff = pHandle->HFNum;
 800674e:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
          pHandle->MFNumBuff = pHandle->MFNum;
 8006752:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
          pHandle->HFRateBuff = pHandle->HFRate;
 8006756:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
          pHandle->MFRateBuff = pHandle->MFRate;
 800675a:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
          pHandle->MarkBuff = pHandle->Mark;
 800675e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 8006762:	1842      	adds	r2, r0, r1
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8006764:	8b63      	ldrh	r3, [r4, #26]
          pHandle->HFNumBuff = pHandle->HFNum;
 8006766:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
          pHandle->MFNumBuff = pHandle->MFNum;
 800676a:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 800676e:	0092      	lsls	r2, r2, #2
 8006770:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
          pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8006774:	83a3      	strh	r3, [r4, #28]
          pHandle->HFRateBuff = pHandle->HFRate;
 8006776:	f884 6022 	strb.w	r6, [r4, #34]	; 0x22
          pHandle->MFRateBuff = pHandle->MFRate;
 800677a:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum)*4); /* We store pointer here, so 4 bytes */
 800677e:	f001 ff03 	bl	8008588 <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8006782:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8006786:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800678a:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 800678e:	441a      	add	r2, r3
 8006790:	f001 fefa 	bl	8008588 <memcpy>
    if ((pHandle->bufferIndex > 0)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff ))
 8006794:	8b25      	ldrh	r5, [r4, #24]
 8006796:	2d00      	cmp	r5, #0
 8006798:	d1ae      	bne.n	80066f8 <MCPA_dataLog+0x1c>
}  
 800679a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (i=0; i<pHandle->HFNumBuff; i++)
 800679c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 80067a0:	194e      	adds	r6, r1, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d055      	beq.n	8006852 <MCPA_dataLog+0x176>
        *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]);
 80067a6:	2200      	movs	r2, #0
 80067a8:	68a7      	ldr	r7, [r4, #8]
 80067aa:	4610      	mov	r0, r2
 80067ac:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	f826 3b02 	strh.w	r3, [r6], #2
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 80067b6:	8b25      	ldrh	r5, [r4, #24]
      for (i=0; i<pHandle->HFNumBuff; i++)
 80067b8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80067bc:	3201      	adds	r2, #1
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 80067be:	3502      	adds	r5, #2
      for (i=0; i<pHandle->HFNumBuff; i++)
 80067c0:	b2d0      	uxtb	r0, r2
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 80067c2:	b2ad      	uxth	r5, r5
      for (i=0; i<pHandle->HFNumBuff; i++)
 80067c4:	4283      	cmp	r3, r0
        pHandle->bufferIndex = pHandle->bufferIndex+2;
 80067c6:	8325      	strh	r5, [r4, #24]
      for (i=0; i<pHandle->HFNumBuff; i++)
 80067c8:	d8f0      	bhi.n	80067ac <MCPA_dataLog+0xd0>
      if (pHandle->MFRateBuff < 254) 
 80067ca:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80067ce:	2afd      	cmp	r2, #253	; 0xfd
 80067d0:	d919      	bls.n	8006806 <MCPA_dataLog+0x12a>
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80067d2:	8ba3      	ldrh	r3, [r4, #28]
 80067d4:	42ab      	cmp	r3, r5
 80067d6:	d395      	bcc.n	8006704 <MCPA_dataLog+0x28>
}  
 80067d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80067da:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80067de:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80067e2:	4418      	add	r0, r3
 80067e4:	4298      	cmp	r0, r3
 80067e6:	dd8f      	ble.n	8006708 <MCPA_dataLog+0x2c>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80067e8:	68a7      	ldr	r7, [r4, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80067ea:	6926      	ldr	r6, [r4, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80067ec:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80067f0:	6812      	ldr	r2, [r2, #0]
 80067f2:	514a      	str	r2, [r1, r5]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80067f4:	5cf2      	ldrb	r2, [r6, r3]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80067f6:	3301      	adds	r3, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80067f8:	4415      	add	r5, r2
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80067fa:	b2db      	uxtb	r3, r3
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80067fc:	b2ad      	uxth	r5, r5
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80067fe:	4283      	cmp	r3, r0
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006800:	8325      	strh	r5, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006802:	dbf3      	blt.n	80067ec <MCPA_dataLog+0x110>
 8006804:	e780      	b.n	8006708 <MCPA_dataLog+0x2c>
 8006806:	8ba0      	ldrh	r0, [r4, #28]
        if (pHandle->MFIndex == pHandle->MFRateBuff)  
 8006808:	f894 5020 	ldrb.w	r5, [r4, #32]
 800680c:	4295      	cmp	r5, r2
 800680e:	d007      	beq.n	8006820 <MCPA_dataLog+0x144>
          pHandle->MFIndex ++;
 8006810:	3501      	adds	r5, #1
 8006812:	f884 5020 	strb.w	r5, [r4, #32]
 8006816:	8b25      	ldrh	r5, [r4, #24]
    if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8006818:	42a8      	cmp	r0, r5
 800681a:	f4ff af75 	bcc.w	8006708 <MCPA_dataLog+0x2c>
}  
 800681e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006820:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 8006824:	441e      	add	r6, r3
          pHandle->MFIndex = 0;
 8006826:	2200      	movs	r2, #0
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006828:	429e      	cmp	r6, r3
          pHandle->MFIndex = 0;
 800682a:	f884 2020 	strb.w	r2, [r4, #32]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800682e:	dd15      	ble.n	800685c <MCPA_dataLog+0x180>
            *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8006830:	f8d4 c008 	ldr.w	ip, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006834:	6927      	ldr	r7, [r4, #16]
 8006836:	8b25      	ldrh	r5, [r4, #24]
            *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8006838:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	514a      	str	r2, [r1, r5]
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006840:	5cfa      	ldrb	r2, [r7, r3]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006842:	3301      	adds	r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006844:	4415      	add	r5, r2
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006846:	b2db      	uxtb	r3, r3
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8006848:	b2ad      	uxth	r5, r5
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800684a:	42b3      	cmp	r3, r6
            pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800684c:	8325      	strh	r5, [r4, #24]
          for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800684e:	dbf3      	blt.n	8006838 <MCPA_dataLog+0x15c>
 8006850:	e7e2      	b.n	8006818 <MCPA_dataLog+0x13c>
      if (pHandle->MFRateBuff < 254) 
 8006852:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8006856:	2afd      	cmp	r2, #253	; 0xfd
 8006858:	d9d6      	bls.n	8006808 <MCPA_dataLog+0x12c>
}  
 800685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800685c:	8b25      	ldrh	r5, [r4, #24]
 800685e:	e7db      	b.n	8006818 <MCPA_dataLog+0x13c>
 8006860:	20000860 	.word	0x20000860

08006864 <MCPA_flushDataLog>:

void MCPA_flushDataLog (MCPA_Handle_t *pHandle)
{
 8006864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8006866:	8b03      	ldrh	r3, [r0, #24]
 8006868:	b18b      	cbz	r3, 800688e <MCPA_flushDataLog+0x2a>
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 800686a:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800686e:	2afe      	cmp	r2, #254	; 0xfe
 8006870:	4604      	mov	r4, r0
 8006872:	d00d      	beq.n	8006890 <MCPA_flushDataLog+0x2c>
 8006874:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8006876:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800687a:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 800687c:	8b22      	ldrh	r2, [r4, #24]
 800687e:	6820      	ldr	r0, [r4, #0]
 8006880:	3202      	adds	r2, #2
 8006882:	2309      	movs	r3, #9
 8006884:	6845      	ldr	r5, [r0, #4]
 8006886:	b292      	uxth	r2, r2
 8006888:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	8323      	strh	r3, [r4, #24]
  }   
}
 800688e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8006890:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8006894:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8006898:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800689a:	4415      	add	r5, r2
 800689c:	42aa      	cmp	r2, r5
 800689e:	daea      	bge.n	8006876 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80068a0:	6887      	ldr	r7, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80068a2:	6906      	ldr	r6, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80068a4:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
 80068a8:	6800      	ldr	r0, [r0, #0]
 80068aa:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80068ac:	5cb0      	ldrb	r0, [r6, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80068ae:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80068b0:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80068b2:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80068b4:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80068b6:	42aa      	cmp	r2, r5
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80068b8:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80068ba:	dbf3      	blt.n	80068a4 <MCPA_flushDataLog+0x40>
 80068bc:	e7db      	b.n	8006876 <MCPA_flushDataLog+0x12>
 80068be:	bf00      	nop

080068c0 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}
  
uint8_t MCPA_cfgLog (MCPA_Handle_t *pHandle, uint8_t * cfgdata)
{
 80068c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t newID, buffSize;
  uint8_t i;
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
  uint8_t result = MCP_CMD_OK;
  
  buffSize = *((uint16_t *) cfgdata);
 80068c4:	880e      	ldrh	r6, [r1, #0]
{
 80068c6:	4604      	mov	r4, r0
  if (buffSize == 0)
 80068c8:	2e00      	cmp	r6, #0
 80068ca:	d041      	beq.n	8006950 <MCPA_cfgLog+0x90>
  { 
    /* Switch Off condition */
    MCPA_stopDataLog(pHandle);
  }
  else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 80068cc:	6803      	ldr	r3, [r0, #0]
 80068ce:	89db      	ldrh	r3, [r3, #14]
 80068d0:	42b3      	cmp	r3, r6
 80068d2:	d33a      	bcc.n	800694a <MCPA_cfgLog+0x8a>
  {
    result = MCP_ERROR_NO_TXASYNC_SPACE;
  }  
  else
  {
     pHandle->HFRate = *((uint8_t *) &cfgdata[2]);
 80068d4:	788b      	ldrb	r3, [r1, #2]
 80068d6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
     pHandle->HFNum  = *((uint8_t *) &cfgdata[3]);
 80068da:	78cf      	ldrb	r7, [r1, #3]
 80068dc:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
     pHandle->MFRate = *((uint8_t *) &cfgdata[4]);
 80068e0:	790b      	ldrb	r3, [r1, #4]
 80068e2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
     pHandle->MFNum =  *((uint8_t *) &cfgdata[5]);
 80068e6:	794a      	ldrb	r2, [r1, #5]
     cfgdata = &cfgdata[6]; /* Start of the HF IDs*/
     if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 80068e8:	7f83      	ldrb	r3, [r0, #30]
     pHandle->MFNum =  *((uint8_t *) &cfgdata[5]);
 80068ea:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
     if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 80068ee:	4417      	add	r7, r2
 80068f0:	429f      	cmp	r7, r3
 80068f2:	dc4f      	bgt.n	8006994 <MCPA_cfgLog+0xd4>
     cfgdata = &cfgdata[6]; /* Start of the HF IDs*/
 80068f4:	3106      	adds	r1, #6
     {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80068f6:	2f00      	cmp	r7, #0
 80068f8:	d053      	beq.n	80069a2 <MCPA_cfgLog+0xe2>
  uint8_t logSize=0; /* Max size of a log per iteration (HF+MF)*/
 80068fa:	2700      	movs	r7, #0
 80068fc:	4688      	mov	r8, r1
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80068fe:	463d      	mov	r5, r7
 8006900:	e010      	b.n	8006924 <MCPA_cfgLog+0x64>
       {
         newID = *((uint16_t *) cfgdata);
         RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8006902:	2002      	movs	r0, #2
 8006904:	68e3      	ldr	r3, [r4, #12]
 8006906:	5558      	strb	r0, [r3, r5]
         logSize = logSize+pHandle->dataSizeTable[i];
 8006908:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800690a:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 800690e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
         logSize = logSize+pHandle->dataSizeTable[i];
 8006912:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8006914:	3501      	adds	r5, #1
 8006916:	440b      	add	r3, r1
 8006918:	b2ed      	uxtb	r5, r5
         logSize = logSize+pHandle->dataSizeTable[i];
 800691a:	443a      	add	r2, r7
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800691c:	429d      	cmp	r5, r3
         logSize = logSize+pHandle->dataSizeTable[i];
 800691e:	b2d7      	uxtb	r7, r2
         cfgdata = cfgdata+2; /* Point to the next UID */
 8006920:	4641      	mov	r1, r8
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8006922:	da0f      	bge.n	8006944 <MCPA_cfgLog+0x84>
         newID = *((uint16_t *) cfgdata);
 8006924:	f838 9b02 	ldrh.w	r9, [r8], #2
         RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8006928:	6861      	ldr	r1, [r4, #4]
 800692a:	4648      	mov	r0, r9
 800692c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8006930:	f7fd fbd0 	bl	80040d4 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8006934:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8006938:	42ab      	cmp	r3, r5
 800693a:	d8e2      	bhi.n	8006902 <MCPA_cfgLog+0x42>
 800693c:	4648      	mov	r0, r9
 800693e:	f7fd fbbd 	bl	80040bc <RI_GetIDSize>
 8006942:	e7df      	b.n	8006904 <MCPA_cfgLog+0x44>
 8006944:	1d7b      	adds	r3, r7, #5
       }
       if (buffSize < (logSize+2+4) ) /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
 8006946:	429e      	cmp	r6, r3
 8006948:	dc1a      	bgt.n	8006980 <MCPA_cfgLog+0xc0>
    result = MCP_ERROR_NO_TXASYNC_SPACE;
 800694a:	2009      	movs	r0, #9
     {
       result = MCP_ERROR_BAD_RAW_FORMAT;
     }
  }
  return result;
}
 800694c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8006950:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 8006952:	f880 6029 	strb.w	r6, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8006956:	b153      	cbz	r3, 800696e <MCPA_cfgLog+0xae>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8006958:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 800695a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800695e:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8006960:	8b22      	ldrh	r2, [r4, #24]
 8006962:	6820      	ldr	r0, [r4, #0]
 8006964:	3202      	adds	r2, #2
 8006966:	6845      	ldr	r5, [r0, #4]
 8006968:	b292      	uxth	r2, r2
 800696a:	2309      	movs	r3, #9
 800696c:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 800696e:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 8006970:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8006974:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8006976:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 800697a:	8320      	strh	r0, [r4, #24]
}
 800697c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
         pHandle->bufferTxTrigger = buffSize-logSize-2; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8006980:	1eb2      	subs	r2, r6, #2
 8006982:	1bd2      	subs	r2, r2, r7
 8006984:	8362      	strh	r2, [r4, #26]
         pHandle->Mark =   *((uint8_t *) cfgdata);
 8006986:	780b      	ldrb	r3, [r1, #0]
 8006988:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
         if (pHandle->Mark == 0)
 800698c:	b12b      	cbz	r3, 800699a <MCPA_cfgLog+0xda>
  uint8_t result = MCP_CMD_OK;
 800698e:	2000      	movs	r0, #0
}
 8006990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 8006994:	200a      	movs	r0, #10
}
 8006996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 800699a:	8b23      	ldrh	r3, [r4, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0e6      	beq.n	800696e <MCPA_cfgLog+0xae>
 80069a0:	e7da      	b.n	8006958 <MCPA_cfgLog+0x98>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80069a2:	2305      	movs	r3, #5
 80069a4:	e7cf      	b.n	8006946 <MCPA_cfgLog+0x86>
 80069a6:	bf00      	nop

080069a8 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80069a8:	b510      	push	{r4, lr}
 80069aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069ae:	4604      	mov	r4, r0
 80069b0:	2100      	movs	r1, #0
 80069b2:	f001 fdf7 	bl	80085a4 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80069b6:	2300      	movs	r3, #0
 80069b8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 80069bc:	bd10      	pop	{r4, pc}
 80069be:	bf00      	nop

080069c0 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80069c0:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 80069c4:	1c53      	adds	r3, r2, #1
 80069c6:	b29b      	uxth	r3, r3
{
 80069c8:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 80069ca:	2b7f      	cmp	r3, #127	; 0x7f
{
 80069cc:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 80069ce:	bf88      	it	hi
 80069d0:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80069d2:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 80069d6:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80069d8:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 80069dc:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80069e0:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 80069e4:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 80069e6:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80069e8:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80069ec:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80069ee:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80069f0:	d1fa      	bne.n	80069e8 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	bfb8      	it	lt
 80069f6:	327f      	addlt	r2, #127	; 0x7f
 80069f8:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 80069fa:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 80069fe:	bc70      	pop	{r4, r5, r6}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop

08006a04 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8006a04:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop

08006a0c <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8006a0c:	8a03      	ldrh	r3, [r0, #16]
 8006a0e:	8b42      	ldrh	r2, [r0, #26]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d306      	bcc.n	8006a22 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8006a14:	8b82      	ldrh	r2, [r0, #28]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d901      	bls.n	8006a1e <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8006a1a:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8006a1c:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8006a1e:	8ac0      	ldrh	r0, [r0, #22]
 8006a20:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8006a22:	2008      	movs	r0, #8
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop

08006a28 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	8203      	strh	r3, [r0, #16]
}
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop

08006a30 <NTC_Init>:
{
 8006a30:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a32:	7803      	ldrb	r3, [r0, #0]
{
 8006a34:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a36:	b123      	cbz	r3, 8006a42 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006a38:	8a43      	ldrh	r3, [r0, #18]
 8006a3a:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	82c2      	strh	r2, [r0, #22]
}
 8006a40:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8006a42:	3004      	adds	r0, #4
 8006a44:	f7fd fc2a 	bl	800429c <RCM_RegisterRegConv>
 8006a48:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	f7ff ffeb 	bl	8006a28 <NTC_Clear>
}
 8006a52:	bd10      	pop	{r4, pc}

08006a54 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8006a54:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a56:	7803      	ldrb	r3, [r0, #0]
{
 8006a58:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a5a:	b113      	cbz	r3, 8006a62 <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8006a60:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006a62:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8006a66:	f7fd fceb 	bl	8004440 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8006a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a6e:	4298      	cmp	r0, r3
 8006a70:	d007      	beq.n	8006a82 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006a72:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8006a74:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006a76:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8006a78:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8006a7c:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8006a80:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8006a82:	4620      	mov	r0, r4
 8006a84:	f7ff ffc2 	bl	8006a0c <NTC_SetFaultState>
 8006a88:	82e0      	strh	r0, [r4, #22]
}
 8006a8a:	bd10      	pop	{r4, pc}

08006a8c <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a8c:	7803      	ldrb	r3, [r0, #0]
 8006a8e:	b983      	cbnz	r3, 8006ab2 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8006a90:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006a92:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8006a94:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006a98:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006a9a:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8006a9c:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bfbc      	itt	lt
 8006aa4:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8006aa8:	33ff      	addlt	r3, #255	; 0xff
 8006aaa:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8006aae:	b200      	sxth	r0, r0
 8006ab0:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8006ab2:	8a80      	ldrh	r0, [r0, #20]
}
 8006ab4:	b200      	sxth	r0, r0
 8006ab6:	4770      	bx	lr

08006ab8 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8006ab8:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006aba:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006abc:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006abe:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006ac0:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8006ac2:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8006ac4:	6283      	str	r3, [r0, #40]	; 0x28
}
 8006ac6:	4770      	bx	lr

08006ac8 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8006ac8:	8081      	strh	r1, [r0, #4]
}
 8006aca:	4770      	bx	lr

08006acc <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8006acc:	80c1      	strh	r1, [r0, #6]
}
 8006ace:	4770      	bx	lr

08006ad0 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8006ad0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop

08006ad8 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8006ad8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop

08006ae0 <PID_GetDefaultKP>:
 * @retval default Kp gain
 */
__weak int16_t PID_GetDefaultKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hDefKpGain );
}
 8006ae0:	f9b0 0000 	ldrsh.w	r0, [r0]
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop

08006ae8 <PID_GetDefaultKI>:
 * @retval default Ki gain
 */
__weak int16_t PID_GetDefaultKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hDefKiGain );
}
 8006ae8:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop

08006af0 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8006af0:	6081      	str	r1, [r0, #8]

  return;
}
 8006af2:	4770      	bx	lr

08006af4 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8006af4:	8b00      	ldrh	r0, [r0, #24]
 8006af6:	4770      	bx	lr

08006af8 <PID_GetKPDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKpDivisorPOW2: Kp divisor expressed as power of 2
 */
__weak uint16_t PID_GetKPDivisorPOW2(PID_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
 8006af8:	b100      	cbz	r0, 8006afc <PID_GetKPDivisorPOW2+0x4>
 8006afa:	8b80      	ldrh	r0, [r0, #28]
}
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop

08006b00 <PID_SetKPDivisorPOW2>:
 * @retval None
 */
__weak void PID_SetKPDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKpDivisorPOW2 )
{
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 8006b00:	2301      	movs	r3, #1
 8006b02:	408b      	lsls	r3, r1
  pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8006b04:	8381      	strh	r1, [r0, #28]
  pHandle->hKpDivisor = ( ( uint16_t )( 1u ) << hKpDivisorPOW2 );
 8006b06:	8303      	strh	r3, [r0, #24]
}
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop

08006b0c <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8006b0c:	8b40      	ldrh	r0, [r0, #26]
 8006b0e:	4770      	bx	lr

08006b10 <PID_GetKIDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKiDivisorPOW2: Ki divisor expressed as power of 2
 */
__weak uint16_t PID_GetKIDivisorPOW2(PID_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
 8006b10:	b100      	cbz	r0, 8006b14 <PID_GetKIDivisorPOW2+0x4>
 8006b12:	8bc0      	ldrh	r0, [r0, #30]
}
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop

08006b18 <PID_SetLowerIntegralTermLimit>:
 * @param  wLowerLimit: new lower integral term limit value
 * @retval None
 */
__weak void PID_SetLowerIntegralTermLimit( PID_Handle_t * pHandle, int32_t wLowerLimit )
{
  pHandle->wLowerIntegralLimit = wLowerLimit;
 8006b18:	6101      	str	r1, [r0, #16]
}
 8006b1a:	4770      	bx	lr

08006b1c <PID_SetUpperIntegralTermLimit>:
 * @param  wUpperLimit: new upper integral term limit value
 * @retval None
 */
__weak void PID_SetUpperIntegralTermLimit( PID_Handle_t * pHandle, int32_t wUpperLimit )
{
  pHandle->wUpperIntegralLimit = wUpperLimit;
 8006b1c:	60c1      	str	r1, [r0, #12]
}
 8006b1e:	4770      	bx	lr

08006b20 <PID_SetKIDivisorPOW2>:
{
 8006b20:	b538      	push	{r3, r4, r5, lr}
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 8006b22:	2301      	movs	r3, #1
{
 8006b24:	460c      	mov	r4, r1
  int32_t wKiDiv = ( ( int32_t )( 1u ) << hKiDivisorPOW2 );
 8006b26:	408b      	lsls	r3, r1
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8006b28:	f647 71ff 	movw	r1, #32767	; 0x7fff
  pHandle->hKiDivisor = ( uint16_t )( wKiDiv );
 8006b2c:	8343      	strh	r3, [r0, #26]
  pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8006b2e:	83c4      	strh	r4, [r0, #30]
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8006b30:	40a1      	lsls	r1, r4
{
 8006b32:	4605      	mov	r5, r0
  PID_SetUpperIntegralTermLimit( pHandle, ( int32_t )INT16_MAX * wKiDiv );
 8006b34:	f7ff fff2 	bl	8006b1c <PID_SetUpperIntegralTermLimit>
  PID_SetLowerIntegralTermLimit( pHandle, ( int32_t ) - INT16_MAX * wKiDiv );
 8006b38:	4902      	ldr	r1, [pc, #8]	; (8006b44 <PID_SetKIDivisorPOW2+0x24>)
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	40a1      	lsls	r1, r4
 8006b3e:	f7ff ffeb 	bl	8006b18 <PID_SetLowerIntegralTermLimit>
}
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	ffff8001 	.word	0xffff8001

08006b48 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8006b48:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8006b4a:	4770      	bx	lr

08006b4c <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8006b4c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop

08006b54 <PID_GetKDDivisorPOW2>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval hKdDivisorPOW2: Ki divisor expressed as power of 2
 */
__weak uint16_t PID_GetKDDivisorPOW2(PID_Handle_t * pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
 8006b54:	b100      	cbz	r0, 8006b58 <PID_GetKDDivisorPOW2+0x4>
 8006b56:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
}
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop

08006b5c <PID_SetKDDivisorPOW2>:
 * @param hKdDivisorPOW2
 */
__weak void PID_SetKDDivisorPOW2( PID_Handle_t * pHandle, uint16_t hKdDivisorPOW2 )
{
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	408b      	lsls	r3, r1
  pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8006b60:	84c1      	strh	r1, [r0, #38]	; 0x26
  pHandle->hKdDivisor = ( ( uint16_t )( 1u ) << hKdDivisorPOW2 );
 8006b62:	8483      	strh	r3, [r0, #36]	; 0x24
}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop

08006b68 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006b68:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8006b6c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8006b70:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006b72:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006b76:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006b7a:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8006b7e:	b162      	cbz	r2, 8006b9a <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8006b80:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006b82:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 8006b86:	1872      	adds	r2, r6, r1
 8006b88:	d420      	bmi.n	8006bcc <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8006b8a:	2e00      	cmp	r6, #0
 8006b8c:	db29      	blt.n	8006be2 <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006b8e:	68c1      	ldr	r1, [r0, #12]
 8006b90:	4291      	cmp	r1, r2
 8006b92:	db03      	blt.n	8006b9c <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8006b94:	6901      	ldr	r1, [r0, #16]
 8006b96:	4291      	cmp	r1, r2
 8006b98:	dc00      	bgt.n	8006b9c <PI_Controller+0x34>
 8006b9a:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8006b9c:	8b86      	ldrh	r6, [r0, #28]
 8006b9e:	8bc2      	ldrh	r2, [r0, #30]
 8006ba0:	4133      	asrs	r3, r6
 8006ba2:	fa41 f202 	asr.w	r2, r1, r2
 8006ba6:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8006ba8:	429c      	cmp	r4, r3
 8006baa:	da05      	bge.n	8006bb8 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8006bac:	1ae3      	subs	r3, r4, r3
 8006bae:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8006bb0:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	bc70      	pop	{r4, r5, r6}
 8006bb6:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8006bb8:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8006bba:	bfc9      	itett	gt
 8006bbc:	1aeb      	subgt	r3, r5, r3
 8006bbe:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8006bc0:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 8006bc2:	18c9      	addgt	r1, r1, r3
 8006bc4:	6081      	str	r1, [r0, #8]
}
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	bc70      	pop	{r4, r5, r6}
 8006bca:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8006bcc:	2e00      	cmp	r6, #0
 8006bce:	ddde      	ble.n	8006b8e <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8006bd0:	2900      	cmp	r1, #0
 8006bd2:	dddc      	ble.n	8006b8e <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006bd4:	68c1      	ldr	r1, [r0, #12]
 8006bd6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006bda:	4291      	cmp	r1, r2
 8006bdc:	d1de      	bne.n	8006b9c <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 8006bde:	460a      	mov	r2, r1
 8006be0:	e7db      	b.n	8006b9a <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8006be2:	4e03      	ldr	r6, [pc, #12]	; (8006bf0 <PI_Controller+0x88>)
 8006be4:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8006be8:	bf28      	it	cs
 8006bea:	4632      	movcs	r2, r6
 8006bec:	e7cf      	b.n	8006b8e <PI_Controller+0x26>
 8006bee:	bf00      	nop
 8006bf0:	80000001 	.word	0x80000001

08006bf4 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8006bf4:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006bf6:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006bfa:	8b11      	ldrh	r1, [r2, #24]
 8006bfc:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006bfe:	8995      	ldrh	r5, [r2, #12]
 8006c00:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006c02:	fb13 f301 	smulbb	r3, r3, r1
{
 8006c06:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006c08:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006c0c:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006c10:	f7ff fc58 	bl	80064c4 <VBS_GetAvBusVoltage_V>
 8006c14:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8006c18:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006c1a:	480e      	ldr	r0, [pc, #56]	; (8006c54 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8006c1c:	490e      	ldr	r1, [pc, #56]	; (8006c58 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 8006c1e:	bfb8      	it	lt
 8006c20:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006c24:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8006c28:	bfb8      	it	lt
 8006c2a:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006c2c:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 8006c2e:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006c30:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8006c34:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8006c38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c3c:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8006c3e:	fb81 2103 	smull	r2, r1, r1, r3
 8006c42:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006c44:	4630      	mov	r0, r6
 8006c46:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006c4e:	f7ff beb7 	b.w	80069c0 <MPM_CalcElMotorPower>
 8006c52:	bf00      	nop
 8006c54:	1b4e81b5 	.word	0x1b4e81b5
 8006c58:	66666667 	.word	0x66666667

08006c5c <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8006c5c:	4b17      	ldr	r3, [pc, #92]	; (8006cbc <startTimers+0x60>)
 8006c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#ifdef TIM2
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8006c60:	07d2      	lsls	r2, r2, #31
 8006c62:	d415      	bmi.n	8006c90 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8006c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8006c6e:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006c70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006c74:	f002 0201 	and.w	r2, r2, #1
 8006c78:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8006c7a:	9a01      	ldr	r2, [sp, #4]
 8006c7c:	694a      	ldr	r2, [r1, #20]
 8006c7e:	f042 0201 	orr.w	r2, r2, #1
 8006c82:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8006c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c86:	f022 0201 	bic.w	r2, r2, #1
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
#endif
}
 8006c8c:	b002      	add	sp, #8
 8006c8e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8006c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c94:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006c96:	6859      	ldr	r1, [r3, #4]
 8006c98:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006c9c:	f041 0120 	orr.w	r1, r1, #32
 8006ca0:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006ca2:	6959      	ldr	r1, [r3, #20]
 8006ca4:	f041 0101 	orr.w	r1, r1, #1
 8006ca8:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006caa:	6859      	ldr	r1, [r3, #4]
 8006cac:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006cb0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	605a      	str	r2, [r3, #4]
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40023800 	.word	0x40023800

08006cc0 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8006cc0:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006cc2:	1c56      	adds	r6, r2, #1
 8006cc4:	0876      	lsrs	r6, r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006cc6:	f06f 0702 	mvn.w	r7, #2
 8006cca:	0176      	lsls	r6, r6, #5
 8006ccc:	6107      	str	r7, [r0, #16]

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8006cce:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8006cd0:	781c      	ldrb	r4, [r3, #0]
 8006cd2:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8006cd4:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8006cd8:	d80b      	bhi.n	8006cf2 <waitForPolarizationEnd+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006cda:	6904      	ldr	r4, [r0, #16]
 8006cdc:	07a4      	lsls	r4, r4, #30
 8006cde:	d5f7      	bpl.n	8006cd0 <waitForPolarizationEnd+0x10>
      hCalibrationPeriodCounter++;
 8006ce0:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8006ce2:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006ce4:	6107      	str	r7, [r0, #16]
 8006ce6:	d8f3      	bhi.n	8006cd0 <waitForPolarizationEnd+0x10>
      {
        if (*cnt < NB_CONVERSIONS)
 8006ce8:	781c      	ldrb	r4, [r3, #0]
 8006cea:	2c0f      	cmp	r4, #15
 8006cec:	d8f0      	bhi.n	8006cd0 <waitForPolarizationEnd+0x10>
        {
          *SWerror = 1u;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8006cf2:	bcf0      	pop	{r4, r5, r6, r7}
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop

08006cf8 <R3_1_GetPhaseCurrents>:
  * @retval Ia and Ib current in ab_t format
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006cf8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 8006cfc:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006cfe:	685c      	ldr	r4, [r3, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006d00:	6a22      	ldr	r2, [r4, #32]
 8006d02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d06:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );
 8006d08:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68

  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8006d0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8006d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8006d14:	6812      	ldr	r2, [r2, #0]
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8006d16:	681b      	ldr	r3, [r3, #0]
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8006d18:	0052      	lsls	r2, r2, #1
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8006d1a:	005b      	lsls	r3, r3, #1
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8006d1c:	b292      	uxth	r2, r2
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8006d1e:	b29e      	uxth	r6, r3

  switch ( bSector )
 8006d20:	2c05      	cmp	r4, #5
 8006d22:	f200 809e 	bhi.w	8006e62 <R3_1_GetPhaseCurrents+0x16a>
 8006d26:	e8df f004 	tbb	[pc, r4]
 8006d2a:	1d36      	.short	0x1d36
 8006d2c:	3603031d 	.word	0x3603031d
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8006d30:	6f03      	ldr	r3, [r0, #112]	; 0x70
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8006d32:	4c4f      	ldr	r4, [pc, #316]	; (8006e70 <R3_1_GetPhaseCurrents+0x178>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8006d34:	1a9a      	subs	r2, r3, r2
      if ( wAux < -INT16_MAX )
 8006d36:	42a2      	cmp	r2, r4
 8006d38:	db5c      	blt.n	8006df4 <R3_1_GetPhaseCurrents+0xfc>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006d3a:	6f44      	ldr	r4, [r0, #116]	; 0x74

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8006d3c:	4f4c      	ldr	r7, [pc, #304]	; (8006e70 <R3_1_GetPhaseCurrents+0x178>)
      else  if ( wAux > INT16_MAX )
 8006d3e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        pStator_Currents->a = INT16_MAX;
 8006d42:	bfa8      	it	ge
 8006d44:	f647 73ff 	movwge	r3, #32767	; 0x7fff
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006d48:	eba4 0406 	sub.w	r4, r4, r6
        pStator_Currents->a = INT16_MAX;
 8006d4c:	bfac      	ite	ge
 8006d4e:	800b      	strhge	r3, [r1, #0]
        pStator_Currents->a = ( int16_t )wAux;
 8006d50:	800a      	strhlt	r2, [r1, #0]
      if ( wAux < -INT16_MAX )
 8006d52:	42bc      	cmp	r4, r7
 8006d54:	da54      	bge.n	8006e00 <R3_1_GetPhaseCurrents+0x108>
      {
        pStator_Currents->b = -INT16_MAX;
 8006d56:	f9b1 5000 	ldrsh.w	r5, [r1]
 8006d5a:	804f      	strh	r7, [r1, #2]
 8006d5c:	b2ab      	uxth	r3, r5
 8006d5e:	f248 0401 	movw	r4, #32769	; 0x8001
 8006d62:	e031      	b.n	8006dc8 <R3_1_GetPhaseCurrents+0xd0>
    case SECTOR_2:
    case SECTOR_3:
    {
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8006d64:	6f05      	ldr	r5, [r0, #112]	; 0x70
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8006d66:	4b42      	ldr	r3, [pc, #264]	; (8006e70 <R3_1_GetPhaseCurrents+0x178>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8006d68:	1aaa      	subs	r2, r5, r2
      if ( wAux < -INT16_MAX )
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	db3c      	blt.n	8006de8 <R3_1_GetPhaseCurrents+0xf0>
      {
        pStator_Currents->a = -INT16_MAX;
      }
      else  if ( wAux > INT16_MAX )
 8006d6e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006d72:	db6a      	blt.n	8006e4a <R3_1_GetPhaseCurrents+0x152>
      {
        pStator_Currents->a = INT16_MAX;
 8006d74:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006d78:	4613      	mov	r3, r2
 8006d7a:	800a      	strh	r2, [r1, #0]
 8006d7c:	4615      	mov	r5, r2
      }

      /* Ic = PhaseCOffset - ADC converted value) */
      /* Ib = -Ic -Ia */
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 8006d7e:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8006d80:	1b34      	subs	r4, r6, r4
 8006d82:	1aa2      	subs	r2, r4, r2

      /* Saturation of Ib */
      if ( wAux > INT16_MAX )
 8006d84:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006d88:	db4d      	blt.n	8006e26 <R3_1_GetPhaseCurrents+0x12e>
      {
        pStator_Currents->b = INT16_MAX;
 8006d8a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006d8e:	4614      	mov	r4, r2
 8006d90:	804a      	strh	r2, [r1, #2]
 8006d92:	4617      	mov	r7, r2
 8006d94:	e018      	b.n	8006dc8 <R3_1_GetPhaseCurrents+0xd0>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8006d96:	6f45      	ldr	r5, [r0, #116]	; 0x74
      if ( wAux < -INT16_MAX )
 8006d98:	4b35      	ldr	r3, [pc, #212]	; (8006e70 <R3_1_GetPhaseCurrents+0x178>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8006d9a:	1aaa      	subs	r2, r5, r2
      if ( wAux < -INT16_MAX )
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	db1d      	blt.n	8006ddc <R3_1_GetPhaseCurrents+0xe4>
      else  if ( wAux > INT16_MAX )
 8006da0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006da4:	db46      	blt.n	8006e34 <R3_1_GetPhaseCurrents+0x13c>
        pStator_Currents->b = INT16_MAX;
 8006da6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006daa:	461c      	mov	r4, r3
 8006dac:	804b      	strh	r3, [r1, #2]
 8006dae:	461a      	mov	r2, r3
 8006db0:	461f      	mov	r7, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8006db2:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8006db4:	1b73      	subs	r3, r6, r5
 8006db6:	1a9a      	subs	r2, r3, r2
      if ( wAux > INT16_MAX )
 8006db8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006dbc:	db2c      	blt.n	8006e18 <R3_1_GetPhaseCurrents+0x120>
        pStator_Currents->a = INT16_MAX;
 8006dbe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	800a      	strh	r2, [r1, #0]
 8006dc6:	4615      	mov	r5, r2
    }
    break;
  }
  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006dc8:	4423      	add	r3, r4
 8006dca:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 8006dcc:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
  pHandle->_Super.Ib = pStator_Currents->b;
 8006dd0:	f8a0 704e 	strh.w	r7, [r0, #78]	; 0x4e
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006dd4:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8006dd8:	bcf0      	pop	{r4, r5, r6, r7}
 8006dda:	4770      	bx	lr
        pStator_Currents->b = -INT16_MAX;
 8006ddc:	461a      	mov	r2, r3
 8006dde:	804b      	strh	r3, [r1, #2]
 8006de0:	461f      	mov	r7, r3
 8006de2:	f248 0401 	movw	r4, #32769	; 0x8001
 8006de6:	e7e4      	b.n	8006db2 <R3_1_GetPhaseCurrents+0xba>
        pStator_Currents->a = -INT16_MAX;
 8006de8:	461a      	mov	r2, r3
 8006dea:	800b      	strh	r3, [r1, #0]
 8006dec:	461d      	mov	r5, r3
 8006dee:	f248 0301 	movw	r3, #32769	; 0x8001
 8006df2:	e7c4      	b.n	8006d7e <R3_1_GetPhaseCurrents+0x86>
        pStator_Currents->a = -INT16_MAX;
 8006df4:	800c      	strh	r4, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006df6:	6f44      	ldr	r4, [r0, #116]	; 0x74
      if ( wAux < -INT16_MAX )
 8006df8:	4f1d      	ldr	r7, [pc, #116]	; (8006e70 <R3_1_GetPhaseCurrents+0x178>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006dfa:	1ba4      	subs	r4, r4, r6
      if ( wAux < -INT16_MAX )
 8006dfc:	42bc      	cmp	r4, r7
 8006dfe:	dbaa      	blt.n	8006d56 <R3_1_GetPhaseCurrents+0x5e>
      else  if ( wAux > INT16_MAX )
 8006e00:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8006e04:	db1a      	blt.n	8006e3c <R3_1_GetPhaseCurrents+0x144>
        pStator_Currents->b = INT16_MAX;
 8006e06:	f9b1 5000 	ldrsh.w	r5, [r1]
 8006e0a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006e0e:	804b      	strh	r3, [r1, #2]
 8006e10:	461c      	mov	r4, r3
 8006e12:	461f      	mov	r7, r3
 8006e14:	b2ab      	uxth	r3, r5
 8006e16:	e7d7      	b.n	8006dc8 <R3_1_GetPhaseCurrents+0xd0>
      else  if ( wAux < -INT16_MAX )
 8006e18:	4d15      	ldr	r5, [pc, #84]	; (8006e70 <R3_1_GetPhaseCurrents+0x178>)
 8006e1a:	42aa      	cmp	r2, r5
 8006e1c:	da19      	bge.n	8006e52 <R3_1_GetPhaseCurrents+0x15a>
        pStator_Currents->a = -INT16_MAX;
 8006e1e:	800d      	strh	r5, [r1, #0]
 8006e20:	f248 0301 	movw	r3, #32769	; 0x8001
 8006e24:	e7d0      	b.n	8006dc8 <R3_1_GetPhaseCurrents+0xd0>
      else  if ( wAux < -INT16_MAX )
 8006e26:	4f12      	ldr	r7, [pc, #72]	; (8006e70 <R3_1_GetPhaseCurrents+0x178>)
 8006e28:	42ba      	cmp	r2, r7
 8006e2a:	da16      	bge.n	8006e5a <R3_1_GetPhaseCurrents+0x162>
        pStator_Currents->b = -INT16_MAX;
 8006e2c:	804f      	strh	r7, [r1, #2]
 8006e2e:	f248 0401 	movw	r4, #32769	; 0x8001
 8006e32:	e7c9      	b.n	8006dc8 <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->b = ( int16_t )wAux;
 8006e34:	b217      	sxth	r7, r2
 8006e36:	804f      	strh	r7, [r1, #2]
 8006e38:	b294      	uxth	r4, r2
 8006e3a:	e7ba      	b.n	8006db2 <R3_1_GetPhaseCurrents+0xba>
        pStator_Currents->b = ( int16_t )wAux;
 8006e3c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8006e40:	b227      	sxth	r7, r4
 8006e42:	b2ab      	uxth	r3, r5
 8006e44:	804f      	strh	r7, [r1, #2]
 8006e46:	b2a4      	uxth	r4, r4
 8006e48:	e7be      	b.n	8006dc8 <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->a = ( int16_t )wAux;
 8006e4a:	b215      	sxth	r5, r2
 8006e4c:	800d      	strh	r5, [r1, #0]
 8006e4e:	b293      	uxth	r3, r2
 8006e50:	e795      	b.n	8006d7e <R3_1_GetPhaseCurrents+0x86>
        pStator_Currents->a = ( int16_t )wAux;
 8006e52:	b215      	sxth	r5, r2
 8006e54:	800d      	strh	r5, [r1, #0]
 8006e56:	b293      	uxth	r3, r2
 8006e58:	e7b6      	b.n	8006dc8 <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->b = ( int16_t )wAux;
 8006e5a:	b217      	sxth	r7, r2
 8006e5c:	804f      	strh	r7, [r1, #2]
 8006e5e:	b294      	uxth	r4, r2
 8006e60:	e7b2      	b.n	8006dc8 <R3_1_GetPhaseCurrents+0xd0>
 8006e62:	f9b1 5000 	ldrsh.w	r5, [r1]
 8006e66:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 8006e6a:	880b      	ldrh	r3, [r1, #0]
 8006e6c:	884c      	ldrh	r4, [r1, #2]
 8006e6e:	e7ab      	b.n	8006dc8 <R3_1_GetPhaseCurrents+0xd0>
 8006e70:	ffff8001 	.word	0xffff8001

08006e74 <R3_1_HFCurrentsCalibrationAB>:
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006e74:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 8006e78:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006e7a:	685c      	ldr	r4, [r3, #4]
 8006e7c:	6a22      	ldr	r2, [r4, #32]
 8006e7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e82:	6222      	str	r2, [r4, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006e84:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
 8006e88:	2a0f      	cmp	r2, #15
 8006e8a:	d813      	bhi.n	8006eb4 <R3_1_HFCurrentsCalibrationAB+0x40>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 8006e8c:	f890 5086 	ldrb.w	r5, [r0, #134]	; 0x86
 8006e90:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006e94:	e9d0 421c 	ldrd	r4, r2, [r0, #112]	; 0x70
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 8006e98:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 8006e9c:	682d      	ldr	r5, [r5, #0]
 8006e9e:	442c      	add	r4, r5
 8006ea0:	6704      	str	r4, [r0, #112]	; 0x70
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006ea2:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 8006ea4:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
 8006ea8:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006eaa:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006eac:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006eae:	6742      	str	r2, [r0, #116]	; 0x74
    pHandle->PolarizationCounter++;
 8006eb0:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8006eb4:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8006eb6:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 8006eb8:	600b      	str	r3, [r1, #0]
}
 8006eba:	4770      	bx	lr

08006ebc <R3_1_HFCurrentsCalibrationC>:
  *         the offset computation.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 8006ebc:	b410      	push	{r4}
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006ebe:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
 8006ec2:	6862      	ldr	r2, [r4, #4]
 8006ec4:	6a13      	ldr	r3, [r2, #32]
 8006ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eca:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006ecc:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
 8006ed0:	2b0f      	cmp	r3, #15
 8006ed2:	d80e      	bhi.n	8006ef2 <R3_1_HFCurrentsCalibrationC+0x36>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006ed4:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
 8006ed8:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8006eda:	3314      	adds	r3, #20
 8006edc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006ee0:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 8006ee2:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
 8006ee6:	3301      	adds	r3, #1
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006ee8:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006eea:	b2db      	uxtb	r3, r3
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006eec:	6782      	str	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 8006eee:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8006ef2:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8006ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8006ef8:	600b      	str	r3, [r1, #0]
}
 8006efa:	4770      	bx	lr

08006efc <R3_1_TurnOnLowSides>:
  * @retval none
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006efc:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c

  pHandle->_Super.TurnOnLowSidesAction = true;
 8006f00:	2301      	movs	r3, #1
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006f02:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8006f04:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006f08:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006f0a:	f06f 0001 	mvn.w	r0, #1
 8006f0e:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006f10:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006f12:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006f14:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006f16:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8006f18:	07db      	lsls	r3, r3, #31
 8006f1a:	d5fc      	bpl.n	8006f16 <R3_1_TurnOnLowSides+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006f1c:	f06f 0301 	mvn.w	r3, #1
 8006f20:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006f22:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f28:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8006f2a:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d000      	beq.n	8006f34 <R3_1_TurnOnLowSides+0x38>
 8006f32:	4770      	bx	lr
{
 8006f34:	b470      	push	{r4, r5, r6}
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8006f36:	e9d1 5002 	ldrd	r5, r0, [r1, #8]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006f3a:	e9d1 3604 	ldrd	r3, r6, [r1, #16]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8006f3e:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006f42:	61ae      	str	r6, [r5, #24]
 8006f44:	6184      	str	r4, [r0, #24]
  }
  return; 
}
 8006f46:	bc70      	pop	{r4, r5, r6}
 8006f48:	619a      	str	r2, [r3, #24]
 8006f4a:	4770      	bx	lr

08006f4c <R3_1_SwitchOnPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006f4c:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8006f50:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006f54:	684b      	ldr	r3, [r1, #4]
{  
 8006f56:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006f58:	2400      	movs	r4, #0
 8006f5a:	f880 4069 	strb.w	r4, [r0, #105]	; 0x69
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8006f5e:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006f60:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8006f64:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006f66:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006f68:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006f6a:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006f6c:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006f6e:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006f70:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8006f72:	07d2      	lsls	r2, r2, #31
 8006f74:	d5fc      	bpl.n	8006f70 <R3_1_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006f76:	f06f 0201 	mvn.w	r2, #1
 8006f7a:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f82:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f8a:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006f8c:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 8006f90:	2a02      	cmp	r2, #2
 8006f92:	d008      	beq.n	8006fa6 <R3_1_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006f94:	f06f 0201 	mvn.w	r2, #1
 8006f98:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8006fa0:	bcf0      	pop	{r4, r5, r6, r7}
 8006fa2:	60da      	str	r2, [r3, #12]
 8006fa4:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8006fa6:	6a18      	ldr	r0, [r3, #32]
 8006fa8:	f240 5255 	movw	r2, #1365	; 0x555
 8006fac:	4210      	tst	r0, r2
 8006fae:	d009      	beq.n	8006fc4 <R3_1_SwitchOnPWM+0x78>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8006fb0:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006fb4:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
 8006fb8:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8006fba:	e9d1 4106 	ldrd	r4, r1, [r1, #24]
 8006fbe:	6184      	str	r4, [r0, #24]
 8006fc0:	6191      	str	r1, [r2, #24]
}
 8006fc2:	e7e7      	b.n	8006f94 <R3_1_SwitchOnPWM+0x48>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006fc4:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
 8006fc8:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8006fca:	690d      	ldr	r5, [r1, #16]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8006fcc:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
 8006fd0:	0424      	lsls	r4, r4, #16
 8006fd2:	0400      	lsls	r0, r0, #16
 8006fd4:	0412      	lsls	r2, r2, #16
 8006fd6:	61bc      	str	r4, [r7, #24]
 8006fd8:	61b0      	str	r0, [r6, #24]
 8006fda:	61aa      	str	r2, [r5, #24]
}
 8006fdc:	e7da      	b.n	8006f94 <R3_1_SwitchOnPWM+0x48>
 8006fde:	bf00      	nop

08006fe0 <R3_1_SwitchOffPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006fe0:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8006fe4:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006fe6:	68d3      	ldr	r3, [r2, #12]
 8006fe8:	f023 0301 	bic.w	r3, r3, #1
{
 8006fec:	b4f0      	push	{r4, r5, r6, r7}

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->BrakeActionLock == true)
 8006fee:	f890 408a 	ldrb.w	r4, [r0, #138]	; 0x8a
 8006ff2:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006ff4:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006ff6:	2500      	movs	r5, #0
 8006ff8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ffc:	f880 5069 	strb.w	r5, [r0, #105]	; 0x69
 8007000:	6453      	str	r3, [r2, #68]	; 0x44
  if (pHandle->BrakeActionLock == true)
 8007002:	b91c      	cbnz	r4, 800700c <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007004:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 8007008:	2b02      	cmp	r3, #2
 800700a:	d00a      	beq.n	8007022 <R3_1_SwitchOffPWM+0x42>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800700c:	f06f 0301 	mvn.w	r3, #1
 8007010:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007012:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8007014:	07db      	lsls	r3, r3, #31
 8007016:	d5fc      	bpl.n	8007012 <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007018:	f06f 0301 	mvn.w	r3, #1
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 800701c:	bcf0      	pop	{r4, r5, r6, r7}
 800701e:	6113      	str	r3, [r2, #16]
 8007020:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007022:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
 8007026:	69cb      	ldr	r3, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007028:	690d      	ldr	r5, [r1, #16]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800702a:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
 800702e:	0424      	lsls	r4, r4, #16
 8007030:	0400      	lsls	r0, r0, #16
 8007032:	041b      	lsls	r3, r3, #16
 8007034:	61bc      	str	r4, [r7, #24]
 8007036:	61b0      	str	r0, [r6, #24]
 8007038:	61ab      	str	r3, [r5, #24]
}
 800703a:	e7e7      	b.n	800700c <R3_1_SwitchOffPWM+0x2c>

0800703c <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{
 800703c:	b430      	push	{r4, r5}

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800703e:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8007042:	6f43      	ldr	r3, [r0, #116]	; 0x74
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007044:	6865      	ldr	r5, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007046:	6a2a      	ldr	r2, [r5, #32]
 8007048:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800704c:	622a      	str	r2, [r5, #32]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 800704e:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 8007052:	480d      	ldr	r0, [pc, #52]	; (8007088 <R3_1_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8007054:	3214      	adds	r2, #20
 8007056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800705a:	6812      	ldr	r2, [r2, #0]
 800705c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if (wAux > -INT16_MAX)
 8007060:	4283      	cmp	r3, r0
 8007062:	db05      	blt.n	8007070 <R3_1_RLGetPhaseCurrents+0x34>
  {
    if (wAux < INT16_MAX)
 8007064:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007068:	4293      	cmp	r3, r2
 800706a:	dc0a      	bgt.n	8007082 <R3_1_RLGetPhaseCurrents+0x46>
 800706c:	b21b      	sxth	r3, r3
 800706e:	e000      	b.n	8007072 <R3_1_RLGetPhaseCurrents+0x36>
 8007070:	4b06      	ldr	r3, [pc, #24]	; (800708c <R3_1_RLGetPhaseCurrents+0x50>)
  else
  {
    wAux = -INT16_MAX;
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 8007072:	2200      	movs	r2, #0
 8007074:	f363 020f 	bfi	r2, r3, #0, #16
 8007078:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = ( int16_t )( wAux );

}
 800707c:	bc30      	pop	{r4, r5}
  pStator_Currents->a = ( int16_t )( wAux );
 800707e:	600a      	str	r2, [r1, #0]
}
 8007080:	4770      	bx	lr
 8007082:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007086:	e7f4      	b.n	8007072 <R3_1_RLGetPhaseCurrents+0x36>
 8007088:	ffff8002 	.word	0xffff8002
 800708c:	ffff8001 	.word	0xffff8001

08007090 <R3_1_RLTurnOnLowSides>:
  * @retval none
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007090:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8007094:	684a      	ldr	r2, [r1, #4]
{  
 8007096:	b430      	push	{r4, r5}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007098:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800709c:	2400      	movs	r4, #0
 800709e:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80070a0:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80070a2:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80070a4:	07db      	lsls	r3, r3, #31
 80070a6:	d5fc      	bpl.n	80070a2 <R3_1_RLTurnOnLowSides+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80070a8:	f06f 0301 	mvn.w	r3, #1
 80070ac:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80070ae:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80070b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070b4:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80070b6:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d10a      	bne.n	80070d4 <R3_1_RLTurnOnLowSides+0x44>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80070be:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80070c2:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80070c6:	e9d1 1504 	ldrd	r1, r5, [r1, #16]
 80070ca:	0412      	lsls	r2, r2, #16
 80070cc:	041b      	lsls	r3, r3, #16
  WRITE_REG(GPIOx->BSRR, PinMask);
 80070ce:	61a5      	str	r5, [r4, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80070d0:	6182      	str	r2, [r0, #24]
 80070d2:	618b      	str	r3, [r1, #24]
  }
  return; 
}
 80070d4:	bc30      	pop	{r4, r5}
 80070d6:	4770      	bx	lr

080070d8 <R3_1_RLSwitchOnPWM>:
  * @retval none
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80070d8:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 80070dc:	2200      	movs	r2, #0
{
 80070de:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80070e0:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80070e4:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	06d6      	lsls	r6, r2, #27
 80070ec:	d4fc      	bmi.n	80070e8 <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	06d5      	lsls	r5, r2, #27
 80070f2:	d5fc      	bpl.n	80070ee <R3_1_RLSwitchOnPWM+0x16>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 80070f4:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
  WRITE_REG(TIMx->CCR1, CompareValue);
 80070f8:	2501      	movs	r5, #1
 80070fa:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80070fc:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007100:	635d      	str	r5, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007102:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007104:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007106:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007108:	07d2      	lsls	r2, r2, #31
 800710a:	d5fc      	bpl.n	8007106 <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800710c:	f06f 0201 	mvn.w	r2, #1
 8007110:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007118:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800711a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800711c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007120:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007122:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 8007126:	2a02      	cmp	r2, #2
 8007128:	d00b      	beq.n	8007142 <R3_1_RLSwitchOnPWM+0x6a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800712a:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800712e:	f06f 0104 	mvn.w	r1, #4
 8007132:	6021      	str	r1, [r4, #0]
 8007134:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007136:	68da      	ldr	r2, [r3, #12]
 8007138:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 800713c:	bcf0      	pop	{r4, r5, r6, r7}
 800713e:	60da      	str	r2, [r3, #12]
 8007140:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8007142:	6a18      	ldr	r0, [r3, #32]
 8007144:	f240 5255 	movw	r2, #1365	; 0x555
 8007148:	4210      	tst	r0, r2
 800714a:	d00a      	beq.n	8007162 <R3_1_RLSwitchOnPWM+0x8a>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800714c:	e9d1 0502 	ldrd	r0, r5, [r1, #8]
 8007150:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007152:	694e      	ldr	r6, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007154:	6186      	str	r6, [r0, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8007156:	6908      	ldr	r0, [r1, #16]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8007158:	6989      	ldr	r1, [r1, #24]
 800715a:	61a9      	str	r1, [r5, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800715c:	0412      	lsls	r2, r2, #16
 800715e:	6182      	str	r2, [r0, #24]
}
 8007160:	e7e3      	b.n	800712a <R3_1_RLSwitchOnPWM+0x52>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007162:	e9d1 5005 	ldrd	r5, r0, [r1, #20]
 8007166:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8007168:	f8d1 c008 	ldr.w	ip, [r1, #8]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800716c:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8007170:	042d      	lsls	r5, r5, #16
 8007172:	0400      	lsls	r0, r0, #16
 8007174:	0412      	lsls	r2, r2, #16
 8007176:	f8cc 5018 	str.w	r5, [ip, #24]
 800717a:	61b8      	str	r0, [r7, #24]
 800717c:	61b2      	str	r2, [r6, #24]
}
 800717e:	e7d4      	b.n	800712a <R3_1_RLSwitchOnPWM+0x52>

08007180 <R3_1_Init>:
{
 8007180:	b430      	push	{r4, r5}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007182:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
 8007186:	e9d4 3200 	ldrd	r3, r2, [r4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800718a:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800718c:	f06f 0502 	mvn.w	r5, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8007190:	f021 0120 	bic.w	r1, r1, #32
 8007194:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8007196:	601d      	str	r5, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8007198:	6859      	ldr	r1, [r3, #4]
    if ( TIMx == TIM1 )
 800719a:	4d20      	ldr	r5, [pc, #128]	; (800721c <R3_1_Init+0x9c>)
 800719c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80071a0:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80071a2:	f06f 0104 	mvn.w	r1, #4
 80071a6:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80071a8:	6811      	ldr	r1, [r2, #0]
 80071aa:	42aa      	cmp	r2, r5
 80071ac:	f021 0101 	bic.w	r1, r1, #1
 80071b0:	6011      	str	r1, [r2, #0]
 80071b2:	d02d      	beq.n	8007210 <R3_1_Init+0x90>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80071b4:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80071b8:	6111      	str	r1, [r2, #16]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80071ba:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
 80071be:	b119      	cbz	r1, 80071c8 <R3_1_Init+0x48>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80071c0:	68d1      	ldr	r1, [r2, #12]
 80071c2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80071c6:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 80071c8:	6a11      	ldr	r1, [r2, #32]
 80071ca:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 80071ce:	f041 0105 	orr.w	r1, r1, #5
 80071d2:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80071d4:	689a      	ldr	r2, [r3, #8]
 80071d6:	f042 0201 	orr.w	r2, r2, #1
 80071da:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80071de:	f06f 0104 	mvn.w	r1, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80071e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80071e6:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80071e8:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071f0:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 80071f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80071f4:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    pHandle->OverCurrentFlag = false;
 80071f8:	2100      	movs	r1, #0
 80071fa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80071fe:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 8007202:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007204:	bc30      	pop	{r4, r5}
    pHandle->OverCurrentFlag = false;
 8007206:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    pHandle->_Super.DTTest = 0u;
 800720a:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
}
 800720e:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8007210:	4d03      	ldr	r5, [pc, #12]	; (8007220 <R3_1_Init+0xa0>)
 8007212:	68e9      	ldr	r1, [r5, #12]
 8007214:	f041 0101 	orr.w	r1, r1, #1
 8007218:	60e9      	str	r1, [r5, #12]
}
 800721a:	e7cb      	b.n	80071b4 <R3_1_Init+0x34>
 800721c:	40010000 	.word	0x40010000
 8007220:	e0042000 	.word	0xe0042000

08007224 <R3_1_CurrentReadingCalibration>:
{
 8007224:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007226:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800722a:	6842      	ldr	r2, [r0, #4]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800722c:	685d      	ldr	r5, [r3, #4]
  SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800722e:	6983      	ldr	r3, [r0, #24]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 8007230:	493b      	ldr	r1, [pc, #236]	; (8007320 <R3_1_CurrentReadingCalibration+0xfc>)
{
 8007232:	b085      	sub	sp, #20
  pHandle->PhaseAOffset = 0u;
 8007234:	2600      	movs	r6, #0
  GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8007236:	9202      	str	r2, [sp, #8]
  SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8007238:	9303      	str	r3, [sp, #12]
  pHandle->PolarizationCounter = 0u;
 800723a:	f880 6087 	strb.w	r6, [r0, #135]	; 0x87
  CLEAR_BIT(TIMx->CCER, Channels);
 800723e:	6a2b      	ldr	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8007240:	4a38      	ldr	r2, [pc, #224]	; (8007324 <R3_1_CurrentReadingCalibration+0x100>)
  pHandle->PhaseAOffset = 0u;
 8007242:	6706      	str	r6, [r0, #112]	; 0x70
 8007244:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
{
 8007248:	4604      	mov	r4, r0
  pHandle->CalibSector = SECTOR_5;
 800724a:	2704      	movs	r7, #4
 800724c:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 8007250:	e9c0 661d 	strd	r6, r6, [r0, #116]	; 0x74
 8007254:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 8007256:	6041      	str	r1, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8007258:	6182      	str	r2, [r0, #24]
  pHandle->CalibSector = SECTOR_5;
 800725a:	f880 7086 	strb.w	r7, [r0, #134]	; 0x86
  pHandle->_Super.Sector = SECTOR_5; 
 800725e:	f880 7068 	strb.w	r7, [r0, #104]	; 0x68
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8007262:	f7ff fe73 	bl	8006f4c <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8007266:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800726a:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800726e:	f104 0387 	add.w	r3, r4, #135	; 0x87
 8007272:	f892 2073 	ldrb.w	r2, [r2, #115]	; 0x73
 8007276:	4628      	mov	r0, r5
 8007278:	e9cd 3100 	strd	r3, r1, [sp]
 800727c:	f7ff fd20 	bl	8006cc0 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 8007280:	4620      	mov	r0, r4
 8007282:	f7ff fead 	bl	8006fe0 <R3_1_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8007286:	4a28      	ldr	r2, [pc, #160]	; (8007328 <R3_1_CurrentReadingCalibration+0x104>)
 8007288:	6062      	str	r2, [r4, #4]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800728a:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 800728c:	f884 6087 	strb.w	r6, [r4, #135]	; 0x87
  pHandle->CalibSector = SECTOR_1;
 8007290:	f884 6086 	strb.w	r6, [r4, #134]	; 0x86
  pHandle->_Super.Sector = SECTOR_1; 
 8007294:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8007298:	f7ff fe58 	bl	8006f4c <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 800729c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80072a0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80072a4:	f892 2073 	ldrb.w	r2, [r2, #115]	; 0x73
 80072a8:	4628      	mov	r0, r5
 80072aa:	f7ff fd09 	bl	8006cc0 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 80072ae:	4620      	mov	r0, r4
 80072b0:	f7ff fe96 	bl	8006fe0 <R3_1_SwitchOffPWM>
  pHandle->PhaseBOffset >>= 3;
 80072b4:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
  pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80072b8:	9b02      	ldr	r3, [sp, #8]
 80072ba:	6063      	str	r3, [r4, #4]
  pHandle->PhaseAOffset >>= 3;
 80072bc:	08c9      	lsrs	r1, r1, #3
  pHandle->PhaseCOffset >>= 3;
 80072be:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80072c0:	9803      	ldr	r0, [sp, #12]
  pHandle->PhaseBOffset >>= 3;
 80072c2:	08d2      	lsrs	r2, r2, #3
 80072c4:	e9c4 121c 	strd	r1, r2, [r4, #112]	; 0x70
  pHandle->PhaseCOffset >>= 3;
 80072c8:	08db      	lsrs	r3, r3, #3
 80072ca:	67a3      	str	r3, [r4, #120]	; 0x78
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80072cc:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80072ce:	61a0      	str	r0, [r4, #24]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80072d0:	f023 0308 	bic.w	r3, r3, #8
 80072d4:	61ab      	str	r3, [r5, #24]
 80072d6:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 80072d8:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80072dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072e0:	61aa      	str	r2, [r5, #24]
 80072e2:	69ea      	ldr	r2, [r5, #28]
 80072e4:	f022 0208 	bic.w	r2, r2, #8
 80072e8:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80072ea:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80072ec:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80072ee:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80072f0:	69ab      	ldr	r3, [r5, #24]
 80072f2:	f043 0308 	orr.w	r3, r3, #8
 80072f6:	61ab      	str	r3, [r5, #24]
 80072f8:	69ab      	ldr	r3, [r5, #24]
 80072fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072fe:	61ab      	str	r3, [r5, #24]
 8007300:	69eb      	ldr	r3, [r5, #28]
 8007302:	f043 0308 	orr.w	r3, r3, #8
 8007306:	61eb      	str	r3, [r5, #28]
  pHandle->_Super.Sector = SECTOR_5;
 8007308:	f884 7068 	strb.w	r7, [r4, #104]	; 0x68
  SET_BIT(TIMx->CCER, Channels);
 800730c:	6a2b      	ldr	r3, [r5, #32]
 800730e:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007312:	f043 0305 	orr.w	r3, r3, #5
 8007316:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 8007318:	f884 608a 	strb.w	r6, [r4, #138]	; 0x8a
}
 800731c:	b005      	add	sp, #20
 800731e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007320:	08006e75 	.word	0x08006e75
 8007324:	0800735d 	.word	0x0800735d
 8007328:	08006ebd 	.word	0x08006ebd

0800732c <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800732c:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 8007330:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007332:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007334:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
{
 8007338:	b430      	push	{r4, r5}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 800733a:	8f45      	ldrh	r5, [r0, #58]	; 0x3a
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 800733c:	8f84      	ldrh	r4, [r0, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800733e:	635d      	str	r5, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007340:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007342:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8007344:	6a1b      	ldr	r3, [r3, #32]
  if ( pHandle->_Super.SWerror == 1u )
 8007346:	2a01      	cmp	r2, #1
    hAux = MC_FOC_DURATION;
 8007348:	bf12      	itee	ne
 800734a:	f3c3 3200 	ubfxne	r2, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 800734e:	2300      	moveq	r3, #0
 8007350:	f8a0 3040 	strheq.w	r3, [r0, #64]	; 0x40
}
 8007354:	bc30      	pop	{r4, r5}
 8007356:	4610      	mov	r0, r2
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop

0800735c <R3_1_SetADCSampPointCalibration>:
{
 800735c:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800735e:	f8b0 1084 	ldrh.w	r1, [r0, #132]	; 0x84
  pHandle->_Super.Sector = pHandle->CalibSector;
 8007362:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
 8007366:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800736a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800736e:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8007370:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8007374:	b289      	uxth	r1, r1
 8007376:	f7ff ffd9 	bl	800732c <R3_1_WriteTIMRegisters>
}
 800737a:	bd10      	pop	{r4, pc}

0800737c <R3_1_SetADCSampPointSectX>:
{
 800737c:	b570      	push	{r4, r5, r6, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 800737e:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8007382:	f8b0 4084 	ldrh.w	r4, [r0, #132]	; 0x84
 8007386:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
 800738a:	1a62      	subs	r2, r4, r1
 800738c:	f8b6 3068 	ldrh.w	r3, [r6, #104]	; 0x68
 8007390:	b292      	uxth	r2, r2
 8007392:	429a      	cmp	r2, r3
 8007394:	d907      	bls.n	80073a6 <R3_1_SetADCSampPointSectX+0x2a>
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8007396:	1e61      	subs	r1, r4, #1
    pHandle->_Super.Sector = SECTOR_5;
 8007398:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800739a:	b289      	uxth	r1, r1
    pHandle->_Super.Sector = SECTOR_5;
 800739c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80073a0:	f7ff ffc4 	bl	800732c <R3_1_WriteTIMRegisters>
}
 80073a4:	bd70      	pop	{r4, r5, r6, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80073a6:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
 80073aa:	1b4d      	subs	r5, r1, r5
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80073ac:	b2ad      	uxth	r5, r5
 80073ae:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 80073b2:	d906      	bls.n	80073c2 <R3_1_SetADCSampPointSectX+0x46>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 80073b4:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
 80073b8:	1ac9      	subs	r1, r1, r3
 80073ba:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80073bc:	f7ff ffb6 	bl	800732c <R3_1_WriteTIMRegisters>
}
 80073c0:	bd70      	pop	{r4, r5, r6, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 80073c2:	4419      	add	r1, r3
 80073c4:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80073c6:	428c      	cmp	r4, r1
 80073c8:	d8ea      	bhi.n	80073a0 <R3_1_SetADCSampPointSectX+0x24>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80073ca:	43c9      	mvns	r1, r1
 80073cc:	eb01 0144 	add.w	r1, r1, r4, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80073d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80073d4:	b289      	uxth	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 80073d6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 80073da:	f7ff ffa7 	bl	800732c <R3_1_WriteTIMRegisters>
}
 80073de:	bd70      	pop	{r4, r5, r6, pc}

080073e0 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073e0:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
{
 80073e4:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073e6:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 80073ea:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 80073ec:	6890      	ldr	r0, [r2, #8]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80073ee:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 80073f2:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80073f6:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 80073f8:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
 80073fc:	3008      	adds	r0, #8
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80073fe:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8007402:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007406:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8007408:	6a20      	ldr	r0, [r4, #32]
 800740a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800740e:	6220      	str	r0, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8007410:	6891      	ldr	r1, [r2, #8]
 8007412:	4331      	orrs	r1, r6
 8007414:	6091      	str	r1, [r2, #8]
}
 8007416:	f103 0066 	add.w	r0, r3, #102	; 0x66
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800741a:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
}
 800741e:	bc70      	pop	{r4, r5, r6}
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop

08007424 <R3_1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8007424:	f890 308a 	ldrb.w	r3, [r0, #138]	; 0x8a
 8007428:	b92b      	cbnz	r3, 8007436 <R3_1_BRK_IRQHandler+0x12>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800742a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800742e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8007432:	2a02      	cmp	r2, #2
 8007434:	d004      	beq.n	8007440 <R3_1_BRK_IRQHandler+0x1c>
  pHandle->OverCurrentFlag = true;
 8007436:	2301      	movs	r3, #1
 8007438:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
}
 800743c:	3066      	adds	r0, #102	; 0x66
 800743e:	4770      	bx	lr
{
 8007440:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8007442:	e9d3 4105 	ldrd	r4, r1, [r3, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007446:	e9d3 7602 	ldrd	r7, r6, [r3, #8]
 800744a:	69da      	ldr	r2, [r3, #28]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800744c:	691d      	ldr	r5, [r3, #16]
 800744e:	0424      	lsls	r4, r4, #16
 8007450:	0409      	lsls	r1, r1, #16
 8007452:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8007454:	2301      	movs	r3, #1
 8007456:	61bc      	str	r4, [r7, #24]
}
 8007458:	3066      	adds	r0, #102	; 0x66
 800745a:	61b1      	str	r1, [r6, #24]
 800745c:	61aa      	str	r2, [r5, #24]
  pHandle->OverCurrentFlag = true;
 800745e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 8007462:	bcf0      	pop	{r4, r5, r6, r7}
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop

08007468 <R3_1_IsOverCurrentOccurred>:
  if (pHandle->OverCurrentFlag == true )
 8007468:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 800746c:	b90b      	cbnz	r3, 8007472 <R3_1_IsOverCurrentOccurred+0xa>
  uint16_t retVal = MC_NO_FAULTS;
 800746e:	4618      	mov	r0, r3
}
 8007470:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 8007472:	2300      	movs	r3, #0
 8007474:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
    retVal |= MC_BREAK_IN;
 8007478:	2040      	movs	r0, #64	; 0x40
 800747a:	4770      	bx	lr

0800747c <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 800747c:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
{
 8007480:	b410      	push	{r4}
  if (pHandle->_Super.RLDetectionMode == false)
 8007482:	2900      	cmp	r1, #0
 8007484:	d135      	bne.n	80074f2 <R3_1_RLDetectionModeEnable+0x76>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007486:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
 800748a:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007492:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007496:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007498:	6a1a      	ldr	r2, [r3, #32]
 800749a:	f042 0201 	orr.w	r2, r2, #1
 800749e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80074a0:	6a1a      	ldr	r2, [r3, #32]
 80074a2:	f022 0204 	bic.w	r2, r2, #4
 80074a6:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80074a8:	6359      	str	r1, [r3, #52]	; 0x34
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 80074aa:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 80074ae:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80074b0:	f103 0118 	add.w	r1, r3, #24
 80074b4:	d02b      	beq.n	800750e <R3_1_RLDetectionModeEnable+0x92>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 80074b6:	2a02      	cmp	r2, #2
 80074b8:	d10d      	bne.n	80074d6 <R3_1_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80074ba:	699a      	ldr	r2, [r3, #24]
 80074bc:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80074c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074c4:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80074c6:	6a1a      	ldr	r2, [r3, #32]
 80074c8:	f042 0210 	orr.w	r2, r2, #16
 80074cc:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80074ce:	6a1a      	ldr	r2, [r3, #32]
 80074d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d4:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80074d6:	684a      	ldr	r2, [r1, #4]
 80074d8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80074dc:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80074e0:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80074e2:	6a1a      	ldr	r2, [r3, #32]
 80074e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074e8:	621a      	str	r2, [r3, #32]
 80074ea:	6a1a      	ldr	r2, [r3, #32]
 80074ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f0:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 80074f2:	4b0e      	ldr	r3, [pc, #56]	; (800752c <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 80074f4:	490e      	ldr	r1, [pc, #56]	; (8007530 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80074f6:	4a0f      	ldr	r2, [pc, #60]	; (8007534 <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 80074f8:	4c0f      	ldr	r4, [pc, #60]	; (8007538 <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 80074fa:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 80074fc:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 80074fe:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8007500:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8007504:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8007508:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 800750c:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800750e:	699a      	ldr	r2, [r3, #24]
 8007510:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007514:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007518:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800751a:	6a1a      	ldr	r2, [r3, #32]
 800751c:	f022 0210 	bic.w	r2, r2, #16
 8007520:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007522:	6a1a      	ldr	r2, [r3, #32]
 8007524:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007528:	621a      	str	r2, [r3, #32]
}
 800752a:	e7d4      	b.n	80074d6 <R3_1_RLDetectionModeEnable+0x5a>
 800752c:	0800703d 	.word	0x0800703d
 8007530:	080070d9 	.word	0x080070d9
 8007534:	08006fe1 	.word	0x08006fe1
 8007538:	08007091 	.word	0x08007091

0800753c <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 800753c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8007540:	2b00      	cmp	r3, #0
 8007542:	d062      	beq.n	800760a <R3_1_RLDetectionModeDisable+0xce>
{
 8007544:	b470      	push	{r4, r5, r6}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8007546:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 800754a:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	06d4      	lsls	r4, r2, #27
 8007550:	d5fc      	bpl.n	800754c <R3_1_RLDetectionModeDisable+0x10>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	06d2      	lsls	r2, r2, #27
 8007556:	d4fc      	bmi.n	8007552 <R3_1_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 8007558:	f891 2073 	ldrb.w	r2, [r1, #115]	; 0x73
 800755c:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800755e:	699a      	ldr	r2, [r3, #24]
 8007560:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007564:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007568:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800756a:	6a1a      	ldr	r2, [r3, #32]
 800756c:	f042 0201 	orr.w	r2, r2, #1
 8007570:	621a      	str	r2, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 8007572:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 8007576:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007578:	f103 0518 	add.w	r5, r3, #24
 800757c:	d046      	beq.n	800760c <R3_1_RLDetectionModeDisable+0xd0>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800757e:	2a02      	cmp	r2, #2
 8007580:	d103      	bne.n	800758a <R3_1_RLDetectionModeDisable+0x4e>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007582:	6a1a      	ldr	r2, [r3, #32]
 8007584:	f022 0204 	bic.w	r2, r2, #4
 8007588:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 800758a:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
 800758e:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007590:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007592:	699c      	ldr	r4, [r3, #24]
 8007594:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8007598:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 800759c:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800759e:	6a1c      	ldr	r4, [r3, #32]
 80075a0:	f044 0410 	orr.w	r4, r4, #16
 80075a4:	621c      	str	r4, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 80075a6:	f891 4074 	ldrb.w	r4, [r1, #116]	; 0x74
 80075aa:	2c01      	cmp	r4, #1
 80075ac:	d038      	beq.n	8007620 <R3_1_RLDetectionModeDisable+0xe4>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 80075ae:	2c02      	cmp	r4, #2
 80075b0:	d103      	bne.n	80075ba <R3_1_RLDetectionModeDisable+0x7e>
  CLEAR_BIT(TIMx->CCER, Channels);
 80075b2:	6a1c      	ldr	r4, [r3, #32]
 80075b4:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80075b8:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80075ba:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80075bc:	686c      	ldr	r4, [r5, #4]
 80075be:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80075c2:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80075c6:	606c      	str	r4, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 80075c8:	6a1c      	ldr	r4, [r3, #32]
 80075ca:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80075ce:	621c      	str	r4, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 80075d0:	f891 4074 	ldrb.w	r4, [r1, #116]	; 0x74
 80075d4:	2c01      	cmp	r4, #1
 80075d6:	d01e      	beq.n	8007616 <R3_1_RLDetectionModeDisable+0xda>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 80075d8:	2c02      	cmp	r4, #2
 80075da:	d103      	bne.n	80075e4 <R3_1_RLDetectionModeDisable+0xa8>
  CLEAR_BIT(TIMx->CCER, Channels);
 80075dc:	6a1c      	ldr	r4, [r3, #32]
 80075de:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80075e2:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 80075e4:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80075e6:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 80075e8:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 80075ea:	4c10      	ldr	r4, [pc, #64]	; (800762c <R3_1_RLDetectionModeDisable+0xf0>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80075ec:	4a10      	ldr	r2, [pc, #64]	; (8007630 <R3_1_RLDetectionModeDisable+0xf4>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80075ee:	4e11      	ldr	r6, [pc, #68]	; (8007634 <R3_1_RLDetectionModeDisable+0xf8>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 80075f0:	4d11      	ldr	r5, [pc, #68]	; (8007638 <R3_1_RLDetectionModeDisable+0xfc>)
 80075f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075f6:	604b      	str	r3, [r1, #4]
    pHandle->_Super.RLDetectionMode = false;
 80075f8:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80075fa:	e9c0 2402 	strd	r2, r4, [r0, #8]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80075fe:	6046      	str	r6, [r0, #4]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8007600:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8007602:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
}
 8007606:	bc70      	pop	{r4, r5, r6}
 8007608:	4770      	bx	lr
 800760a:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800760c:	6a1a      	ldr	r2, [r3, #32]
 800760e:	f042 0204 	orr.w	r2, r2, #4
 8007612:	621a      	str	r2, [r3, #32]
}
 8007614:	e7b9      	b.n	800758a <R3_1_RLDetectionModeDisable+0x4e>
  SET_BIT(TIMx->CCER, Channels);
 8007616:	6a1c      	ldr	r4, [r3, #32]
 8007618:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800761c:	621c      	str	r4, [r3, #32]
}
 800761e:	e7e1      	b.n	80075e4 <R3_1_RLDetectionModeDisable+0xa8>
  SET_BIT(TIMx->CCER, Channels);
 8007620:	6a1c      	ldr	r4, [r3, #32]
 8007622:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8007626:	621c      	str	r4, [r3, #32]
}
 8007628:	e7c7      	b.n	80075ba <R3_1_RLDetectionModeDisable+0x7e>
 800762a:	bf00      	nop
 800762c:	08006f4d 	.word	0x08006f4d
 8007630:	08006fe1 	.word	0x08006fe1
 8007634:	08006cf9 	.word	0x08006cf9
 8007638:	08006efd 	.word	0x08006efd

0800763c <R3_1_RLDetectionModeSetDuty>:
{
 800763c:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800763e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007642:	f8b0 4084 	ldrh.w	r4, [r0, #132]	; 0x84
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007646:	6852      	ldr	r2, [r2, #4]
  if (pHandle->_Super.SWerror == 1u)
 8007648:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800764c:	fb01 f104 	mul.w	r1, r1, r4
 8007650:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8007652:	2403      	movs	r4, #3
 8007654:	f880 4068 	strb.w	r4, [r0, #104]	; 0x68
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8007658:	8741      	strh	r1, [r0, #58]	; 0x3a
  WRITE_REG(TIMx->CCR1, CompareValue);
 800765a:	6351      	str	r1, [r2, #52]	; 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800765c:	6a12      	ldr	r2, [r2, #32]
}
 800765e:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (pHandle->_Super.SWerror == 1u)
 8007662:	2b01      	cmp	r3, #1
    hAux = MC_FOC_DURATION;
 8007664:	bf12      	itee	ne
 8007666:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 800766a:	2200      	moveq	r2, #0
 800766c:	f8a0 2040 	strheq.w	r2, [r0, #64]	; 0x40
}
 8007670:	4618      	mov	r0, r3
 8007672:	4770      	bx	lr

08007674 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 8007674:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007676:	8b82      	ldrh	r2, [r0, #28]
 8007678:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800767a:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800767c:	4414      	add	r4, r2
 800767e:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007680:	b14b      	cbz	r3, 8007696 <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 8007682:	6a05      	ldr	r5, [r0, #32]
 8007684:	2300      	movs	r3, #0
 8007686:	b29a      	uxth	r2, r3
 8007688:	3301      	adds	r3, #1
 800768a:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800768e:	8b01      	ldrh	r1, [r0, #24]
 8007690:	b29a      	uxth	r2, r3
 8007692:	4291      	cmp	r1, r2
 8007694:	d8f7      	bhi.n	8007686 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 8007696:	2300      	movs	r3, #0
 8007698:	f364 030f 	bfi	r3, r4, #0, #16
 800769c:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 80076a0:	2200      	movs	r2, #0
}
 80076a2:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 80076a4:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 80076a6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 80076aa:	4770      	bx	lr

080076ac <RVBS_Init>:
{
 80076ac:	b510      	push	{r4, lr}
 80076ae:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80076b0:	300c      	adds	r0, #12
 80076b2:	f7fc fdf3 	bl	800429c <RCM_RegisterRegConv>
 80076b6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7ff ffda 	bl	8007674 <RVBS_Clear>
}
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	bf00      	nop

080076c4 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 80076c4:	88c3      	ldrh	r3, [r0, #6]
 80076c6:	8b42      	ldrh	r2, [r0, #26]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d305      	bcc.n	80076d8 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 80076cc:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 80076ce:	4298      	cmp	r0, r3
 80076d0:	bf8c      	ite	hi
 80076d2:	2004      	movhi	r0, #4
 80076d4:	2000      	movls	r0, #0
 80076d6:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 80076d8:	2002      	movs	r0, #2
  }
  return fault;
}
 80076da:	4770      	bx	lr

080076dc <RVBS_CalcAvVbus>:
{
 80076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076de:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80076e0:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80076e4:	f7fc feac 	bl	8004440 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 80076e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076ec:	4298      	cmp	r0, r3
 80076ee:	d01c      	beq.n	800772a <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 80076f0:	6a2f      	ldr	r7, [r5, #32]
 80076f2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80076f6:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80076fa:	8b2e      	ldrh	r6, [r5, #24]
 80076fc:	b1d6      	cbz	r6, 8007734 <RVBS_CalcAvVbus+0x58>
 80076fe:	2300      	movs	r3, #0
    wtemp = 0;
 8007700:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8007702:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007706:	3301      	adds	r3, #1
 8007708:	b2d9      	uxtb	r1, r3
 800770a:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 800770c:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800770e:	460b      	mov	r3, r1
 8007710:	d3f7      	bcc.n	8007702 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8007712:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007716:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800771a:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800771c:	3e01      	subs	r6, #1
 800771e:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 8007720:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007722:	da09      	bge.n	8007738 <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 8007724:	3301      	adds	r3, #1
 8007726:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800772a:	4628      	mov	r0, r5
 800772c:	f7ff ffca 	bl	80076c4 <RVBS_CheckFaultState>
 8007730:	8128      	strh	r0, [r5, #8]
}
 8007732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007734:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 8007736:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 8007738:	2300      	movs	r3, #0
 800773a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800773e:	4628      	mov	r0, r5
 8007740:	f7ff ffc0 	bl	80076c4 <RVBS_CheckFaultState>
 8007744:	8128      	strh	r0, [r5, #8]
}
 8007746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007748 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8007748:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800774a:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 800774c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8007750:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8007754:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8007756:	4770      	bx	lr

08007758 <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 8007758:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800775c:	2901      	cmp	r1, #1
 800775e:	d90c      	bls.n	800777a <REMNG_Calc+0x22>
{
 8007760:	b410      	push	{r4}
 8007762:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8007766:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 8007768:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 800776a:	60c1      	str	r1, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 800776c:	6083      	str	r3, [r0, #8]
 800776e:	fb93 f2f2 	sdiv	r2, r3, r2
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 8007772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007776:	4610      	mov	r0, r2
 8007778:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 800777a:	d005      	beq.n	8007788 <REMNG_Calc+0x30>
 800777c:	6942      	ldr	r2, [r0, #20]
  pHandle->Ext = current_ref;
 800777e:	6083      	str	r3, [r0, #8]
 8007780:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8007784:	4610      	mov	r0, r2
 8007786:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007788:	6842      	ldr	r2, [r0, #4]
 800778a:	6943      	ldr	r3, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 800778c:	2100      	movs	r1, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800778e:	fb03 f302 	mul.w	r3, r3, r2
    pHandle->RampRemainingStep = 0u;
 8007792:	60c1      	str	r1, [r0, #12]
  pHandle->Ext = current_ref;
 8007794:	6083      	str	r3, [r0, #8]
}
 8007796:	4610      	mov	r0, r2
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop

0800779c <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 800779c:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 800779e:	fab0 f080 	clz	r0, r0
 80077a2:	0940      	lsrs	r0, r0, #5
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop

080077a8 <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 80077a8:	2800      	cmp	r0, #0
 80077aa:	bfb8      	it	lt
 80077ac:	4240      	neglt	r0, r0
{
 80077ae:	2301      	movs	r3, #1
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 80077b0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80077b4:	e002      	b.n	80077bc <getScalingFactor+0x14>
 80077b6:	3301      	adds	r3, #1
  for ( i = 1u; i < 32u; i++ )
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d007      	beq.n	80077cc <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 80077bc:	fa21 f203 	lsr.w	r2, r1, r3
    if ( TargetAbs >= limit )
 80077c0:	4290      	cmp	r0, r2
 80077c2:	d3f8      	bcc.n	80077b6 <getScalingFactor+0xe>
 80077c4:	3b01      	subs	r3, #1
 80077c6:	2001      	movs	r0, #1
 80077c8:	4098      	lsls	r0, r3
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
}
 80077ca:	4770      	bx	lr
 80077cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop

080077d4 <REMNG_ExecRamp>:
{
 80077d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d8:	4604      	mov	r4, r0
 80077da:	460d      	mov	r5, r1
  if ( Durationms == 0u )
 80077dc:	4690      	mov	r8, r2
 80077de:	b95a      	cbnz	r2, 80077f8 <REMNG_ExecRamp+0x24>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 80077e0:	4608      	mov	r0, r1
 80077e2:	f7ff ffe1 	bl	80077a8 <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80077e6:	fb05 f500 	mul.w	r5, r5, r0
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 80077ea:	6160      	str	r0, [r4, #20]
    pHandle->IncDecAmount = 0;
 80077ec:	e9c4 8803 	strd	r8, r8, [r4, #12]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80077f0:	60a5      	str	r5, [r4, #8]
}
 80077f2:	2001      	movs	r0, #1
 80077f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 80077f8:	6943      	ldr	r3, [r0, #20]
 80077fa:	6887      	ldr	r7, [r0, #8]
 80077fc:	fb97 f7f3 	sdiv	r7, r7, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8007800:	1bce      	subs	r6, r1, r7
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff ffd0 	bl	80077a8 <getScalingFactor>
 8007808:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 800780a:	4638      	mov	r0, r7
 800780c:	f7ff ffcc 	bl	80077a8 <getScalingFactor>
 8007810:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8007812:	4628      	mov	r0, r5
 8007814:	f7ff ffc8 	bl	80077a8 <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8007818:	45ca      	cmp	sl, r9
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 800781a:	4603      	mov	r3, r0
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 800781c:	6821      	ldr	r1, [r4, #0]
    pHandle->TargetFinal = TargetFinal;
 800781e:	6065      	str	r5, [r4, #4]
 8007820:	bf2c      	ite	cs
 8007822:	4648      	movcs	r0, r9
 8007824:	4650      	movcc	r0, sl
      if ( wScalingFactor2 < wScalingFactor3 )
 8007826:	4298      	cmp	r0, r3
 8007828:	bf28      	it	cs
 800782a:	4618      	movcs	r0, r3
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 800782c:	fb01 f308 	mul.w	r3, r1, r8
    aux /= 1000u;
 8007830:	4908      	ldr	r1, [pc, #32]	; (8007854 <REMNG_ExecRamp+0x80>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8007832:	6160      	str	r0, [r4, #20]
    aux /= 1000u;
 8007834:	fba1 2303 	umull	r2, r3, r1, r3
 8007838:	099b      	lsrs	r3, r3, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800783a:	fb07 f700 	mul.w	r7, r7, r0
    pHandle->RampRemainingStep++;
 800783e:	3301      	adds	r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8007840:	fb00 f006 	mul.w	r0, r0, r6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8007844:	60a7      	str	r7, [r4, #8]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8007846:	fb90 f0f3 	sdiv	r0, r0, r3
    pHandle->IncDecAmount = aux1;
 800784a:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 800784e:	2001      	movs	r0, #1
 8007850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007854:	10624dd3 	.word	0x10624dd3

08007858 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8007858:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop

08007860 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8007860:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop

08007868 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8007868:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop

08007870 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8007870:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8007874:	8a81      	ldrh	r1, [r0, #20]
{
 8007876:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 8007878:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 800787a:	bfb8      	it	lt
 800787c:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800787e:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8007880:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8007882:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8007884:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8007886:	429d      	cmp	r5, r3
 8007888:	d817      	bhi.n	80078ba <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800788a:	4299      	cmp	r1, r3
 800788c:	bf2c      	ite	cs
 800788e:	2300      	movcs	r3, #0
 8007890:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8007892:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8007896:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8007898:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 800789a:	bfb8      	it	lt
 800789c:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800789e:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80078a0:	428d      	cmp	r5, r1
 80078a2:	d300      	bcc.n	80078a6 <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 80078a4:	b15b      	cbz	r3, 80078be <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 80078a6:	4294      	cmp	r4, r2
 80078a8:	d901      	bls.n	80078ae <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 80078aa:	3201      	adds	r2, #1
 80078ac:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80078ae:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 80078b0:	1b10      	subs	r0, r2, r4
 80078b2:	bf18      	it	ne
 80078b4:	2001      	movne	r0, #1
 80078b6:	bc30      	pop	{r4, r5}
 80078b8:	4770      	bx	lr
    SpeedError = true;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e7e9      	b.n	8007892 <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 80078be:	4294      	cmp	r4, r2
 80078c0:	bf88      	it	hi
 80078c2:	2200      	movhi	r2, #0
 80078c4:	e7f3      	b.n	80078ae <SPD_IsMecSpeedReliable+0x3e>
 80078c6:	bf00      	nop

080078c8 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 80078c8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80078cc:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 80078d0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80078d4:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 80078d8:	b200      	sxth	r0, r0
 80078da:	4770      	bx	lr

080078dc <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 80078dc:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80078de:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80078e2:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 80078e6:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 80078ea:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80078ec:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80078ee:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 80078f0:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80078f2:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 80078f6:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 80078f8:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 80078fa:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 80078fc:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 80078fe:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8007900:	6183      	str	r3, [r0, #24]
}
 8007902:	4770      	bx	lr

08007904 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8007904:	6141      	str	r1, [r0, #20]
}
 8007906:	4770      	bx	lr

08007908 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8007908:	6940      	ldr	r0, [r0, #20]
 800790a:	4770      	bx	lr

0800790c <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800790c:	7803      	ldrb	r3, [r0, #0]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d000      	beq.n	8007914 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8007912:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8007914:	6900      	ldr	r0, [r0, #16]
 8007916:	2100      	movs	r1, #0
 8007918:	f7ff b8ea 	b.w	8006af0 <PID_SetIntegralTerm>

0800791c <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800791c:	6840      	ldr	r0, [r0, #4]
 800791e:	2800      	cmp	r0, #0
 8007920:	bfbc      	itt	lt
 8007922:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007926:	30ff      	addlt	r0, #255	; 0xff
}
 8007928:	1400      	asrs	r0, r0, #16
 800792a:	4770      	bx	lr

0800792c <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800792c:	6880      	ldr	r0, [r0, #8]
 800792e:	2800      	cmp	r0, #0
 8007930:	bfbc      	itt	lt
 8007932:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007936:	30ff      	addlt	r0, #255	; 0xff
}
 8007938:	1400      	asrs	r0, r0, #16
 800793a:	4770      	bx	lr

0800793c <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800793c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800793e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8007940:	60c3      	str	r3, [r0, #12]
}
 8007942:	4770      	bx	lr

08007944 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8007944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007946:	7806      	ldrb	r6, [r0, #0]
{
 8007948:	4604      	mov	r4, r0
 800794a:	460d      	mov	r5, r1
 800794c:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800794e:	b326      	cbz	r6, 800799a <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007950:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007952:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007954:	2800      	cmp	r0, #0
 8007956:	bfbc      	itt	lt
 8007958:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800795c:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800795e:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007960:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007964:	dd01      	ble.n	800796a <STC_ExecRamp+0x26>
      AllowedRange = false;
 8007966:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8007968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800796a:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 800796e:	42a9      	cmp	r1, r5
 8007970:	dcf9      	bgt.n	8007966 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8007972:	8c23      	ldrh	r3, [r4, #32]
 8007974:	429d      	cmp	r5, r3
 8007976:	da03      	bge.n	8007980 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8007978:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800797c:	42ab      	cmp	r3, r5
 800797e:	dbf2      	blt.n	8007966 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8007980:	b9af      	cbnz	r7, 80079ae <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8007982:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8007984:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8007986:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8007988:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800798c:	bf0c      	ite	eq
 800798e:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8007990:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8007992:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8007994:	61a3      	str	r3, [r4, #24]
 8007996:	2001      	movs	r0, #1
}
 8007998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800799a:	f7ff ffc7 	bl	800792c <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800799e:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 80079a0:	42b5      	cmp	r5, r6
 80079a2:	dce0      	bgt.n	8007966 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 80079a4:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80079a8:	42ab      	cmp	r3, r5
 80079aa:	dcdc      	bgt.n	8007966 <STC_ExecRamp+0x22>
 80079ac:	e7e8      	b.n	8007980 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80079ae:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 80079b0:	4a07      	ldr	r2, [pc, #28]	; (80079d0 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 80079b2:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80079b4:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 80079b8:	fba2 2303 	umull	r2, r3, r2, r3
 80079bc:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80079be:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80079c0:	1a2d      	subs	r5, r5, r0
 80079c2:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 80079c4:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80079c6:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 80079ca:	2001      	movs	r0, #1
 80079cc:	61a5      	str	r5, [r4, #24]
}
 80079ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d0:	10624dd3 	.word	0x10624dd3

080079d4 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 80079d4:	2300      	movs	r3, #0
 80079d6:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80079d8:	6183      	str	r3, [r0, #24]
}
 80079da:	4770      	bx	lr

080079dc <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 80079dc:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 80079de:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80079e2:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80079e4:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 80079e6:	2a00      	cmp	r2, #0
 80079e8:	bf08      	it	eq
 80079ea:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 80079ec:	2b01      	cmp	r3, #1
{
 80079ee:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 80079f0:	d90c      	bls.n	8007a0c <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80079f2:	6981      	ldr	r1, [r0, #24]
 80079f4:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80079f6:	3b01      	subs	r3, #1
 80079f8:	2e00      	cmp	r6, #0
 80079fa:	60c3      	str	r3, [r0, #12]
 80079fc:	4630      	mov	r0, r6
 80079fe:	db09      	blt.n	8007a14 <STC_CalcTorqueReference+0x38>
 8007a00:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8007a02:	2a01      	cmp	r2, #1
 8007a04:	d00a      	beq.n	8007a1c <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8007a06:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8007a08:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8007a0a:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8007a0c:	d012      	beq.n	8007a34 <STC_CalcTorqueReference+0x58>
 8007a0e:	2e00      	cmp	r6, #0
 8007a10:	4630      	mov	r0, r6
 8007a12:	daf5      	bge.n	8007a00 <STC_CalcTorqueReference+0x24>
 8007a14:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8007a18:	30ff      	adds	r0, #255	; 0xff
 8007a1a:	e7f1      	b.n	8007a00 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8007a1c:	6960      	ldr	r0, [r4, #20]
 8007a1e:	f7ff ff1f 	bl	8007860 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8007a22:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8007a24:	b201      	sxth	r1, r0
 8007a26:	6920      	ldr	r0, [r4, #16]
 8007a28:	f7ff f89e 	bl	8006b68 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8007a2c:	0403      	lsls	r3, r0, #16
 8007a2e:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8007a32:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8007a34:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8007a38:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8007a3a:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8007a3c:	60c3      	str	r3, [r0, #12]
 8007a3e:	e7e0      	b.n	8007a02 <STC_CalcTorqueReference+0x26>

08007a40 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8007a40:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop

08007a48 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8007a48:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	b299      	uxth	r1, r3
 8007a50:	f361 020f 	bfi	r2, r1, #0, #16
 8007a54:	0c1b      	lsrs	r3, r3, #16
 8007a56:	f363 421f 	bfi	r2, r3, #16, #16
{
 8007a5a:	b082      	sub	sp, #8
}
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	b002      	add	sp, #8
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop

08007a64 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8007a64:	b510      	push	{r4, lr}
 8007a66:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8007a68:	6940      	ldr	r0, [r0, #20]
 8007a6a:	f7ff fef9 	bl	8007860 <SPD_GetAvrgMecSpeedUnit>
 8007a6e:	0400      	lsls	r0, r0, #16
 8007a70:	6060      	str	r0, [r4, #4]
}
 8007a72:	bd10      	pop	{r4, pc}

08007a74 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8007a74:	2300      	movs	r3, #0
 8007a76:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8007a78:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop

08007a80 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8007a80:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007a82:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8007a84:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 8007a86:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	ea23 0202 	bic.w	r2, r3, r2
 8007a8e:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8007a90:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 8007a92:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8007a94:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8007a96:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8007a98:	d008      	beq.n	8007aac <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8007a9a:	b912      	cbnz	r2, 8007aa2 <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	bc30      	pop	{r4, r5}
 8007aa0:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8007aa2:	240a      	movs	r4, #10
 8007aa4:	7004      	strb	r4, [r0, #0]
}
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	bc30      	pop	{r4, r5}
 8007aaa:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	d1f5      	bne.n	8007a9c <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 8007ab0:	240b      	movs	r4, #11
 8007ab2:	7004      	strb	r4, [r0, #0]
}
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	bc30      	pop	{r4, r5}
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop

08007abc <STM_NextState>:
{
 8007abc:	b508      	push	{r3, lr}
 8007abe:	7803      	ldrb	r3, [r0, #0]
 8007ac0:	2b14      	cmp	r3, #20
 8007ac2:	d810      	bhi.n	8007ae6 <STM_NextState+0x2a>
 8007ac4:	e8df f003 	tbb	[pc, r3]
 8007ac8:	240d545e 	.word	0x240d545e
 8007acc:	390d352e 	.word	0x390d352e
 8007ad0:	0f0f3f3c 	.word	0x0f0f3f3c
 8007ad4:	47650b44 	.word	0x47650b44
 8007ad8:	504d1b4a 	.word	0x504d1b4a
 8007adc:	5b          	.byte	0x5b
 8007add:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8007ade:	290e      	cmp	r1, #14
 8007ae0:	d013      	beq.n	8007b0a <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 8007ae2:	2907      	cmp	r1, #7
 8007ae4:	d011      	beq.n	8007b0a <STM_NextState+0x4e>
 8007ae6:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d018      	beq.n	8007b20 <STM_NextState+0x64>
 8007aee:	2907      	cmp	r1, #7
 8007af0:	d016      	beq.n	8007b20 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8007af2:	2200      	movs	r2, #0
 8007af4:	2180      	movs	r1, #128	; 0x80
 8007af6:	f7ff ffc3 	bl	8007a80 <STM_FaultProcessing>
 8007afa:	2000      	movs	r0, #0
}
 8007afc:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8007afe:	2914      	cmp	r1, #20
 8007b00:	d8f1      	bhi.n	8007ae6 <STM_NextState+0x2a>
 8007b02:	4b26      	ldr	r3, [pc, #152]	; (8007b9c <STM_NextState+0xe0>)
 8007b04:	40cb      	lsrs	r3, r1
 8007b06:	07db      	lsls	r3, r3, #31
 8007b08:	d5ed      	bpl.n	8007ae6 <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8007b0a:	7001      	strb	r1, [r0, #0]
 8007b0c:	2001      	movs	r0, #1
}
 8007b0e:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8007b10:	2911      	cmp	r1, #17
 8007b12:	d8ee      	bhi.n	8007af2 <STM_NextState+0x36>
 8007b14:	4b22      	ldr	r3, [pc, #136]	; (8007ba0 <STM_NextState+0xe4>)
 8007b16:	40cb      	lsrs	r3, r1
 8007b18:	07da      	lsls	r2, r3, #31
 8007b1a:	d4f6      	bmi.n	8007b0a <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007b1c:	2903      	cmp	r1, #3
 8007b1e:	d1e8      	bne.n	8007af2 <STM_NextState+0x36>
 8007b20:	2000      	movs	r0, #0
}
 8007b22:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8007b24:	2913      	cmp	r1, #19
 8007b26:	d0f0      	beq.n	8007b0a <STM_NextState+0x4e>
 8007b28:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8007b2c:	2b05      	cmp	r3, #5
 8007b2e:	d1dc      	bne.n	8007aea <STM_NextState+0x2e>
 8007b30:	e7eb      	b.n	8007b0a <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8007b32:	1f8b      	subs	r3, r1, #6
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d8d6      	bhi.n	8007ae6 <STM_NextState+0x2a>
 8007b38:	e7e7      	b.n	8007b0a <STM_NextState+0x4e>
      if ( bState == STOP )
 8007b3a:	2908      	cmp	r1, #8
 8007b3c:	d1d3      	bne.n	8007ae6 <STM_NextState+0x2a>
 8007b3e:	e7e4      	b.n	8007b0a <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 8007b40:	2909      	cmp	r1, #9
 8007b42:	d1d0      	bne.n	8007ae6 <STM_NextState+0x2a>
 8007b44:	e7e1      	b.n	8007b0a <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8007b46:	2900      	cmp	r1, #0
 8007b48:	d0df      	beq.n	8007b0a <STM_NextState+0x4e>
 8007b4a:	290c      	cmp	r1, #12
 8007b4c:	d1cb      	bne.n	8007ae6 <STM_NextState+0x2a>
 8007b4e:	e7dc      	b.n	8007b0a <STM_NextState+0x4e>
      if ( bState == IDLE )
 8007b50:	2900      	cmp	r1, #0
 8007b52:	d0da      	beq.n	8007b0a <STM_NextState+0x4e>
 8007b54:	e7c7      	b.n	8007ae6 <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8007b56:	2902      	cmp	r1, #2
 8007b58:	d1c3      	bne.n	8007ae2 <STM_NextState+0x26>
 8007b5a:	e7d6      	b.n	8007b0a <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8007b5c:	2911      	cmp	r1, #17
 8007b5e:	d1c0      	bne.n	8007ae2 <STM_NextState+0x26>
 8007b60:	e7d3      	b.n	8007b0a <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8007b62:	2904      	cmp	r1, #4
 8007b64:	d1bd      	bne.n	8007ae2 <STM_NextState+0x26>
 8007b66:	e7d0      	b.n	8007b0a <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8007b68:	1f0b      	subs	r3, r1, #4
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d8b9      	bhi.n	8007ae2 <STM_NextState+0x26>
 8007b6e:	e7cc      	b.n	8007b0a <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8007b70:	2907      	cmp	r1, #7
 8007b72:	d0ca      	beq.n	8007b0a <STM_NextState+0x4e>
 8007b74:	f1a1 030d 	sub.w	r3, r1, #13
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d8b4      	bhi.n	8007ae6 <STM_NextState+0x2a>
 8007b7c:	e7c5      	b.n	8007b0a <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8007b7e:	2912      	cmp	r1, #18
 8007b80:	d1af      	bne.n	8007ae2 <STM_NextState+0x26>
 8007b82:	e7c2      	b.n	8007b0a <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007b84:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d0be      	beq.n	8007b0a <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 8007b8c:	290c      	cmp	r1, #12
 8007b8e:	d1ae      	bne.n	8007aee <STM_NextState+0x32>
 8007b90:	e7bb      	b.n	8007b0a <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8007b92:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8007b96:	2b07      	cmp	r3, #7
 8007b98:	d1a5      	bne.n	8007ae6 <STM_NextState+0x2a>
 8007b9a:	e7b6      	b.n	8007b0a <STM_NextState+0x4e>
 8007b9c:	00140080 	.word	0x00140080
 8007ba0:	00030092 	.word	0x00030092

08007ba4 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8007ba4:	7800      	ldrb	r0, [r0, #0]
 8007ba6:	4770      	bx	lr

08007ba8 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8007ba8:	7803      	ldrb	r3, [r0, #0]
 8007baa:	2b0b      	cmp	r3, #11
 8007bac:	d001      	beq.n	8007bb2 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8007bae:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8007bb0:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8007bb2:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8007bb4:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8007bb6:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8007bb8:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8007bba:	2001      	movs	r0, #1
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop

08007bc0 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8007bc0:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8007bc2:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8007bc4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop

08007bcc <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8007bcc:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8007bce:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8007bd0:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 8007bd2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8007bd6:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8007bd8:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8007bda:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8007bdc:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8007bde:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8007be0:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 8007be2:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop

08007be8 <VSS_Init>:
{
 8007be8:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8007bea:	f7ff ffef 	bl	8007bcc <VSS_Clear>
}
 8007bee:	bd08      	pop	{r3, pc}

08007bf0 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8007bf0:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8007bf4:	b123      	cbz	r3, 8007c00 <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 8007bf6:	f9b1 2000 	ldrsh.w	r2, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8007bfa:	8082      	strh	r2, [r0, #4]
  return hRetAngle;
}
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4770      	bx	lr
{
 8007c00:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007c02:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8007c04:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007c08:	88c7      	ldrh	r7, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8007c0a:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 8007c0e:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007c10:	fb95 f4f4 	sdiv	r4, r5, r4
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007c14:	442b      	add	r3, r5
 8007c16:	b21a      	sxth	r2, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007c18:	443c      	add	r4, r7
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007c1a:	8602      	strh	r2, [r0, #48]	; 0x30
 8007c1c:	b29b      	uxth	r3, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007c1e:	80c4      	strh	r4, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8007c20:	b1de      	cbz	r6, 8007c5a <VSS_CalcElAngle+0x6a>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8007c22:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 8007c26:	b1e4      	cbz	r4, 8007c62 <VSS_CalcElAngle+0x72>
        pHandle->hTransitionRemainingSteps--;
 8007c28:	3c01      	subs	r4, #1
 8007c2a:	b224      	sxth	r4, r4
 8007c2c:	85c4      	strh	r4, [r0, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8007c2e:	2d00      	cmp	r5, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8007c30:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8007c32:	db27      	blt.n	8007c84 <VSS_CalcElAngle+0x94>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 8007c34:	1acb      	subs	r3, r1, r3
 8007c36:	b21b      	sxth	r3, r3
 8007c38:	2601      	movs	r6, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8007c3a:	f9b0 5036 	ldrsh.w	r5, [r0, #54]	; 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 8007c3e:	fb03 f404 	mul.w	r4, r3, r4
        if ( hAngleDiff >= 0 )
 8007c42:	2b00      	cmp	r3, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 8007c44:	fb94 f4f5 	sdiv	r4, r4, r5
        hAngleCorr *= hSignCorr;
 8007c48:	fb14 f406 	smulbb	r4, r4, r6
 8007c4c:	b2a4      	uxth	r4, r4
        if ( hAngleDiff >= 0 )
 8007c4e:	db12      	blt.n	8007c76 <VSS_CalcElAngle+0x86>
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8007c50:	1b0c      	subs	r4, r1, r4
          pHandle->bTransitionLocked = true;
 8007c52:	2301      	movs	r3, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8007c54:	b222      	sxth	r2, r4
          pHandle->bTransitionLocked = true;
 8007c56:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  pHandle->_Super.hElAngle = hRetAngle;
 8007c5a:	8082      	strh	r2, [r0, #4]
}
 8007c5c:	bcf0      	pop	{r4, r5, r6, r7}
 8007c5e:	4610      	mov	r0, r2
 8007c60:	4770      	bx	lr
        hRetAngle = *( int16_t * )pInputVars_str;
 8007c62:	f9b1 2000 	ldrsh.w	r2, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 8007c66:	7004      	strb	r4, [r0, #0]
        pHandle->bTransitionEnded = true;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 8007c6e:	8082      	strh	r2, [r0, #4]
}
 8007c70:	bcf0      	pop	{r4, r5, r6, r7}
 8007c72:	4610      	mov	r0, r2
 8007c74:	4770      	bx	lr
          if ( pHandle->bTransitionLocked == false )
 8007c76:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0ed      	beq.n	8007c5a <VSS_CalcElAngle+0x6a>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 8007c7e:	440c      	add	r4, r1
 8007c80:	b222      	sxth	r2, r4
 8007c82:	e7ea      	b.n	8007c5a <VSS_CalcElAngle+0x6a>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 8007c84:	1a5b      	subs	r3, r3, r1
 8007c86:	b21b      	sxth	r3, r3
 8007c88:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8007c8c:	e7d5      	b.n	8007c3a <VSS_CalcElAngle+0x4a>
 8007c8e:	bf00      	nop

08007c90 <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8007c90:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8007c92:	2b01      	cmp	r3, #1
{
 8007c94:	b470      	push	{r4, r5, r6}
  if ( pHandle->hRemainingStep > 1u )
 8007c96:	d925      	bls.n	8007ce4 <VSS_CalcAvrgMecSpeedUnit+0x54>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8007c98:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	bfb8      	it	lt
 8007ca4:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8007ca8:	8b42      	ldrh	r2, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8007caa:	7846      	ldrb	r6, [r0, #1]
 8007cac:	69c5      	ldr	r5, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8007cae:	bfb8      	it	lt
 8007cb0:	33ff      	addlt	r3, #255	; 0xff
 8007cb2:	141c      	asrs	r4, r3, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8007cb4:	fb04 f202 	mul.w	r2, r4, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8007cb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007cbc:	0053      	lsls	r3, r2, #1
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8007cbe:	fb05 f506 	mul.w	r5, r5, r6
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8007cc2:	fb93 f3f5 	sdiv	r3, r3, r5
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8007cc6:	b21b      	sxth	r3, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8007cc8:	81c4      	strh	r4, [r0, #14]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8007cca:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8007ccc:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007cce:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 8007cd0:	1e53      	subs	r3, r2, #1
 8007cd2:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 8007cd4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8007cd8:	b963      	cbnz	r3, 8007cf4 <VSS_CalcAvrgMecSpeedUnit+0x64>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007cda:	78c2      	ldrb	r2, [r0, #3]
 8007cdc:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8007cde:	bc70      	pop	{r4, r5, r6}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	4770      	bx	lr
  else if ( pHandle->hRemainingStep == 1u )
 8007ce4:	d009      	beq.n	8007cfa <VSS_CalcAvrgMecSpeedUnit+0x6a>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007ce6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8007cea:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 8007cec:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d0f2      	beq.n	8007cda <VSS_CalcAvrgMecSpeedUnit+0x4a>
}
 8007cf4:	bc70      	pop	{r4, r5, r6}
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 8007cf6:	f7ff bdbb 	b.w	8007870 <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8007cfa:	f9b0 502a 	ldrsh.w	r5, [r0, #42]	; 0x2a
 8007cfe:	800d      	strh	r5, [r1, #0]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007d00:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8007d02:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007d04:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007d06:	8185      	strh	r5, [r0, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007d08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8007d0c:	fb02 f205 	mul.w	r2, r2, r5
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007d10:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 8007d12:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->hRemainingStep = 0u;
 8007d16:	2200      	movs	r2, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007d18:	fb14 f303 	smulbb	r3, r4, r3
 8007d1c:	81c3      	strh	r3, [r0, #14]
    pHandle->hRemainingStep = 0u;
 8007d1e:	8502      	strh	r2, [r0, #40]	; 0x28
 8007d20:	e7d8      	b.n	8007cd4 <VSS_CalcAvrgMecSpeedUnit+0x44>
 8007d22:	bf00      	nop

08007d24 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8007d24:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8007d26:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 8007d28:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8007d2a:	fb91 f1f3 	sdiv	r1, r1, r3
 8007d2e:	80c1      	strh	r1, [r0, #6]
}
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop

08007d34 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 8007d34:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8007d36:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 8007d3a:	b984      	cbnz	r4, 8007d5e <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 8007d3c:	b98a      	cbnz	r2, 8007d62 <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007d3e:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8007d40:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007d42:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8007d44:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007d46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007d4a:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8007d4c:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8007d50:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007d54:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 8007d58:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007d5a:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8007d5c:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8007d5e:	bc70      	pop	{r4, r5, r6}
 8007d60:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8007d62:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8007d64:	4d11      	ldr	r5, [pc, #68]	; (8007dac <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007d66:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8007d68:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007d6c:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8007d6e:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8007d72:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8007d76:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8007d78:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8007d7a:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007d7e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8007d82:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8007d84:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 8007d88:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8007d8a:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8007d8e:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8007d92:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 8007d94:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8007d96:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8007d98:	0412      	lsls	r2, r2, #16
 8007d9a:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8007d9e:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8007da2:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 8007da6:	8503      	strh	r3, [r0, #40]	; 0x28
}
 8007da8:	bc70      	pop	{r4, r5, r6}
 8007daa:	4770      	bx	lr
 8007dac:	10624dd3 	.word	0x10624dd3

08007db0 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8007db0:	b151      	cbz	r1, 8007dc8 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 8007db2:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 8007db6:	2201      	movs	r2, #1
 8007db8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8007dbc:	b923      	cbnz	r3, 8007dc8 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8007dbe:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 8007dc2:	7003      	strb	r3, [r0, #0]
      bAux = false;
 8007dc4:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 8007dc6:	4770      	bx	lr
  bool bAux = true;
 8007dc8:	2001      	movs	r0, #1
 8007dca:	4770      	bx	lr

08007dcc <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8007dcc:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop

08007dd4 <RUC_Init>:
 8007dd4:	b430      	push	{r4, r5}
 8007dd6:	6681      	str	r1, [r0, #104]	; 0x68
 8007dd8:	2100      	movs	r1, #0
 8007dda:	9c02      	ldr	r4, [sp, #8]
 8007ddc:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8007de0:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 8007de4:	f110 010c 	adds.w	r1, r0, #12
 8007de8:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 8007dec:	6744      	str	r4, [r0, #116]	; 0x74
 8007dee:	d023      	beq.n	8007e38 <RUC_Init+0x64>
 8007df0:	6943      	ldr	r3, [r0, #20]
 8007df2:	b323      	cbz	r3, 8007e3e <RUC_Init+0x6a>
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	b323      	cbz	r3, 8007e42 <RUC_Init+0x6e>
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	b323      	cbz	r3, 8007e46 <RUC_Init+0x72>
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	b1c3      	cbz	r3, 8007e32 <RUC_Init+0x5e>
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	2105      	movs	r1, #5
 8007e04:	b1b3      	cbz	r3, 8007e34 <RUC_Init+0x60>
 8007e06:	2204      	movs	r2, #4
 8007e08:	2105      	movs	r1, #5
 8007e0a:	8805      	ldrh	r5, [r0, #0]
 8007e0c:	4c0f      	ldr	r4, [pc, #60]	; (8007e4c <RUC_Init+0x78>)
 8007e0e:	2364      	movs	r3, #100	; 0x64
 8007e10:	fb03 f305 	mul.w	r3, r3, r5
 8007e14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007e18:	fba4 4303 	umull	r4, r3, r4, r3
 8007e1c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007e20:	2400      	movs	r4, #0
 8007e22:	099b      	lsrs	r3, r3, #6
 8007e24:	6154      	str	r4, [r2, #20]
 8007e26:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 8007e2a:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 8007e2e:	bc30      	pop	{r4, r5}
 8007e30:	4770      	bx	lr
 8007e32:	2104      	movs	r1, #4
 8007e34:	1e4a      	subs	r2, r1, #1
 8007e36:	e7e8      	b.n	8007e0a <RUC_Init+0x36>
 8007e38:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3c:	e7e5      	b.n	8007e0a <RUC_Init+0x36>
 8007e3e:	2101      	movs	r1, #1
 8007e40:	e7f8      	b.n	8007e34 <RUC_Init+0x60>
 8007e42:	2102      	movs	r1, #2
 8007e44:	e7f6      	b.n	8007e34 <RUC_Init+0x60>
 8007e46:	2103      	movs	r1, #3
 8007e48:	e7f4      	b.n	8007e34 <RUC_Init+0x60>
 8007e4a:	bf00      	nop
 8007e4c:	10624dd3 	.word	0x10624dd3

08007e50 <RUC_Clear>:
 8007e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e54:	4604      	mov	r4, r0
 8007e56:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 8007e58:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 8007e5c:	80e1      	strh	r1, [r4, #6]
 8007e5e:	2500      	movs	r5, #0
 8007e60:	4638      	mov	r0, r7
 8007e62:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 8007e66:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8007e6a:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8007e6e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 8007e72:	460e      	mov	r6, r1
 8007e74:	f7ff feaa 	bl	8007bcc <VSS_Clear>
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	f7ff fd5e 	bl	800793c <STC_SetControlMode>
 8007e80:	8861      	ldrh	r1, [r4, #2]
 8007e82:	b2b6      	uxth	r6, r6
 8007e84:	fb11 f106 	smulbb	r1, r1, r6
 8007e88:	b209      	sxth	r1, r1
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	f7ff ff4a 	bl	8007d24 <VSS_SetMecAngle>
 8007e90:	462a      	mov	r2, r5
 8007e92:	4629      	mov	r1, r5
 8007e94:	4640      	mov	r0, r8
 8007e96:	f7ff fd55 	bl	8007944 <STC_ExecRamp>
 8007e9a:	8a21      	ldrh	r1, [r4, #16]
 8007e9c:	89a2      	ldrh	r2, [r4, #12]
 8007e9e:	fb11 f106 	smulbb	r1, r1, r6
 8007ea2:	b209      	sxth	r1, r1
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	f7ff fd4d 	bl	8007944 <STC_ExecRamp>
 8007eaa:	89e1      	ldrh	r1, [r4, #14]
 8007eac:	89a2      	ldrh	r2, [r4, #12]
 8007eae:	fb11 f106 	smulbb	r1, r1, r6
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	b209      	sxth	r1, r1
 8007eb6:	f7ff ff3d 	bl	8007d34 <VSS_SetMecAcceleration>
 8007eba:	89a0      	ldrh	r0, [r4, #12]
 8007ebc:	8823      	ldrh	r3, [r4, #0]
 8007ebe:	4907      	ldr	r1, [pc, #28]	; (8007edc <RUC_Clear+0x8c>)
 8007ec0:	6962      	ldr	r2, [r4, #20]
 8007ec2:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 8007ec6:	fb03 f300 	mul.w	r3, r3, r0
 8007eca:	fba1 1303 	umull	r1, r3, r1, r3
 8007ece:	099b      	lsrs	r3, r3, #6
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	80a3      	strh	r3, [r4, #4]
 8007ed4:	60a2      	str	r2, [r4, #8]
 8007ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eda:	bf00      	nop
 8007edc:	10624dd3 	.word	0x10624dd3

08007ee0 <RUC_Exec>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	8883      	ldrh	r3, [r0, #4]
 8007ee4:	bb53      	cbnz	r3, 8007f3c <RUC_Exec+0x5c>
 8007ee6:	6883      	ldr	r3, [r0, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d02e      	beq.n	8007f4a <RUC_Exec+0x6a>
 8007eec:	88c5      	ldrh	r5, [r0, #6]
 8007eee:	8899      	ldrh	r1, [r3, #4]
 8007ef0:	881a      	ldrh	r2, [r3, #0]
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	fb11 f105 	smulbb	r1, r1, r5
 8007ef8:	b209      	sxth	r1, r1
 8007efa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8007efc:	f7ff fd22 	bl	8007944 <STC_ExecRamp>
 8007f00:	68a3      	ldr	r3, [r4, #8]
 8007f02:	88e5      	ldrh	r5, [r4, #6]
 8007f04:	8859      	ldrh	r1, [r3, #2]
 8007f06:	881a      	ldrh	r2, [r3, #0]
 8007f08:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007f0a:	fb11 f105 	smulbb	r1, r1, r5
 8007f0e:	b209      	sxth	r1, r1
 8007f10:	f7ff ff10 	bl	8007d34 <VSS_SetMecAcceleration>
 8007f14:	68a2      	ldr	r2, [r4, #8]
 8007f16:	8823      	ldrh	r3, [r4, #0]
 8007f18:	8810      	ldrh	r0, [r2, #0]
 8007f1a:	490d      	ldr	r1, [pc, #52]	; (8007f50 <RUC_Exec+0x70>)
 8007f1c:	6892      	ldr	r2, [r2, #8]
 8007f1e:	60a2      	str	r2, [r4, #8]
 8007f20:	fb03 f300 	mul.w	r3, r3, r0
 8007f24:	fba1 2303 	umull	r2, r3, r1, r3
 8007f28:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8007f2c:	099b      	lsrs	r3, r3, #6
 8007f2e:	3301      	adds	r3, #1
 8007f30:	3201      	adds	r2, #1
 8007f32:	80a3      	strh	r3, [r4, #4]
 8007f34:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8007f38:	2001      	movs	r0, #1
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	8083      	strh	r3, [r0, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0cf      	beq.n	8007ee6 <RUC_Exec+0x6>
 8007f46:	2001      	movs	r0, #1
 8007f48:	e7f7      	b.n	8007f3a <RUC_Exec+0x5a>
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	bd38      	pop	{r3, r4, r5, pc}
 8007f4e:	bf00      	nop
 8007f50:	10624dd3 	.word	0x10624dd3

08007f54 <RUC_FirstAccelerationStageReached>:
 8007f54:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8007f58:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 8007f5c:	4282      	cmp	r2, r0
 8007f5e:	bf34      	ite	cc
 8007f60:	2000      	movcc	r0, #0
 8007f62:	2001      	movcs	r0, #1
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop

08007f68 <RUC_SetPhase>:
 8007f68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007f6c:	0089      	lsls	r1, r1, #2
 8007f6e:	1843      	adds	r3, r0, r1
 8007f70:	b410      	push	{r4}
 8007f72:	f8d2 4002 	ldr.w	r4, [r2, #2]
 8007f76:	f8c3 400e 	str.w	r4, [r3, #14]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	8813      	ldrh	r3, [r2, #0]
 8007f7e:	8183      	strh	r3, [r0, #12]
 8007f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f84:	2001      	movs	r0, #1
 8007f86:	4770      	bx	lr

08007f88 <RUC_GetNumberOfPhases>:
 8007f88:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop

08007f90 <RUC_GetPhase>:
 8007f90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007f94:	0089      	lsls	r1, r1, #2
 8007f96:	f101 0308 	add.w	r3, r1, #8
 8007f9a:	4403      	add	r3, r0
 8007f9c:	4401      	add	r1, r0
 8007f9e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8007fa2:	f8c2 3002 	str.w	r3, [r2, #2]
 8007fa6:	898b      	ldrh	r3, [r1, #12]
 8007fa8:	8013      	strh	r3, [r2, #0]
 8007faa:	2001      	movs	r0, #1
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop

08007fb0 <STO_PLL_CalcElAngle>:
 8007fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb4:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8007fb8:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	03d8      	lsls	r0, r3, #15
 8007fc0:	1ac2      	subs	r2, r0, r3
 8007fc2:	4596      	cmp	lr, r2
 8007fc4:	b089      	sub	sp, #36	; 0x24
 8007fc6:	f340 80c1 	ble.w	800814c <STO_PLL_CalcElAngle+0x19c>
 8007fca:	66a2      	str	r2, [r4, #104]	; 0x68
 8007fcc:	4696      	mov	lr, r2
 8007fce:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 8007fd2:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 8007fd6:	fa4e f605 	asr.w	r6, lr, r5
 8007fda:	9603      	str	r6, [sp, #12]
 8007fdc:	4562      	cmp	r2, ip
 8007fde:	b236      	sxth	r6, r6
 8007fe0:	9601      	str	r6, [sp, #4]
 8007fe2:	f280 80c8 	bge.w	8008176 <STO_PLL_CalcElAngle+0x1c6>
 8007fe6:	66e2      	str	r2, [r4, #108]	; 0x6c
 8007fe8:	4694      	mov	ip, r2
 8007fea:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8007fee:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007ff0:	03de      	lsls	r6, r3, #15
 8007ff2:	fa4c f205 	asr.w	r2, ip, r5
 8007ff6:	1af5      	subs	r5, r6, r3
 8007ff8:	9204      	str	r2, [sp, #16]
 8007ffa:	42a8      	cmp	r0, r5
 8007ffc:	b212      	sxth	r2, r2
 8007ffe:	9202      	str	r2, [sp, #8]
 8008000:	f340 80b3 	ble.w	800816a <STO_PLL_CalcElAngle+0x1ba>
 8008004:	6625      	str	r5, [r4, #96]	; 0x60
 8008006:	4628      	mov	r0, r5
 8008008:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800800a:	4295      	cmp	r5, r2
 800800c:	f280 80a7 	bge.w	800815e <STO_PLL_CalcElAngle+0x1ae>
 8008010:	6665      	str	r5, [r4, #100]	; 0x64
 8008012:	462a      	mov	r2, r5
 8008014:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8008018:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 800801c:	890d      	ldrh	r5, [r1, #8]
 800801e:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8008022:	888e      	ldrh	r6, [r1, #4]
 8008024:	f9b1 7000 	ldrsh.w	r7, [r1]
 8008028:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
 800802c:	9901      	ldr	r1, [sp, #4]
 800802e:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
 8008032:	fa40 f103 	asr.w	r1, r0, r3
 8008036:	fa42 f303 	asr.w	r3, r2, r3
 800803a:	1b8e      	subs	r6, r1, r6
 800803c:	fb11 f109 	smulbb	r1, r1, r9
 8008040:	fb13 f909 	smulbb	r9, r3, r9
 8008044:	eba3 030a 	sub.w	r3, r3, sl
 8008048:	9305      	str	r3, [sp, #20]
 800804a:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 800804e:	9b02      	ldr	r3, [sp, #8]
 8008050:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 8008054:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8008058:	b236      	sxth	r6, r6
 800805a:	1a41      	subs	r1, r0, r1
 800805c:	fb05 f707 	mul.w	r7, r5, r7
 8008060:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8008064:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8008066:	eba2 0209 	sub.w	r2, r2, r9
 800806a:	fb0b 1106 	mla	r1, fp, r6, r1
 800806e:	143f      	asrs	r7, r7, #16
 8008070:	fb0b 2b03 	mla	fp, fp, r3, r2
 8008074:	fb0a 1107 	mla	r1, sl, r7, r1
 8008078:	fb05 f508 	mul.w	r5, r5, r8
 800807c:	9a01      	ldr	r2, [sp, #4]
 800807e:	9f02      	ldr	r7, [sp, #8]
 8008080:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 8008084:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 8008088:	142d      	asrs	r5, r5, #16
 800808a:	fb0a b505 	mla	r5, sl, r5, fp
 800808e:	4107      	asrs	r7, r0
 8008090:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
 8008094:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
 8008098:	fa42 f000 	asr.w	r0, r2, r0
 800809c:	fb06 e609 	mla	r6, r6, r9, lr
 80080a0:	fb09 c303 	mla	r3, r9, r3, ip
 80080a4:	fb07 f708 	mul.w	r7, r7, r8
 80080a8:	fb00 f008 	mul.w	r0, r0, r8
 80080ac:	fb07 670a 	mla	r7, r7, sl, r6
 80080b0:	fb00 361a 	mls	r6, r0, sl, r3
 80080b4:	9b01      	ldr	r3, [sp, #4]
 80080b6:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
 80080ba:	fb0b 1813 	mls	r8, fp, r3, r1
 80080be:	9b02      	ldr	r3, [sp, #8]
 80080c0:	fb0b 5513 	mls	r5, fp, r3, r5
 80080c4:	2a00      	cmp	r2, #0
 80080c6:	d147      	bne.n	8008158 <STO_PLL_CalcElAngle+0x1a8>
 80080c8:	f1ba 0f00 	cmp.w	sl, #0
 80080cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080d0:	bfb4      	ite	lt
 80080d2:	4691      	movlt	r9, r2
 80080d4:	f04f 0901 	movge.w	r9, #1
 80080d8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80080dc:	f7fa f8fc 	bl	80022d8 <MCM_Trig_Functions>
 80080e0:	9b04      	ldr	r3, [sp, #16]
 80080e2:	9a03      	ldr	r2, [sp, #12]
 80080e4:	fb13 f309 	smulbb	r3, r3, r9
 80080e8:	fb12 f109 	smulbb	r1, r2, r9
 80080ec:	425b      	negs	r3, r3
 80080ee:	fb10 f303 	smulbb	r3, r0, r3
 80080f2:	fb10 f021 	smultb	r0, r0, r1
 80080f6:	f343 33cf 	sbfx	r3, r3, #15, #16
 80080fa:	f340 31cf 	sbfx	r1, r0, #15, #16
 80080fe:	1a59      	subs	r1, r3, r1
 8008100:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008104:	f7fe fd30 	bl	8006b68 <PI_Controller>
 8008108:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 800810c:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 8008110:	8220      	strh	r0, [r4, #16]
 8008112:	3301      	adds	r3, #1
 8008114:	b2db      	uxtb	r3, r3
 8008116:	429a      	cmp	r2, r3
 8008118:	bf0a      	itet	eq
 800811a:	2200      	moveq	r2, #0
 800811c:	461a      	movne	r2, r3
 800811e:	4613      	moveq	r3, r2
 8008120:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8008124:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 8008128:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800812c:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 8008130:	88a2      	ldrh	r2, [r4, #4]
 8008132:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 8008136:	4410      	add	r0, r2
 8008138:	b200      	sxth	r0, r0
 800813a:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 800813e:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
 8008142:	66e6      	str	r6, [r4, #108]	; 0x6c
 8008144:	80a0      	strh	r0, [r4, #4]
 8008146:	b009      	add	sp, #36	; 0x24
 8008148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814c:	1a1d      	subs	r5, r3, r0
 800814e:	45ae      	cmp	lr, r5
 8008150:	bfdc      	itt	le
 8008152:	66a5      	strle	r5, [r4, #104]	; 0x68
 8008154:	46ae      	movle	lr, r5
 8008156:	e73a      	b.n	8007fce <STO_PLL_CalcElAngle+0x1e>
 8008158:	fa1f f982 	uxth.w	r9, r2
 800815c:	e7bc      	b.n	80080d8 <STO_PLL_CalcElAngle+0x128>
 800815e:	1b9b      	subs	r3, r3, r6
 8008160:	429a      	cmp	r2, r3
 8008162:	bfdc      	itt	le
 8008164:	6663      	strle	r3, [r4, #100]	; 0x64
 8008166:	461a      	movle	r2, r3
 8008168:	e754      	b.n	8008014 <STO_PLL_CalcElAngle+0x64>
 800816a:	1b9a      	subs	r2, r3, r6
 800816c:	4290      	cmp	r0, r2
 800816e:	bfdc      	itt	le
 8008170:	6622      	strle	r2, [r4, #96]	; 0x60
 8008172:	4610      	movle	r0, r2
 8008174:	e748      	b.n	8008008 <STO_PLL_CalcElAngle+0x58>
 8008176:	1a1b      	subs	r3, r3, r0
 8008178:	459c      	cmp	ip, r3
 800817a:	bfdc      	itt	le
 800817c:	66e3      	strle	r3, [r4, #108]	; 0x6c
 800817e:	469c      	movle	ip, r3
 8008180:	e733      	b.n	8007fea <STO_PLL_CalcElAngle+0x3a>
 8008182:	bf00      	nop

08008184 <STO_PLL_CalcAvrgMecSpeedUnit>:
 8008184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008186:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 800818a:	f1bc 0f00 	cmp.w	ip, #0
 800818e:	f000 8095 	beq.w	80082bc <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 8008192:	f10c 37ff 	add.w	r7, ip, #4294967295
 8008196:	b2fb      	uxtb	r3, r7
 8008198:	f100 0672 	add.w	r6, r0, #114	; 0x72
 800819c:	f100 0774 	add.w	r7, r0, #116	; 0x74
 80081a0:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 80081a4:	4632      	mov	r2, r6
 80081a6:	2300      	movs	r3, #0
 80081a8:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 80081ac:	4297      	cmp	r7, r2
 80081ae:	442b      	add	r3, r5
 80081b0:	d1fa      	bne.n	80081a8 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 80081b2:	fb93 f5fc 	sdiv	r5, r3, ip
 80081b6:	2400      	movs	r4, #0
 80081b8:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 80081bc:	1b5b      	subs	r3, r3, r5
 80081be:	42b2      	cmp	r2, r6
 80081c0:	fb03 4403 	mla	r4, r3, r3, r4
 80081c4:	d1f8      	bne.n	80081b8 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 80081c6:	fb94 f4fc 	sdiv	r4, r4, ip
 80081ca:	fb05 fc05 	mul.w	ip, r5, r5
 80081ce:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 80081d2:	8b43      	ldrh	r3, [r0, #26]
 80081d4:	7887      	ldrb	r7, [r0, #2]
 80081d6:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 80081da:	fb0c fc02 	mul.w	ip, ip, r2
 80081de:	ea4f 1cec 	mov.w	ip, ip, asr #7
 80081e2:	fb05 f303 	mul.w	r3, r5, r3
 80081e6:	45a4      	cmp	ip, r4
 80081e8:	69c2      	ldr	r2, [r0, #28]
 80081ea:	bfd4      	ite	le
 80081ec:	2500      	movle	r5, #0
 80081ee:	2501      	movgt	r5, #1
 80081f0:	fb03 f307 	mul.w	r3, r3, r7
 80081f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80081f8:	7842      	ldrb	r2, [r0, #1]
 80081fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80081fe:	b21a      	sxth	r2, r3
 8008200:	800a      	strh	r2, [r1, #0]
 8008202:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 8008206:	8182      	strh	r2, [r0, #12]
 8008208:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 800820c:	b99e      	cbnz	r6, 8008236 <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 800820e:	b355      	cbz	r5, 8008266 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8008210:	45a4      	cmp	ip, r4
 8008212:	dc25      	bgt.n	8008260 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 8008214:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 8008218:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 800821c:	3301      	adds	r3, #1
 800821e:	b2db      	uxtb	r3, r3
 8008220:	429a      	cmp	r2, r3
 8008222:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8008226:	d81e      	bhi.n	8008266 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8008228:	2300      	movs	r3, #0
 800822a:	78c2      	ldrb	r2, [r0, #3]
 800822c:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8008230:	7002      	strb	r2, [r0, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008236:	2b00      	cmp	r3, #0
 8008238:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 800823c:	bfb8      	it	lt
 800823e:	425b      	neglt	r3, r3
 8008240:	429a      	cmp	r2, r3
 8008242:	dc14      	bgt.n	800826e <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 8008244:	2200      	movs	r2, #0
 8008246:	4613      	mov	r3, r2
 8008248:	4616      	mov	r6, r2
 800824a:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 800824e:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 8008252:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8008256:	b135      	cbz	r5, 8008266 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8008258:	45a4      	cmp	ip, r4
 800825a:	dddb      	ble.n	8008214 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 800825c:	2a00      	cmp	r2, #0
 800825e:	d0d9      	beq.n	8008214 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8008260:	2300      	movs	r3, #0
 8008262:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8008266:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800826a:	f7ff bb01 	b.w	8007870 <SPD_IsMecSpeedReliable>
 800826e:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 8008272:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 8008276:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 800827a:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 800827e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8008282:	fb93 f3fe 	sdiv	r3, r3, lr
 8008286:	fb03 f202 	mul.w	r2, r3, r2
 800828a:	2a00      	cmp	r2, #0
 800828c:	bfb8      	it	lt
 800828e:	323f      	addlt	r2, #63	; 0x3f
 8008290:	1192      	asrs	r2, r2, #6
 8008292:	fb02 f303 	mul.w	r3, r2, r3
 8008296:	fb07 f707 	mul.w	r7, r7, r7
 800829a:	2b00      	cmp	r3, #0
 800829c:	fb06 7606 	mla	r6, r6, r6, r7
 80082a0:	461a      	mov	r2, r3
 80082a2:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 80082a6:	bfb8      	it	lt
 80082a8:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 80082ac:	1192      	asrs	r2, r2, #6
 80082ae:	fb07 3212 	mls	r2, r7, r2, r3
 80082b2:	4296      	cmp	r6, r2
 80082b4:	bfd4      	ite	le
 80082b6:	2200      	movle	r2, #0
 80082b8:	2201      	movgt	r2, #1
 80082ba:	e7c6      	b.n	800824a <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 80082bc:	4664      	mov	r4, ip
 80082be:	4665      	mov	r5, ip
 80082c0:	e785      	b.n	80081ce <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 80082c2:	bf00      	nop

080082c4 <STO_PLL_CalcAvrgElSpeedDpp>:
 80082c4:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 80082c8:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 80082cc:	b470      	push	{r4, r5, r6}
 80082ce:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 80082d2:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 80082d6:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 80082da:	b2a6      	uxth	r6, r4
 80082dc:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 80082e0:	1af3      	subs	r3, r6, r3
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	442a      	add	r2, r5
 80082e6:	b19b      	cbz	r3, 8008310 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 80082e8:	440b      	add	r3, r1
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	b219      	sxth	r1, r3
 80082ee:	428c      	cmp	r4, r1
 80082f0:	bfdc      	itt	le
 80082f2:	1b9b      	suble	r3, r3, r6
 80082f4:	b219      	sxthle	r1, r3
 80082f6:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 80082fa:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 8008304:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8008308:	4113      	asrs	r3, r2
 800830a:	81c3      	strh	r3, [r0, #14]
 800830c:	bc70      	pop	{r4, r5, r6}
 800830e:	4770      	bx	lr
 8008310:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	e7f3      	b.n	8008300 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

08008318 <STO_PLL_Clear>:
 8008318:	b510      	push	{r4, lr}
 800831a:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 800831e:	2100      	movs	r1, #0
 8008320:	4604      	mov	r4, r0
 8008322:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 8008326:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 800832a:	8081      	strh	r1, [r0, #4]
 800832c:	81c1      	strh	r1, [r0, #14]
 800832e:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 8008332:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 8008336:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 800833a:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 800833e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8008342:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 8008346:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 800834a:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 800834e:	b132      	cbz	r2, 800835e <STO_PLL_Clear+0x46>
 8008350:	3a01      	subs	r2, #1
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	3201      	adds	r2, #1
 8008356:	0052      	lsls	r2, r2, #1
 8008358:	3074      	adds	r0, #116	; 0x74
 800835a:	f000 f923 	bl	80085a4 <memset>
 800835e:	2100      	movs	r1, #0
 8008360:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 8008364:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8008368:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800836c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008370:	f7fe bbbe 	b.w	8006af0 <PID_SetIntegralTerm>

08008374 <STO_PLL_Init>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4604      	mov	r4, r0
 8008378:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 800837c:	4b18      	ldr	r3, [pc, #96]	; (80083e0 <STO_PLL_Init+0x6c>)
 800837e:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 8008382:	fb93 f3f5 	sdiv	r3, r3, r5
 8008386:	2200      	movs	r2, #0
 8008388:	2101      	movs	r1, #1
 800838a:	b21b      	sxth	r3, r3
 800838c:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 8008390:	8662      	strh	r2, [r4, #50]	; 0x32
 8008392:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 8008396:	b303      	cbz	r3, 80083da <STO_PLL_Init+0x66>
 8008398:	4608      	mov	r0, r1
 800839a:	e000      	b.n	800839e <STO_PLL_Init+0x2a>
 800839c:	4611      	mov	r1, r2
 800839e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80083a2:	1c4a      	adds	r2, r1, #1
 80083a4:	105b      	asrs	r3, r3, #1
 80083a6:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80083aa:	b292      	uxth	r2, r2
 80083ac:	d1f6      	bne.n	800839c <STO_PLL_Init+0x28>
 80083ae:	b200      	sxth	r0, r0
 80083b0:	fb05 f200 	mul.w	r2, r5, r0
 80083b4:	8661      	strh	r1, [r4, #50]	; 0x32
 80083b6:	4b0b      	ldr	r3, [pc, #44]	; (80083e4 <STO_PLL_Init+0x70>)
 80083b8:	8620      	strh	r0, [r4, #48]	; 0x30
 80083ba:	fb83 1302 	smull	r1, r3, r3, r2
 80083be:	17d2      	asrs	r2, r2, #31
 80083c0:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 80083c4:	8562      	strh	r2, [r4, #42]	; 0x2a
 80083c6:	4620      	mov	r0, r4
 80083c8:	f7ff ffa6 	bl	8008318 <STO_PLL_Clear>
 80083cc:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80083d0:	f7fe fb72 	bl	8006ab8 <PID_HandleInit>
 80083d4:	2300      	movs	r3, #0
 80083d6:	8263      	strh	r3, [r4, #18]
 80083d8:	bd38      	pop	{r3, r4, r5, pc}
 80083da:	462a      	mov	r2, r5
 80083dc:	4608      	mov	r0, r1
 80083de:	e7ea      	b.n	80083b6 <STO_PLL_Init+0x42>
 80083e0:	000fea5e 	.word	0x000fea5e
 80083e4:	06488dc5 	.word	0x06488dc5

080083e8 <STO_PLL_IsObserverConverged>:
 80083e8:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 80083ec:	4603      	mov	r3, r0
 80083ee:	b10a      	cbz	r2, 80083f4 <STO_PLL_IsObserverConverged+0xc>
 80083f0:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80083f4:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d143      	bne.n	8008484 <STO_PLL_IsObserverConverged+0x9c>
 80083fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008400:	b430      	push	{r4, r5}
 8008402:	fb02 f501 	mul.w	r5, r2, r1
 8008406:	2d00      	cmp	r5, #0
 8008408:	460c      	mov	r4, r1
 800840a:	dd34      	ble.n	8008476 <STO_PLL_IsObserverConverged+0x8e>
 800840c:	2a00      	cmp	r2, #0
 800840e:	bfbc      	itt	lt
 8008410:	4252      	neglt	r2, r2
 8008412:	b212      	sxthlt	r2, r2
 8008414:	2900      	cmp	r1, #0
 8008416:	bfbc      	itt	lt
 8008418:	4249      	neglt	r1, r1
 800841a:	b20c      	sxthlt	r4, r1
 800841c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 8008420:	b359      	cbz	r1, 800847a <STO_PLL_IsObserverConverged+0x92>
 8008422:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 8008426:	b291      	uxth	r1, r2
 8008428:	428d      	cmp	r5, r1
 800842a:	d226      	bcs.n	800847a <STO_PLL_IsObserverConverged+0x92>
 800842c:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 8008430:	fb04 f101 	mul.w	r1, r4, r1
 8008434:	2900      	cmp	r1, #0
 8008436:	bfb8      	it	lt
 8008438:	310f      	addlt	r1, #15
 800843a:	f341 110f 	sbfx	r1, r1, #4, #16
 800843e:	428a      	cmp	r2, r1
 8008440:	db1b      	blt.n	800847a <STO_PLL_IsObserverConverged+0x92>
 8008442:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 8008446:	fb04 f101 	mul.w	r1, r4, r1
 800844a:	2900      	cmp	r1, #0
 800844c:	bfb8      	it	lt
 800844e:	310f      	addlt	r1, #15
 8008450:	f341 110f 	sbfx	r1, r1, #4, #16
 8008454:	428a      	cmp	r2, r1
 8008456:	dc10      	bgt.n	800847a <STO_PLL_IsObserverConverged+0x92>
 8008458:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 800845c:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 8008460:	3201      	adds	r2, #1
 8008462:	b2d2      	uxtb	r2, r2
 8008464:	4291      	cmp	r1, r2
 8008466:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800846a:	d804      	bhi.n	8008476 <STO_PLL_IsObserverConverged+0x8e>
 800846c:	2001      	movs	r0, #1
 800846e:	2200      	movs	r2, #0
 8008470:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	bc30      	pop	{r4, r5}
 8008478:	4770      	bx	lr
 800847a:	2200      	movs	r2, #0
 800847c:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8008480:	bc30      	pop	{r4, r5}
 8008482:	4770      	bx	lr
 8008484:	2001      	movs	r0, #1
 8008486:	2200      	movs	r2, #0
 8008488:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800848c:	701a      	strb	r2, [r3, #0]
 800848e:	4770      	bx	lr

08008490 <STO_PLL_GetEstimatedBemf>:
 8008490:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008492:	2000      	movs	r0, #0
 8008494:	b29a      	uxth	r2, r3
 8008496:	f362 000f 	bfi	r0, r2, #0, #16
 800849a:	0c1b      	lsrs	r3, r3, #16
 800849c:	b082      	sub	sp, #8
 800849e:	f363 401f 	bfi	r0, r3, #16, #16
 80084a2:	b002      	add	sp, #8
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop

080084a8 <STO_PLL_GetEstimatedCurrent>:
 80084a8:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 80084ac:	b410      	push	{r4}
 80084ae:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 80084b2:	4122      	asrs	r2, r4
 80084b4:	b292      	uxth	r2, r2
 80084b6:	4123      	asrs	r3, r4
 80084b8:	2100      	movs	r1, #0
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f362 010f 	bfi	r1, r2, #0, #16
 80084c0:	f363 411f 	bfi	r1, r3, #16, #16
 80084c4:	b083      	sub	sp, #12
 80084c6:	4608      	mov	r0, r1
 80084c8:	b003      	add	sp, #12
 80084ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <STO_PLL_GetObserverGains>:
 80084d0:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80084d4:	800b      	strh	r3, [r1, #0]
 80084d6:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 80084da:	8013      	strh	r3, [r2, #0]
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop

080084e0 <STO_PLL_SetObserverGains>:
 80084e0:	8441      	strh	r1, [r0, #34]	; 0x22
 80084e2:	84c2      	strh	r2, [r0, #38]	; 0x26
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop

080084e8 <STO_OTF_ResetPLL>:
 80084e8:	6800      	ldr	r0, [r0, #0]
 80084ea:	2100      	movs	r1, #0
 80084ec:	3034      	adds	r0, #52	; 0x34
 80084ee:	f7fe baff 	b.w	8006af0 <PID_SetIntegralTerm>
 80084f2:	bf00      	nop

080084f4 <STO_ResetPLL>:
 80084f4:	3034      	adds	r0, #52	; 0x34
 80084f6:	2100      	movs	r1, #0
 80084f8:	f7fe bafa 	b.w	8006af0 <PID_SetIntegralTerm>

080084fc <STO_PLL_GetEstimatedBemfLevel>:
 80084fc:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop

08008504 <STO_PLL_GetObservedBemfLevel>:
 8008504:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop

0800850c <STO_PLL_IsVarianceTight>:
 800850c:	6803      	ldr	r3, [r0, #0]
 800850e:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 8008512:	4770      	bx	lr

08008514 <STO_PLL_ForceConvergency1>:
 8008514:	6803      	ldr	r3, [r0, #0]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop

08008520 <STO_PLL_ForceConvergency2>:
 8008520:	6803      	ldr	r3, [r0, #0]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop

0800852c <STO_SetDirection>:
 800852c:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop

08008534 <__errno>:
 8008534:	4b01      	ldr	r3, [pc, #4]	; (800853c <__errno+0x8>)
 8008536:	6818      	ldr	r0, [r3, #0]
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	20000664 	.word	0x20000664

08008540 <__libc_init_array>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	4d0d      	ldr	r5, [pc, #52]	; (8008578 <__libc_init_array+0x38>)
 8008544:	4c0d      	ldr	r4, [pc, #52]	; (800857c <__libc_init_array+0x3c>)
 8008546:	1b64      	subs	r4, r4, r5
 8008548:	10a4      	asrs	r4, r4, #2
 800854a:	2600      	movs	r6, #0
 800854c:	42a6      	cmp	r6, r4
 800854e:	d109      	bne.n	8008564 <__libc_init_array+0x24>
 8008550:	4d0b      	ldr	r5, [pc, #44]	; (8008580 <__libc_init_array+0x40>)
 8008552:	4c0c      	ldr	r4, [pc, #48]	; (8008584 <__libc_init_array+0x44>)
 8008554:	f002 feb4 	bl	800b2c0 <_init>
 8008558:	1b64      	subs	r4, r4, r5
 800855a:	10a4      	asrs	r4, r4, #2
 800855c:	2600      	movs	r6, #0
 800855e:	42a6      	cmp	r6, r4
 8008560:	d105      	bne.n	800856e <__libc_init_array+0x2e>
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	f855 3b04 	ldr.w	r3, [r5], #4
 8008568:	4798      	blx	r3
 800856a:	3601      	adds	r6, #1
 800856c:	e7ee      	b.n	800854c <__libc_init_array+0xc>
 800856e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008572:	4798      	blx	r3
 8008574:	3601      	adds	r6, #1
 8008576:	e7f2      	b.n	800855e <__libc_init_array+0x1e>
 8008578:	0800bb94 	.word	0x0800bb94
 800857c:	0800bb94 	.word	0x0800bb94
 8008580:	0800bb94 	.word	0x0800bb94
 8008584:	0800bb98 	.word	0x0800bb98

08008588 <memcpy>:
 8008588:	440a      	add	r2, r1
 800858a:	4291      	cmp	r1, r2
 800858c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008590:	d100      	bne.n	8008594 <memcpy+0xc>
 8008592:	4770      	bx	lr
 8008594:	b510      	push	{r4, lr}
 8008596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800859a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800859e:	4291      	cmp	r1, r2
 80085a0:	d1f9      	bne.n	8008596 <memcpy+0xe>
 80085a2:	bd10      	pop	{r4, pc}

080085a4 <memset>:
 80085a4:	4402      	add	r2, r0
 80085a6:	4603      	mov	r3, r0
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d100      	bne.n	80085ae <memset+0xa>
 80085ac:	4770      	bx	lr
 80085ae:	f803 1b01 	strb.w	r1, [r3], #1
 80085b2:	e7f9      	b.n	80085a8 <memset+0x4>

080085b4 <__cvt>:
 80085b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085b8:	ec55 4b10 	vmov	r4, r5, d0
 80085bc:	2d00      	cmp	r5, #0
 80085be:	460e      	mov	r6, r1
 80085c0:	4619      	mov	r1, r3
 80085c2:	462b      	mov	r3, r5
 80085c4:	bfbb      	ittet	lt
 80085c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085ca:	461d      	movlt	r5, r3
 80085cc:	2300      	movge	r3, #0
 80085ce:	232d      	movlt	r3, #45	; 0x2d
 80085d0:	700b      	strb	r3, [r1, #0]
 80085d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085d8:	4691      	mov	r9, r2
 80085da:	f023 0820 	bic.w	r8, r3, #32
 80085de:	bfbc      	itt	lt
 80085e0:	4622      	movlt	r2, r4
 80085e2:	4614      	movlt	r4, r2
 80085e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085e8:	d005      	beq.n	80085f6 <__cvt+0x42>
 80085ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085ee:	d100      	bne.n	80085f2 <__cvt+0x3e>
 80085f0:	3601      	adds	r6, #1
 80085f2:	2102      	movs	r1, #2
 80085f4:	e000      	b.n	80085f8 <__cvt+0x44>
 80085f6:	2103      	movs	r1, #3
 80085f8:	ab03      	add	r3, sp, #12
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	ab02      	add	r3, sp, #8
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	ec45 4b10 	vmov	d0, r4, r5
 8008604:	4653      	mov	r3, sl
 8008606:	4632      	mov	r2, r6
 8008608:	f000 fcea 	bl	8008fe0 <_dtoa_r>
 800860c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008610:	4607      	mov	r7, r0
 8008612:	d102      	bne.n	800861a <__cvt+0x66>
 8008614:	f019 0f01 	tst.w	r9, #1
 8008618:	d022      	beq.n	8008660 <__cvt+0xac>
 800861a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800861e:	eb07 0906 	add.w	r9, r7, r6
 8008622:	d110      	bne.n	8008646 <__cvt+0x92>
 8008624:	783b      	ldrb	r3, [r7, #0]
 8008626:	2b30      	cmp	r3, #48	; 0x30
 8008628:	d10a      	bne.n	8008640 <__cvt+0x8c>
 800862a:	2200      	movs	r2, #0
 800862c:	2300      	movs	r3, #0
 800862e:	4620      	mov	r0, r4
 8008630:	4629      	mov	r1, r5
 8008632:	f7f8 fa51 	bl	8000ad8 <__aeabi_dcmpeq>
 8008636:	b918      	cbnz	r0, 8008640 <__cvt+0x8c>
 8008638:	f1c6 0601 	rsb	r6, r6, #1
 800863c:	f8ca 6000 	str.w	r6, [sl]
 8008640:	f8da 3000 	ldr.w	r3, [sl]
 8008644:	4499      	add	r9, r3
 8008646:	2200      	movs	r2, #0
 8008648:	2300      	movs	r3, #0
 800864a:	4620      	mov	r0, r4
 800864c:	4629      	mov	r1, r5
 800864e:	f7f8 fa43 	bl	8000ad8 <__aeabi_dcmpeq>
 8008652:	b108      	cbz	r0, 8008658 <__cvt+0xa4>
 8008654:	f8cd 900c 	str.w	r9, [sp, #12]
 8008658:	2230      	movs	r2, #48	; 0x30
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	454b      	cmp	r3, r9
 800865e:	d307      	bcc.n	8008670 <__cvt+0xbc>
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008664:	1bdb      	subs	r3, r3, r7
 8008666:	4638      	mov	r0, r7
 8008668:	6013      	str	r3, [r2, #0]
 800866a:	b004      	add	sp, #16
 800866c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008670:	1c59      	adds	r1, r3, #1
 8008672:	9103      	str	r1, [sp, #12]
 8008674:	701a      	strb	r2, [r3, #0]
 8008676:	e7f0      	b.n	800865a <__cvt+0xa6>

08008678 <__exponent>:
 8008678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800867a:	4603      	mov	r3, r0
 800867c:	2900      	cmp	r1, #0
 800867e:	bfb8      	it	lt
 8008680:	4249      	neglt	r1, r1
 8008682:	f803 2b02 	strb.w	r2, [r3], #2
 8008686:	bfb4      	ite	lt
 8008688:	222d      	movlt	r2, #45	; 0x2d
 800868a:	222b      	movge	r2, #43	; 0x2b
 800868c:	2909      	cmp	r1, #9
 800868e:	7042      	strb	r2, [r0, #1]
 8008690:	dd2a      	ble.n	80086e8 <__exponent+0x70>
 8008692:	f10d 0407 	add.w	r4, sp, #7
 8008696:	46a4      	mov	ip, r4
 8008698:	270a      	movs	r7, #10
 800869a:	46a6      	mov	lr, r4
 800869c:	460a      	mov	r2, r1
 800869e:	fb91 f6f7 	sdiv	r6, r1, r7
 80086a2:	fb07 1516 	mls	r5, r7, r6, r1
 80086a6:	3530      	adds	r5, #48	; 0x30
 80086a8:	2a63      	cmp	r2, #99	; 0x63
 80086aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80086ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80086b2:	4631      	mov	r1, r6
 80086b4:	dcf1      	bgt.n	800869a <__exponent+0x22>
 80086b6:	3130      	adds	r1, #48	; 0x30
 80086b8:	f1ae 0502 	sub.w	r5, lr, #2
 80086bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80086c0:	1c44      	adds	r4, r0, #1
 80086c2:	4629      	mov	r1, r5
 80086c4:	4561      	cmp	r1, ip
 80086c6:	d30a      	bcc.n	80086de <__exponent+0x66>
 80086c8:	f10d 0209 	add.w	r2, sp, #9
 80086cc:	eba2 020e 	sub.w	r2, r2, lr
 80086d0:	4565      	cmp	r5, ip
 80086d2:	bf88      	it	hi
 80086d4:	2200      	movhi	r2, #0
 80086d6:	4413      	add	r3, r2
 80086d8:	1a18      	subs	r0, r3, r0
 80086da:	b003      	add	sp, #12
 80086dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086e6:	e7ed      	b.n	80086c4 <__exponent+0x4c>
 80086e8:	2330      	movs	r3, #48	; 0x30
 80086ea:	3130      	adds	r1, #48	; 0x30
 80086ec:	7083      	strb	r3, [r0, #2]
 80086ee:	70c1      	strb	r1, [r0, #3]
 80086f0:	1d03      	adds	r3, r0, #4
 80086f2:	e7f1      	b.n	80086d8 <__exponent+0x60>

080086f4 <_printf_float>:
 80086f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f8:	ed2d 8b02 	vpush	{d8}
 80086fc:	b08d      	sub	sp, #52	; 0x34
 80086fe:	460c      	mov	r4, r1
 8008700:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008704:	4616      	mov	r6, r2
 8008706:	461f      	mov	r7, r3
 8008708:	4605      	mov	r5, r0
 800870a:	f001 fa55 	bl	8009bb8 <_localeconv_r>
 800870e:	f8d0 a000 	ldr.w	sl, [r0]
 8008712:	4650      	mov	r0, sl
 8008714:	f7f7 fd64 	bl	80001e0 <strlen>
 8008718:	2300      	movs	r3, #0
 800871a:	930a      	str	r3, [sp, #40]	; 0x28
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	9305      	str	r3, [sp, #20]
 8008720:	f8d8 3000 	ldr.w	r3, [r8]
 8008724:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008728:	3307      	adds	r3, #7
 800872a:	f023 0307 	bic.w	r3, r3, #7
 800872e:	f103 0208 	add.w	r2, r3, #8
 8008732:	f8c8 2000 	str.w	r2, [r8]
 8008736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800873e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008742:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008746:	9307      	str	r3, [sp, #28]
 8008748:	f8cd 8018 	str.w	r8, [sp, #24]
 800874c:	ee08 0a10 	vmov	s16, r0
 8008750:	4b9f      	ldr	r3, [pc, #636]	; (80089d0 <_printf_float+0x2dc>)
 8008752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008756:	f04f 32ff 	mov.w	r2, #4294967295
 800875a:	f7f8 f9ef 	bl	8000b3c <__aeabi_dcmpun>
 800875e:	bb88      	cbnz	r0, 80087c4 <_printf_float+0xd0>
 8008760:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008764:	4b9a      	ldr	r3, [pc, #616]	; (80089d0 <_printf_float+0x2dc>)
 8008766:	f04f 32ff 	mov.w	r2, #4294967295
 800876a:	f7f8 f9c9 	bl	8000b00 <__aeabi_dcmple>
 800876e:	bb48      	cbnz	r0, 80087c4 <_printf_float+0xd0>
 8008770:	2200      	movs	r2, #0
 8008772:	2300      	movs	r3, #0
 8008774:	4640      	mov	r0, r8
 8008776:	4649      	mov	r1, r9
 8008778:	f7f8 f9b8 	bl	8000aec <__aeabi_dcmplt>
 800877c:	b110      	cbz	r0, 8008784 <_printf_float+0x90>
 800877e:	232d      	movs	r3, #45	; 0x2d
 8008780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008784:	4b93      	ldr	r3, [pc, #588]	; (80089d4 <_printf_float+0x2e0>)
 8008786:	4894      	ldr	r0, [pc, #592]	; (80089d8 <_printf_float+0x2e4>)
 8008788:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800878c:	bf94      	ite	ls
 800878e:	4698      	movls	r8, r3
 8008790:	4680      	movhi	r8, r0
 8008792:	2303      	movs	r3, #3
 8008794:	6123      	str	r3, [r4, #16]
 8008796:	9b05      	ldr	r3, [sp, #20]
 8008798:	f023 0204 	bic.w	r2, r3, #4
 800879c:	6022      	str	r2, [r4, #0]
 800879e:	f04f 0900 	mov.w	r9, #0
 80087a2:	9700      	str	r7, [sp, #0]
 80087a4:	4633      	mov	r3, r6
 80087a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80087a8:	4621      	mov	r1, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 f9d8 	bl	8008b60 <_printf_common>
 80087b0:	3001      	adds	r0, #1
 80087b2:	f040 8090 	bne.w	80088d6 <_printf_float+0x1e2>
 80087b6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ba:	b00d      	add	sp, #52	; 0x34
 80087bc:	ecbd 8b02 	vpop	{d8}
 80087c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c4:	4642      	mov	r2, r8
 80087c6:	464b      	mov	r3, r9
 80087c8:	4640      	mov	r0, r8
 80087ca:	4649      	mov	r1, r9
 80087cc:	f7f8 f9b6 	bl	8000b3c <__aeabi_dcmpun>
 80087d0:	b140      	cbz	r0, 80087e4 <_printf_float+0xf0>
 80087d2:	464b      	mov	r3, r9
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	bfbc      	itt	lt
 80087d8:	232d      	movlt	r3, #45	; 0x2d
 80087da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087de:	487f      	ldr	r0, [pc, #508]	; (80089dc <_printf_float+0x2e8>)
 80087e0:	4b7f      	ldr	r3, [pc, #508]	; (80089e0 <_printf_float+0x2ec>)
 80087e2:	e7d1      	b.n	8008788 <_printf_float+0x94>
 80087e4:	6863      	ldr	r3, [r4, #4]
 80087e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087ea:	9206      	str	r2, [sp, #24]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	d13f      	bne.n	8008870 <_printf_float+0x17c>
 80087f0:	2306      	movs	r3, #6
 80087f2:	6063      	str	r3, [r4, #4]
 80087f4:	9b05      	ldr	r3, [sp, #20]
 80087f6:	6861      	ldr	r1, [r4, #4]
 80087f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087fc:	2300      	movs	r3, #0
 80087fe:	9303      	str	r3, [sp, #12]
 8008800:	ab0a      	add	r3, sp, #40	; 0x28
 8008802:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008806:	ab09      	add	r3, sp, #36	; 0x24
 8008808:	ec49 8b10 	vmov	d0, r8, r9
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	6022      	str	r2, [r4, #0]
 8008810:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008814:	4628      	mov	r0, r5
 8008816:	f7ff fecd 	bl	80085b4 <__cvt>
 800881a:	9b06      	ldr	r3, [sp, #24]
 800881c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800881e:	2b47      	cmp	r3, #71	; 0x47
 8008820:	4680      	mov	r8, r0
 8008822:	d108      	bne.n	8008836 <_printf_float+0x142>
 8008824:	1cc8      	adds	r0, r1, #3
 8008826:	db02      	blt.n	800882e <_printf_float+0x13a>
 8008828:	6863      	ldr	r3, [r4, #4]
 800882a:	4299      	cmp	r1, r3
 800882c:	dd41      	ble.n	80088b2 <_printf_float+0x1be>
 800882e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008832:	fa5f fb8b 	uxtb.w	fp, fp
 8008836:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800883a:	d820      	bhi.n	800887e <_printf_float+0x18a>
 800883c:	3901      	subs	r1, #1
 800883e:	465a      	mov	r2, fp
 8008840:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008844:	9109      	str	r1, [sp, #36]	; 0x24
 8008846:	f7ff ff17 	bl	8008678 <__exponent>
 800884a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800884c:	1813      	adds	r3, r2, r0
 800884e:	2a01      	cmp	r2, #1
 8008850:	4681      	mov	r9, r0
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	dc02      	bgt.n	800885c <_printf_float+0x168>
 8008856:	6822      	ldr	r2, [r4, #0]
 8008858:	07d2      	lsls	r2, r2, #31
 800885a:	d501      	bpl.n	8008860 <_printf_float+0x16c>
 800885c:	3301      	adds	r3, #1
 800885e:	6123      	str	r3, [r4, #16]
 8008860:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008864:	2b00      	cmp	r3, #0
 8008866:	d09c      	beq.n	80087a2 <_printf_float+0xae>
 8008868:	232d      	movs	r3, #45	; 0x2d
 800886a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800886e:	e798      	b.n	80087a2 <_printf_float+0xae>
 8008870:	9a06      	ldr	r2, [sp, #24]
 8008872:	2a47      	cmp	r2, #71	; 0x47
 8008874:	d1be      	bne.n	80087f4 <_printf_float+0x100>
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1bc      	bne.n	80087f4 <_printf_float+0x100>
 800887a:	2301      	movs	r3, #1
 800887c:	e7b9      	b.n	80087f2 <_printf_float+0xfe>
 800887e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008882:	d118      	bne.n	80088b6 <_printf_float+0x1c2>
 8008884:	2900      	cmp	r1, #0
 8008886:	6863      	ldr	r3, [r4, #4]
 8008888:	dd0b      	ble.n	80088a2 <_printf_float+0x1ae>
 800888a:	6121      	str	r1, [r4, #16]
 800888c:	b913      	cbnz	r3, 8008894 <_printf_float+0x1a0>
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	07d0      	lsls	r0, r2, #31
 8008892:	d502      	bpl.n	800889a <_printf_float+0x1a6>
 8008894:	3301      	adds	r3, #1
 8008896:	440b      	add	r3, r1
 8008898:	6123      	str	r3, [r4, #16]
 800889a:	65a1      	str	r1, [r4, #88]	; 0x58
 800889c:	f04f 0900 	mov.w	r9, #0
 80088a0:	e7de      	b.n	8008860 <_printf_float+0x16c>
 80088a2:	b913      	cbnz	r3, 80088aa <_printf_float+0x1b6>
 80088a4:	6822      	ldr	r2, [r4, #0]
 80088a6:	07d2      	lsls	r2, r2, #31
 80088a8:	d501      	bpl.n	80088ae <_printf_float+0x1ba>
 80088aa:	3302      	adds	r3, #2
 80088ac:	e7f4      	b.n	8008898 <_printf_float+0x1a4>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e7f2      	b.n	8008898 <_printf_float+0x1a4>
 80088b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b8:	4299      	cmp	r1, r3
 80088ba:	db05      	blt.n	80088c8 <_printf_float+0x1d4>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	6121      	str	r1, [r4, #16]
 80088c0:	07d8      	lsls	r0, r3, #31
 80088c2:	d5ea      	bpl.n	800889a <_printf_float+0x1a6>
 80088c4:	1c4b      	adds	r3, r1, #1
 80088c6:	e7e7      	b.n	8008898 <_printf_float+0x1a4>
 80088c8:	2900      	cmp	r1, #0
 80088ca:	bfd4      	ite	le
 80088cc:	f1c1 0202 	rsble	r2, r1, #2
 80088d0:	2201      	movgt	r2, #1
 80088d2:	4413      	add	r3, r2
 80088d4:	e7e0      	b.n	8008898 <_printf_float+0x1a4>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	055a      	lsls	r2, r3, #21
 80088da:	d407      	bmi.n	80088ec <_printf_float+0x1f8>
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	4642      	mov	r2, r8
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	d12c      	bne.n	8008944 <_printf_float+0x250>
 80088ea:	e764      	b.n	80087b6 <_printf_float+0xc2>
 80088ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088f0:	f240 80e0 	bls.w	8008ab4 <_printf_float+0x3c0>
 80088f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088f8:	2200      	movs	r2, #0
 80088fa:	2300      	movs	r3, #0
 80088fc:	f7f8 f8ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8008900:	2800      	cmp	r0, #0
 8008902:	d034      	beq.n	800896e <_printf_float+0x27a>
 8008904:	4a37      	ldr	r2, [pc, #220]	; (80089e4 <_printf_float+0x2f0>)
 8008906:	2301      	movs	r3, #1
 8008908:	4631      	mov	r1, r6
 800890a:	4628      	mov	r0, r5
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	f43f af51 	beq.w	80087b6 <_printf_float+0xc2>
 8008914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008918:	429a      	cmp	r2, r3
 800891a:	db02      	blt.n	8008922 <_printf_float+0x22e>
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	07d8      	lsls	r0, r3, #31
 8008920:	d510      	bpl.n	8008944 <_printf_float+0x250>
 8008922:	ee18 3a10 	vmov	r3, s16
 8008926:	4652      	mov	r2, sl
 8008928:	4631      	mov	r1, r6
 800892a:	4628      	mov	r0, r5
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	f43f af41 	beq.w	80087b6 <_printf_float+0xc2>
 8008934:	f04f 0800 	mov.w	r8, #0
 8008938:	f104 091a 	add.w	r9, r4, #26
 800893c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893e:	3b01      	subs	r3, #1
 8008940:	4543      	cmp	r3, r8
 8008942:	dc09      	bgt.n	8008958 <_printf_float+0x264>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	079b      	lsls	r3, r3, #30
 8008948:	f100 8105 	bmi.w	8008b56 <_printf_float+0x462>
 800894c:	68e0      	ldr	r0, [r4, #12]
 800894e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008950:	4298      	cmp	r0, r3
 8008952:	bfb8      	it	lt
 8008954:	4618      	movlt	r0, r3
 8008956:	e730      	b.n	80087ba <_printf_float+0xc6>
 8008958:	2301      	movs	r3, #1
 800895a:	464a      	mov	r2, r9
 800895c:	4631      	mov	r1, r6
 800895e:	4628      	mov	r0, r5
 8008960:	47b8      	blx	r7
 8008962:	3001      	adds	r0, #1
 8008964:	f43f af27 	beq.w	80087b6 <_printf_float+0xc2>
 8008968:	f108 0801 	add.w	r8, r8, #1
 800896c:	e7e6      	b.n	800893c <_printf_float+0x248>
 800896e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	dc39      	bgt.n	80089e8 <_printf_float+0x2f4>
 8008974:	4a1b      	ldr	r2, [pc, #108]	; (80089e4 <_printf_float+0x2f0>)
 8008976:	2301      	movs	r3, #1
 8008978:	4631      	mov	r1, r6
 800897a:	4628      	mov	r0, r5
 800897c:	47b8      	blx	r7
 800897e:	3001      	adds	r0, #1
 8008980:	f43f af19 	beq.w	80087b6 <_printf_float+0xc2>
 8008984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008988:	4313      	orrs	r3, r2
 800898a:	d102      	bne.n	8008992 <_printf_float+0x29e>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	07d9      	lsls	r1, r3, #31
 8008990:	d5d8      	bpl.n	8008944 <_printf_float+0x250>
 8008992:	ee18 3a10 	vmov	r3, s16
 8008996:	4652      	mov	r2, sl
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	f43f af09 	beq.w	80087b6 <_printf_float+0xc2>
 80089a4:	f04f 0900 	mov.w	r9, #0
 80089a8:	f104 0a1a 	add.w	sl, r4, #26
 80089ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ae:	425b      	negs	r3, r3
 80089b0:	454b      	cmp	r3, r9
 80089b2:	dc01      	bgt.n	80089b8 <_printf_float+0x2c4>
 80089b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b6:	e792      	b.n	80088de <_printf_float+0x1ea>
 80089b8:	2301      	movs	r3, #1
 80089ba:	4652      	mov	r2, sl
 80089bc:	4631      	mov	r1, r6
 80089be:	4628      	mov	r0, r5
 80089c0:	47b8      	blx	r7
 80089c2:	3001      	adds	r0, #1
 80089c4:	f43f aef7 	beq.w	80087b6 <_printf_float+0xc2>
 80089c8:	f109 0901 	add.w	r9, r9, #1
 80089cc:	e7ee      	b.n	80089ac <_printf_float+0x2b8>
 80089ce:	bf00      	nop
 80089d0:	7fefffff 	.word	0x7fefffff
 80089d4:	0800b7ac 	.word	0x0800b7ac
 80089d8:	0800b7b0 	.word	0x0800b7b0
 80089dc:	0800b7b8 	.word	0x0800b7b8
 80089e0:	0800b7b4 	.word	0x0800b7b4
 80089e4:	0800b7bc 	.word	0x0800b7bc
 80089e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089ec:	429a      	cmp	r2, r3
 80089ee:	bfa8      	it	ge
 80089f0:	461a      	movge	r2, r3
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	4691      	mov	r9, r2
 80089f6:	dc37      	bgt.n	8008a68 <_printf_float+0x374>
 80089f8:	f04f 0b00 	mov.w	fp, #0
 80089fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a00:	f104 021a 	add.w	r2, r4, #26
 8008a04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a06:	9305      	str	r3, [sp, #20]
 8008a08:	eba3 0309 	sub.w	r3, r3, r9
 8008a0c:	455b      	cmp	r3, fp
 8008a0e:	dc33      	bgt.n	8008a78 <_printf_float+0x384>
 8008a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a14:	429a      	cmp	r2, r3
 8008a16:	db3b      	blt.n	8008a90 <_printf_float+0x39c>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	07da      	lsls	r2, r3, #31
 8008a1c:	d438      	bmi.n	8008a90 <_printf_float+0x39c>
 8008a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a20:	9b05      	ldr	r3, [sp, #20]
 8008a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	eba2 0901 	sub.w	r9, r2, r1
 8008a2a:	4599      	cmp	r9, r3
 8008a2c:	bfa8      	it	ge
 8008a2e:	4699      	movge	r9, r3
 8008a30:	f1b9 0f00 	cmp.w	r9, #0
 8008a34:	dc35      	bgt.n	8008aa2 <_printf_float+0x3ae>
 8008a36:	f04f 0800 	mov.w	r8, #0
 8008a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a3e:	f104 0a1a 	add.w	sl, r4, #26
 8008a42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	eba3 0309 	sub.w	r3, r3, r9
 8008a4c:	4543      	cmp	r3, r8
 8008a4e:	f77f af79 	ble.w	8008944 <_printf_float+0x250>
 8008a52:	2301      	movs	r3, #1
 8008a54:	4652      	mov	r2, sl
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f43f aeaa 	beq.w	80087b6 <_printf_float+0xc2>
 8008a62:	f108 0801 	add.w	r8, r8, #1
 8008a66:	e7ec      	b.n	8008a42 <_printf_float+0x34e>
 8008a68:	4613      	mov	r3, r2
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47b8      	blx	r7
 8008a72:	3001      	adds	r0, #1
 8008a74:	d1c0      	bne.n	80089f8 <_printf_float+0x304>
 8008a76:	e69e      	b.n	80087b6 <_printf_float+0xc2>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	9205      	str	r2, [sp, #20]
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	f43f ae97 	beq.w	80087b6 <_printf_float+0xc2>
 8008a88:	9a05      	ldr	r2, [sp, #20]
 8008a8a:	f10b 0b01 	add.w	fp, fp, #1
 8008a8e:	e7b9      	b.n	8008a04 <_printf_float+0x310>
 8008a90:	ee18 3a10 	vmov	r3, s16
 8008a94:	4652      	mov	r2, sl
 8008a96:	4631      	mov	r1, r6
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b8      	blx	r7
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d1be      	bne.n	8008a1e <_printf_float+0x32a>
 8008aa0:	e689      	b.n	80087b6 <_printf_float+0xc2>
 8008aa2:	9a05      	ldr	r2, [sp, #20]
 8008aa4:	464b      	mov	r3, r9
 8008aa6:	4442      	add	r2, r8
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	47b8      	blx	r7
 8008aae:	3001      	adds	r0, #1
 8008ab0:	d1c1      	bne.n	8008a36 <_printf_float+0x342>
 8008ab2:	e680      	b.n	80087b6 <_printf_float+0xc2>
 8008ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ab6:	2a01      	cmp	r2, #1
 8008ab8:	dc01      	bgt.n	8008abe <_printf_float+0x3ca>
 8008aba:	07db      	lsls	r3, r3, #31
 8008abc:	d538      	bpl.n	8008b30 <_printf_float+0x43c>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	4642      	mov	r2, r8
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	f43f ae74 	beq.w	80087b6 <_printf_float+0xc2>
 8008ace:	ee18 3a10 	vmov	r3, s16
 8008ad2:	4652      	mov	r2, sl
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	f43f ae6b 	beq.w	80087b6 <_printf_float+0xc2>
 8008ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f7f7 fff6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008aec:	b9d8      	cbnz	r0, 8008b26 <_printf_float+0x432>
 8008aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af0:	f108 0201 	add.w	r2, r8, #1
 8008af4:	3b01      	subs	r3, #1
 8008af6:	4631      	mov	r1, r6
 8008af8:	4628      	mov	r0, r5
 8008afa:	47b8      	blx	r7
 8008afc:	3001      	adds	r0, #1
 8008afe:	d10e      	bne.n	8008b1e <_printf_float+0x42a>
 8008b00:	e659      	b.n	80087b6 <_printf_float+0xc2>
 8008b02:	2301      	movs	r3, #1
 8008b04:	4652      	mov	r2, sl
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f43f ae52 	beq.w	80087b6 <_printf_float+0xc2>
 8008b12:	f108 0801 	add.w	r8, r8, #1
 8008b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	4543      	cmp	r3, r8
 8008b1c:	dcf1      	bgt.n	8008b02 <_printf_float+0x40e>
 8008b1e:	464b      	mov	r3, r9
 8008b20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b24:	e6dc      	b.n	80088e0 <_printf_float+0x1ec>
 8008b26:	f04f 0800 	mov.w	r8, #0
 8008b2a:	f104 0a1a 	add.w	sl, r4, #26
 8008b2e:	e7f2      	b.n	8008b16 <_printf_float+0x422>
 8008b30:	2301      	movs	r3, #1
 8008b32:	4642      	mov	r2, r8
 8008b34:	e7df      	b.n	8008af6 <_printf_float+0x402>
 8008b36:	2301      	movs	r3, #1
 8008b38:	464a      	mov	r2, r9
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	47b8      	blx	r7
 8008b40:	3001      	adds	r0, #1
 8008b42:	f43f ae38 	beq.w	80087b6 <_printf_float+0xc2>
 8008b46:	f108 0801 	add.w	r8, r8, #1
 8008b4a:	68e3      	ldr	r3, [r4, #12]
 8008b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b4e:	1a5b      	subs	r3, r3, r1
 8008b50:	4543      	cmp	r3, r8
 8008b52:	dcf0      	bgt.n	8008b36 <_printf_float+0x442>
 8008b54:	e6fa      	b.n	800894c <_printf_float+0x258>
 8008b56:	f04f 0800 	mov.w	r8, #0
 8008b5a:	f104 0919 	add.w	r9, r4, #25
 8008b5e:	e7f4      	b.n	8008b4a <_printf_float+0x456>

08008b60 <_printf_common>:
 8008b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b64:	4616      	mov	r6, r2
 8008b66:	4699      	mov	r9, r3
 8008b68:	688a      	ldr	r2, [r1, #8]
 8008b6a:	690b      	ldr	r3, [r1, #16]
 8008b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b70:	4293      	cmp	r3, r2
 8008b72:	bfb8      	it	lt
 8008b74:	4613      	movlt	r3, r2
 8008b76:	6033      	str	r3, [r6, #0]
 8008b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b7c:	4607      	mov	r7, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	b10a      	cbz	r2, 8008b86 <_printf_common+0x26>
 8008b82:	3301      	adds	r3, #1
 8008b84:	6033      	str	r3, [r6, #0]
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	0699      	lsls	r1, r3, #26
 8008b8a:	bf42      	ittt	mi
 8008b8c:	6833      	ldrmi	r3, [r6, #0]
 8008b8e:	3302      	addmi	r3, #2
 8008b90:	6033      	strmi	r3, [r6, #0]
 8008b92:	6825      	ldr	r5, [r4, #0]
 8008b94:	f015 0506 	ands.w	r5, r5, #6
 8008b98:	d106      	bne.n	8008ba8 <_printf_common+0x48>
 8008b9a:	f104 0a19 	add.w	sl, r4, #25
 8008b9e:	68e3      	ldr	r3, [r4, #12]
 8008ba0:	6832      	ldr	r2, [r6, #0]
 8008ba2:	1a9b      	subs	r3, r3, r2
 8008ba4:	42ab      	cmp	r3, r5
 8008ba6:	dc26      	bgt.n	8008bf6 <_printf_common+0x96>
 8008ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bac:	1e13      	subs	r3, r2, #0
 8008bae:	6822      	ldr	r2, [r4, #0]
 8008bb0:	bf18      	it	ne
 8008bb2:	2301      	movne	r3, #1
 8008bb4:	0692      	lsls	r2, r2, #26
 8008bb6:	d42b      	bmi.n	8008c10 <_printf_common+0xb0>
 8008bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bbc:	4649      	mov	r1, r9
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	47c0      	blx	r8
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	d01e      	beq.n	8008c04 <_printf_common+0xa4>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	68e5      	ldr	r5, [r4, #12]
 8008bca:	6832      	ldr	r2, [r6, #0]
 8008bcc:	f003 0306 	and.w	r3, r3, #6
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	bf08      	it	eq
 8008bd4:	1aad      	subeq	r5, r5, r2
 8008bd6:	68a3      	ldr	r3, [r4, #8]
 8008bd8:	6922      	ldr	r2, [r4, #16]
 8008bda:	bf0c      	ite	eq
 8008bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008be0:	2500      	movne	r5, #0
 8008be2:	4293      	cmp	r3, r2
 8008be4:	bfc4      	itt	gt
 8008be6:	1a9b      	subgt	r3, r3, r2
 8008be8:	18ed      	addgt	r5, r5, r3
 8008bea:	2600      	movs	r6, #0
 8008bec:	341a      	adds	r4, #26
 8008bee:	42b5      	cmp	r5, r6
 8008bf0:	d11a      	bne.n	8008c28 <_printf_common+0xc8>
 8008bf2:	2000      	movs	r0, #0
 8008bf4:	e008      	b.n	8008c08 <_printf_common+0xa8>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	4652      	mov	r2, sl
 8008bfa:	4649      	mov	r1, r9
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	47c0      	blx	r8
 8008c00:	3001      	adds	r0, #1
 8008c02:	d103      	bne.n	8008c0c <_printf_common+0xac>
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295
 8008c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	e7c6      	b.n	8008b9e <_printf_common+0x3e>
 8008c10:	18e1      	adds	r1, r4, r3
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	2030      	movs	r0, #48	; 0x30
 8008c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c1a:	4422      	add	r2, r4
 8008c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c24:	3302      	adds	r3, #2
 8008c26:	e7c7      	b.n	8008bb8 <_printf_common+0x58>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	4638      	mov	r0, r7
 8008c30:	47c0      	blx	r8
 8008c32:	3001      	adds	r0, #1
 8008c34:	d0e6      	beq.n	8008c04 <_printf_common+0xa4>
 8008c36:	3601      	adds	r6, #1
 8008c38:	e7d9      	b.n	8008bee <_printf_common+0x8e>
	...

08008c3c <_printf_i>:
 8008c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	460c      	mov	r4, r1
 8008c42:	4691      	mov	r9, r2
 8008c44:	7e27      	ldrb	r7, [r4, #24]
 8008c46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c48:	2f78      	cmp	r7, #120	; 0x78
 8008c4a:	4680      	mov	r8, r0
 8008c4c:	469a      	mov	sl, r3
 8008c4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c52:	d807      	bhi.n	8008c64 <_printf_i+0x28>
 8008c54:	2f62      	cmp	r7, #98	; 0x62
 8008c56:	d80a      	bhi.n	8008c6e <_printf_i+0x32>
 8008c58:	2f00      	cmp	r7, #0
 8008c5a:	f000 80d8 	beq.w	8008e0e <_printf_i+0x1d2>
 8008c5e:	2f58      	cmp	r7, #88	; 0x58
 8008c60:	f000 80a3 	beq.w	8008daa <_printf_i+0x16e>
 8008c64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c6c:	e03a      	b.n	8008ce4 <_printf_i+0xa8>
 8008c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c72:	2b15      	cmp	r3, #21
 8008c74:	d8f6      	bhi.n	8008c64 <_printf_i+0x28>
 8008c76:	a001      	add	r0, pc, #4	; (adr r0, 8008c7c <_printf_i+0x40>)
 8008c78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c7c:	08008cd5 	.word	0x08008cd5
 8008c80:	08008ce9 	.word	0x08008ce9
 8008c84:	08008c65 	.word	0x08008c65
 8008c88:	08008c65 	.word	0x08008c65
 8008c8c:	08008c65 	.word	0x08008c65
 8008c90:	08008c65 	.word	0x08008c65
 8008c94:	08008ce9 	.word	0x08008ce9
 8008c98:	08008c65 	.word	0x08008c65
 8008c9c:	08008c65 	.word	0x08008c65
 8008ca0:	08008c65 	.word	0x08008c65
 8008ca4:	08008c65 	.word	0x08008c65
 8008ca8:	08008df5 	.word	0x08008df5
 8008cac:	08008d19 	.word	0x08008d19
 8008cb0:	08008dd7 	.word	0x08008dd7
 8008cb4:	08008c65 	.word	0x08008c65
 8008cb8:	08008c65 	.word	0x08008c65
 8008cbc:	08008e17 	.word	0x08008e17
 8008cc0:	08008c65 	.word	0x08008c65
 8008cc4:	08008d19 	.word	0x08008d19
 8008cc8:	08008c65 	.word	0x08008c65
 8008ccc:	08008c65 	.word	0x08008c65
 8008cd0:	08008ddf 	.word	0x08008ddf
 8008cd4:	680b      	ldr	r3, [r1, #0]
 8008cd6:	1d1a      	adds	r2, r3, #4
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	600a      	str	r2, [r1, #0]
 8008cdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e0a3      	b.n	8008e30 <_printf_i+0x1f4>
 8008ce8:	6825      	ldr	r5, [r4, #0]
 8008cea:	6808      	ldr	r0, [r1, #0]
 8008cec:	062e      	lsls	r6, r5, #24
 8008cee:	f100 0304 	add.w	r3, r0, #4
 8008cf2:	d50a      	bpl.n	8008d0a <_printf_i+0xce>
 8008cf4:	6805      	ldr	r5, [r0, #0]
 8008cf6:	600b      	str	r3, [r1, #0]
 8008cf8:	2d00      	cmp	r5, #0
 8008cfa:	da03      	bge.n	8008d04 <_printf_i+0xc8>
 8008cfc:	232d      	movs	r3, #45	; 0x2d
 8008cfe:	426d      	negs	r5, r5
 8008d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d04:	485e      	ldr	r0, [pc, #376]	; (8008e80 <_printf_i+0x244>)
 8008d06:	230a      	movs	r3, #10
 8008d08:	e019      	b.n	8008d3e <_printf_i+0x102>
 8008d0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d0e:	6805      	ldr	r5, [r0, #0]
 8008d10:	600b      	str	r3, [r1, #0]
 8008d12:	bf18      	it	ne
 8008d14:	b22d      	sxthne	r5, r5
 8008d16:	e7ef      	b.n	8008cf8 <_printf_i+0xbc>
 8008d18:	680b      	ldr	r3, [r1, #0]
 8008d1a:	6825      	ldr	r5, [r4, #0]
 8008d1c:	1d18      	adds	r0, r3, #4
 8008d1e:	6008      	str	r0, [r1, #0]
 8008d20:	0628      	lsls	r0, r5, #24
 8008d22:	d501      	bpl.n	8008d28 <_printf_i+0xec>
 8008d24:	681d      	ldr	r5, [r3, #0]
 8008d26:	e002      	b.n	8008d2e <_printf_i+0xf2>
 8008d28:	0669      	lsls	r1, r5, #25
 8008d2a:	d5fb      	bpl.n	8008d24 <_printf_i+0xe8>
 8008d2c:	881d      	ldrh	r5, [r3, #0]
 8008d2e:	4854      	ldr	r0, [pc, #336]	; (8008e80 <_printf_i+0x244>)
 8008d30:	2f6f      	cmp	r7, #111	; 0x6f
 8008d32:	bf0c      	ite	eq
 8008d34:	2308      	moveq	r3, #8
 8008d36:	230a      	movne	r3, #10
 8008d38:	2100      	movs	r1, #0
 8008d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d3e:	6866      	ldr	r6, [r4, #4]
 8008d40:	60a6      	str	r6, [r4, #8]
 8008d42:	2e00      	cmp	r6, #0
 8008d44:	bfa2      	ittt	ge
 8008d46:	6821      	ldrge	r1, [r4, #0]
 8008d48:	f021 0104 	bicge.w	r1, r1, #4
 8008d4c:	6021      	strge	r1, [r4, #0]
 8008d4e:	b90d      	cbnz	r5, 8008d54 <_printf_i+0x118>
 8008d50:	2e00      	cmp	r6, #0
 8008d52:	d04d      	beq.n	8008df0 <_printf_i+0x1b4>
 8008d54:	4616      	mov	r6, r2
 8008d56:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d5a:	fb03 5711 	mls	r7, r3, r1, r5
 8008d5e:	5dc7      	ldrb	r7, [r0, r7]
 8008d60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d64:	462f      	mov	r7, r5
 8008d66:	42bb      	cmp	r3, r7
 8008d68:	460d      	mov	r5, r1
 8008d6a:	d9f4      	bls.n	8008d56 <_printf_i+0x11a>
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	d10b      	bne.n	8008d88 <_printf_i+0x14c>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	07df      	lsls	r7, r3, #31
 8008d74:	d508      	bpl.n	8008d88 <_printf_i+0x14c>
 8008d76:	6923      	ldr	r3, [r4, #16]
 8008d78:	6861      	ldr	r1, [r4, #4]
 8008d7a:	4299      	cmp	r1, r3
 8008d7c:	bfde      	ittt	le
 8008d7e:	2330      	movle	r3, #48	; 0x30
 8008d80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d88:	1b92      	subs	r2, r2, r6
 8008d8a:	6122      	str	r2, [r4, #16]
 8008d8c:	f8cd a000 	str.w	sl, [sp]
 8008d90:	464b      	mov	r3, r9
 8008d92:	aa03      	add	r2, sp, #12
 8008d94:	4621      	mov	r1, r4
 8008d96:	4640      	mov	r0, r8
 8008d98:	f7ff fee2 	bl	8008b60 <_printf_common>
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d14c      	bne.n	8008e3a <_printf_i+0x1fe>
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	b004      	add	sp, #16
 8008da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008daa:	4835      	ldr	r0, [pc, #212]	; (8008e80 <_printf_i+0x244>)
 8008dac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	680e      	ldr	r6, [r1, #0]
 8008db4:	061f      	lsls	r7, r3, #24
 8008db6:	f856 5b04 	ldr.w	r5, [r6], #4
 8008dba:	600e      	str	r6, [r1, #0]
 8008dbc:	d514      	bpl.n	8008de8 <_printf_i+0x1ac>
 8008dbe:	07d9      	lsls	r1, r3, #31
 8008dc0:	bf44      	itt	mi
 8008dc2:	f043 0320 	orrmi.w	r3, r3, #32
 8008dc6:	6023      	strmi	r3, [r4, #0]
 8008dc8:	b91d      	cbnz	r5, 8008dd2 <_printf_i+0x196>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	f023 0320 	bic.w	r3, r3, #32
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	2310      	movs	r3, #16
 8008dd4:	e7b0      	b.n	8008d38 <_printf_i+0xfc>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	f043 0320 	orr.w	r3, r3, #32
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	2378      	movs	r3, #120	; 0x78
 8008de0:	4828      	ldr	r0, [pc, #160]	; (8008e84 <_printf_i+0x248>)
 8008de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008de6:	e7e3      	b.n	8008db0 <_printf_i+0x174>
 8008de8:	065e      	lsls	r6, r3, #25
 8008dea:	bf48      	it	mi
 8008dec:	b2ad      	uxthmi	r5, r5
 8008dee:	e7e6      	b.n	8008dbe <_printf_i+0x182>
 8008df0:	4616      	mov	r6, r2
 8008df2:	e7bb      	b.n	8008d6c <_printf_i+0x130>
 8008df4:	680b      	ldr	r3, [r1, #0]
 8008df6:	6826      	ldr	r6, [r4, #0]
 8008df8:	6960      	ldr	r0, [r4, #20]
 8008dfa:	1d1d      	adds	r5, r3, #4
 8008dfc:	600d      	str	r5, [r1, #0]
 8008dfe:	0635      	lsls	r5, r6, #24
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	d501      	bpl.n	8008e08 <_printf_i+0x1cc>
 8008e04:	6018      	str	r0, [r3, #0]
 8008e06:	e002      	b.n	8008e0e <_printf_i+0x1d2>
 8008e08:	0671      	lsls	r1, r6, #25
 8008e0a:	d5fb      	bpl.n	8008e04 <_printf_i+0x1c8>
 8008e0c:	8018      	strh	r0, [r3, #0]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	6123      	str	r3, [r4, #16]
 8008e12:	4616      	mov	r6, r2
 8008e14:	e7ba      	b.n	8008d8c <_printf_i+0x150>
 8008e16:	680b      	ldr	r3, [r1, #0]
 8008e18:	1d1a      	adds	r2, r3, #4
 8008e1a:	600a      	str	r2, [r1, #0]
 8008e1c:	681e      	ldr	r6, [r3, #0]
 8008e1e:	6862      	ldr	r2, [r4, #4]
 8008e20:	2100      	movs	r1, #0
 8008e22:	4630      	mov	r0, r6
 8008e24:	f7f7 f9e4 	bl	80001f0 <memchr>
 8008e28:	b108      	cbz	r0, 8008e2e <_printf_i+0x1f2>
 8008e2a:	1b80      	subs	r0, r0, r6
 8008e2c:	6060      	str	r0, [r4, #4]
 8008e2e:	6863      	ldr	r3, [r4, #4]
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	2300      	movs	r3, #0
 8008e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e38:	e7a8      	b.n	8008d8c <_printf_i+0x150>
 8008e3a:	6923      	ldr	r3, [r4, #16]
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4640      	mov	r0, r8
 8008e42:	47d0      	blx	sl
 8008e44:	3001      	adds	r0, #1
 8008e46:	d0ab      	beq.n	8008da0 <_printf_i+0x164>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	079b      	lsls	r3, r3, #30
 8008e4c:	d413      	bmi.n	8008e76 <_printf_i+0x23a>
 8008e4e:	68e0      	ldr	r0, [r4, #12]
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	4298      	cmp	r0, r3
 8008e54:	bfb8      	it	lt
 8008e56:	4618      	movlt	r0, r3
 8008e58:	e7a4      	b.n	8008da4 <_printf_i+0x168>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	4649      	mov	r1, r9
 8008e60:	4640      	mov	r0, r8
 8008e62:	47d0      	blx	sl
 8008e64:	3001      	adds	r0, #1
 8008e66:	d09b      	beq.n	8008da0 <_printf_i+0x164>
 8008e68:	3501      	adds	r5, #1
 8008e6a:	68e3      	ldr	r3, [r4, #12]
 8008e6c:	9903      	ldr	r1, [sp, #12]
 8008e6e:	1a5b      	subs	r3, r3, r1
 8008e70:	42ab      	cmp	r3, r5
 8008e72:	dcf2      	bgt.n	8008e5a <_printf_i+0x21e>
 8008e74:	e7eb      	b.n	8008e4e <_printf_i+0x212>
 8008e76:	2500      	movs	r5, #0
 8008e78:	f104 0619 	add.w	r6, r4, #25
 8008e7c:	e7f5      	b.n	8008e6a <_printf_i+0x22e>
 8008e7e:	bf00      	nop
 8008e80:	0800b7be 	.word	0x0800b7be
 8008e84:	0800b7cf 	.word	0x0800b7cf

08008e88 <siprintf>:
 8008e88:	b40e      	push	{r1, r2, r3}
 8008e8a:	b500      	push	{lr}
 8008e8c:	b09c      	sub	sp, #112	; 0x70
 8008e8e:	ab1d      	add	r3, sp, #116	; 0x74
 8008e90:	9002      	str	r0, [sp, #8]
 8008e92:	9006      	str	r0, [sp, #24]
 8008e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e98:	4809      	ldr	r0, [pc, #36]	; (8008ec0 <siprintf+0x38>)
 8008e9a:	9107      	str	r1, [sp, #28]
 8008e9c:	9104      	str	r1, [sp, #16]
 8008e9e:	4909      	ldr	r1, [pc, #36]	; (8008ec4 <siprintf+0x3c>)
 8008ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea4:	9105      	str	r1, [sp, #20]
 8008ea6:	6800      	ldr	r0, [r0, #0]
 8008ea8:	9301      	str	r3, [sp, #4]
 8008eaa:	a902      	add	r1, sp, #8
 8008eac:	f001 fb24 	bl	800a4f8 <_svfiprintf_r>
 8008eb0:	9b02      	ldr	r3, [sp, #8]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	701a      	strb	r2, [r3, #0]
 8008eb6:	b01c      	add	sp, #112	; 0x70
 8008eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ebc:	b003      	add	sp, #12
 8008ebe:	4770      	bx	lr
 8008ec0:	20000664 	.word	0x20000664
 8008ec4:	ffff0208 	.word	0xffff0208

08008ec8 <quorem>:
 8008ec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	6903      	ldr	r3, [r0, #16]
 8008ece:	690c      	ldr	r4, [r1, #16]
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	4607      	mov	r7, r0
 8008ed4:	f2c0 8081 	blt.w	8008fda <quorem+0x112>
 8008ed8:	3c01      	subs	r4, #1
 8008eda:	f101 0814 	add.w	r8, r1, #20
 8008ede:	f100 0514 	add.w	r5, r0, #20
 8008ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008eec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ef8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008efc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f00:	d331      	bcc.n	8008f66 <quorem+0x9e>
 8008f02:	f04f 0e00 	mov.w	lr, #0
 8008f06:	4640      	mov	r0, r8
 8008f08:	46ac      	mov	ip, r5
 8008f0a:	46f2      	mov	sl, lr
 8008f0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f10:	b293      	uxth	r3, r2
 8008f12:	fb06 e303 	mla	r3, r6, r3, lr
 8008f16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	ebaa 0303 	sub.w	r3, sl, r3
 8008f20:	0c12      	lsrs	r2, r2, #16
 8008f22:	f8dc a000 	ldr.w	sl, [ip]
 8008f26:	fb06 e202 	mla	r2, r6, r2, lr
 8008f2a:	fa13 f38a 	uxtah	r3, r3, sl
 8008f2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f32:	fa1f fa82 	uxth.w	sl, r2
 8008f36:	f8dc 2000 	ldr.w	r2, [ip]
 8008f3a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008f3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f48:	4581      	cmp	r9, r0
 8008f4a:	f84c 3b04 	str.w	r3, [ip], #4
 8008f4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f52:	d2db      	bcs.n	8008f0c <quorem+0x44>
 8008f54:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f58:	b92b      	cbnz	r3, 8008f66 <quorem+0x9e>
 8008f5a:	9b01      	ldr	r3, [sp, #4]
 8008f5c:	3b04      	subs	r3, #4
 8008f5e:	429d      	cmp	r5, r3
 8008f60:	461a      	mov	r2, r3
 8008f62:	d32e      	bcc.n	8008fc2 <quorem+0xfa>
 8008f64:	613c      	str	r4, [r7, #16]
 8008f66:	4638      	mov	r0, r7
 8008f68:	f001 f8b0 	bl	800a0cc <__mcmp>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	db24      	blt.n	8008fba <quorem+0xf2>
 8008f70:	3601      	adds	r6, #1
 8008f72:	4628      	mov	r0, r5
 8008f74:	f04f 0c00 	mov.w	ip, #0
 8008f78:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f7c:	f8d0 e000 	ldr.w	lr, [r0]
 8008f80:	b293      	uxth	r3, r2
 8008f82:	ebac 0303 	sub.w	r3, ip, r3
 8008f86:	0c12      	lsrs	r2, r2, #16
 8008f88:	fa13 f38e 	uxtah	r3, r3, lr
 8008f8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f9a:	45c1      	cmp	r9, r8
 8008f9c:	f840 3b04 	str.w	r3, [r0], #4
 8008fa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008fa4:	d2e8      	bcs.n	8008f78 <quorem+0xb0>
 8008fa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008faa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fae:	b922      	cbnz	r2, 8008fba <quorem+0xf2>
 8008fb0:	3b04      	subs	r3, #4
 8008fb2:	429d      	cmp	r5, r3
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	d30a      	bcc.n	8008fce <quorem+0x106>
 8008fb8:	613c      	str	r4, [r7, #16]
 8008fba:	4630      	mov	r0, r6
 8008fbc:	b003      	add	sp, #12
 8008fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	3b04      	subs	r3, #4
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	d1cc      	bne.n	8008f64 <quorem+0x9c>
 8008fca:	3c01      	subs	r4, #1
 8008fcc:	e7c7      	b.n	8008f5e <quorem+0x96>
 8008fce:	6812      	ldr	r2, [r2, #0]
 8008fd0:	3b04      	subs	r3, #4
 8008fd2:	2a00      	cmp	r2, #0
 8008fd4:	d1f0      	bne.n	8008fb8 <quorem+0xf0>
 8008fd6:	3c01      	subs	r4, #1
 8008fd8:	e7eb      	b.n	8008fb2 <quorem+0xea>
 8008fda:	2000      	movs	r0, #0
 8008fdc:	e7ee      	b.n	8008fbc <quorem+0xf4>
	...

08008fe0 <_dtoa_r>:
 8008fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	ed2d 8b02 	vpush	{d8}
 8008fe8:	ec57 6b10 	vmov	r6, r7, d0
 8008fec:	b095      	sub	sp, #84	; 0x54
 8008fee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ff0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008ff4:	9105      	str	r1, [sp, #20]
 8008ff6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8008ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009000:	b975      	cbnz	r5, 8009020 <_dtoa_r+0x40>
 8009002:	2010      	movs	r0, #16
 8009004:	f000 fddc 	bl	8009bc0 <malloc>
 8009008:	4602      	mov	r2, r0
 800900a:	6260      	str	r0, [r4, #36]	; 0x24
 800900c:	b920      	cbnz	r0, 8009018 <_dtoa_r+0x38>
 800900e:	4bb2      	ldr	r3, [pc, #712]	; (80092d8 <_dtoa_r+0x2f8>)
 8009010:	21ea      	movs	r1, #234	; 0xea
 8009012:	48b2      	ldr	r0, [pc, #712]	; (80092dc <_dtoa_r+0x2fc>)
 8009014:	f001 fb80 	bl	800a718 <__assert_func>
 8009018:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800901c:	6005      	str	r5, [r0, #0]
 800901e:	60c5      	str	r5, [r0, #12]
 8009020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009022:	6819      	ldr	r1, [r3, #0]
 8009024:	b151      	cbz	r1, 800903c <_dtoa_r+0x5c>
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	604a      	str	r2, [r1, #4]
 800902a:	2301      	movs	r3, #1
 800902c:	4093      	lsls	r3, r2
 800902e:	608b      	str	r3, [r1, #8]
 8009030:	4620      	mov	r0, r4
 8009032:	f000 fe0d 	bl	8009c50 <_Bfree>
 8009036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	1e3b      	subs	r3, r7, #0
 800903e:	bfb9      	ittee	lt
 8009040:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009044:	9303      	strlt	r3, [sp, #12]
 8009046:	2300      	movge	r3, #0
 8009048:	f8c8 3000 	strge.w	r3, [r8]
 800904c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009050:	4ba3      	ldr	r3, [pc, #652]	; (80092e0 <_dtoa_r+0x300>)
 8009052:	bfbc      	itt	lt
 8009054:	2201      	movlt	r2, #1
 8009056:	f8c8 2000 	strlt.w	r2, [r8]
 800905a:	ea33 0309 	bics.w	r3, r3, r9
 800905e:	d11b      	bne.n	8009098 <_dtoa_r+0xb8>
 8009060:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009062:	f242 730f 	movw	r3, #9999	; 0x270f
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800906c:	4333      	orrs	r3, r6
 800906e:	f000 857a 	beq.w	8009b66 <_dtoa_r+0xb86>
 8009072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009074:	b963      	cbnz	r3, 8009090 <_dtoa_r+0xb0>
 8009076:	4b9b      	ldr	r3, [pc, #620]	; (80092e4 <_dtoa_r+0x304>)
 8009078:	e024      	b.n	80090c4 <_dtoa_r+0xe4>
 800907a:	4b9b      	ldr	r3, [pc, #620]	; (80092e8 <_dtoa_r+0x308>)
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	9800      	ldr	r0, [sp, #0]
 8009086:	b015      	add	sp, #84	; 0x54
 8009088:	ecbd 8b02 	vpop	{d8}
 800908c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009090:	4b94      	ldr	r3, [pc, #592]	; (80092e4 <_dtoa_r+0x304>)
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	3303      	adds	r3, #3
 8009096:	e7f3      	b.n	8009080 <_dtoa_r+0xa0>
 8009098:	ed9d 7b02 	vldr	d7, [sp, #8]
 800909c:	2200      	movs	r2, #0
 800909e:	ec51 0b17 	vmov	r0, r1, d7
 80090a2:	2300      	movs	r3, #0
 80090a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80090a8:	f7f7 fd16 	bl	8000ad8 <__aeabi_dcmpeq>
 80090ac:	4680      	mov	r8, r0
 80090ae:	b158      	cbz	r0, 80090c8 <_dtoa_r+0xe8>
 80090b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80090b2:	2301      	movs	r3, #1
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 8551 	beq.w	8009b60 <_dtoa_r+0xb80>
 80090be:	488b      	ldr	r0, [pc, #556]	; (80092ec <_dtoa_r+0x30c>)
 80090c0:	6018      	str	r0, [r3, #0]
 80090c2:	1e43      	subs	r3, r0, #1
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	e7dd      	b.n	8009084 <_dtoa_r+0xa4>
 80090c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80090cc:	aa12      	add	r2, sp, #72	; 0x48
 80090ce:	a913      	add	r1, sp, #76	; 0x4c
 80090d0:	4620      	mov	r0, r4
 80090d2:	f001 f89f 	bl	800a214 <__d2b>
 80090d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090da:	4683      	mov	fp, r0
 80090dc:	2d00      	cmp	r5, #0
 80090de:	d07c      	beq.n	80091da <_dtoa_r+0x1fa>
 80090e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80090e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80090ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80090f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80090f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090fa:	4b7d      	ldr	r3, [pc, #500]	; (80092f0 <_dtoa_r+0x310>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	4630      	mov	r0, r6
 8009100:	4639      	mov	r1, r7
 8009102:	f7f7 f8c9 	bl	8000298 <__aeabi_dsub>
 8009106:	a36e      	add	r3, pc, #440	; (adr r3, 80092c0 <_dtoa_r+0x2e0>)
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f7f7 fa7c 	bl	8000608 <__aeabi_dmul>
 8009110:	a36d      	add	r3, pc, #436	; (adr r3, 80092c8 <_dtoa_r+0x2e8>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f7f7 f8c1 	bl	800029c <__adddf3>
 800911a:	4606      	mov	r6, r0
 800911c:	4628      	mov	r0, r5
 800911e:	460f      	mov	r7, r1
 8009120:	f7f7 fa08 	bl	8000534 <__aeabi_i2d>
 8009124:	a36a      	add	r3, pc, #424	; (adr r3, 80092d0 <_dtoa_r+0x2f0>)
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 fa6d 	bl	8000608 <__aeabi_dmul>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4630      	mov	r0, r6
 8009134:	4639      	mov	r1, r7
 8009136:	f7f7 f8b1 	bl	800029c <__adddf3>
 800913a:	4606      	mov	r6, r0
 800913c:	460f      	mov	r7, r1
 800913e:	f7f7 fd13 	bl	8000b68 <__aeabi_d2iz>
 8009142:	2200      	movs	r2, #0
 8009144:	4682      	mov	sl, r0
 8009146:	2300      	movs	r3, #0
 8009148:	4630      	mov	r0, r6
 800914a:	4639      	mov	r1, r7
 800914c:	f7f7 fcce 	bl	8000aec <__aeabi_dcmplt>
 8009150:	b148      	cbz	r0, 8009166 <_dtoa_r+0x186>
 8009152:	4650      	mov	r0, sl
 8009154:	f7f7 f9ee 	bl	8000534 <__aeabi_i2d>
 8009158:	4632      	mov	r2, r6
 800915a:	463b      	mov	r3, r7
 800915c:	f7f7 fcbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009160:	b908      	cbnz	r0, 8009166 <_dtoa_r+0x186>
 8009162:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009166:	f1ba 0f16 	cmp.w	sl, #22
 800916a:	d854      	bhi.n	8009216 <_dtoa_r+0x236>
 800916c:	4b61      	ldr	r3, [pc, #388]	; (80092f4 <_dtoa_r+0x314>)
 800916e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800917a:	f7f7 fcb7 	bl	8000aec <__aeabi_dcmplt>
 800917e:	2800      	cmp	r0, #0
 8009180:	d04b      	beq.n	800921a <_dtoa_r+0x23a>
 8009182:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009186:	2300      	movs	r3, #0
 8009188:	930e      	str	r3, [sp, #56]	; 0x38
 800918a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800918c:	1b5d      	subs	r5, r3, r5
 800918e:	1e6b      	subs	r3, r5, #1
 8009190:	9304      	str	r3, [sp, #16]
 8009192:	bf43      	ittte	mi
 8009194:	2300      	movmi	r3, #0
 8009196:	f1c5 0801 	rsbmi	r8, r5, #1
 800919a:	9304      	strmi	r3, [sp, #16]
 800919c:	f04f 0800 	movpl.w	r8, #0
 80091a0:	f1ba 0f00 	cmp.w	sl, #0
 80091a4:	db3b      	blt.n	800921e <_dtoa_r+0x23e>
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80091ac:	4453      	add	r3, sl
 80091ae:	9304      	str	r3, [sp, #16]
 80091b0:	2300      	movs	r3, #0
 80091b2:	9306      	str	r3, [sp, #24]
 80091b4:	9b05      	ldr	r3, [sp, #20]
 80091b6:	2b09      	cmp	r3, #9
 80091b8:	d869      	bhi.n	800928e <_dtoa_r+0x2ae>
 80091ba:	2b05      	cmp	r3, #5
 80091bc:	bfc4      	itt	gt
 80091be:	3b04      	subgt	r3, #4
 80091c0:	9305      	strgt	r3, [sp, #20]
 80091c2:	9b05      	ldr	r3, [sp, #20]
 80091c4:	f1a3 0302 	sub.w	r3, r3, #2
 80091c8:	bfcc      	ite	gt
 80091ca:	2500      	movgt	r5, #0
 80091cc:	2501      	movle	r5, #1
 80091ce:	2b03      	cmp	r3, #3
 80091d0:	d869      	bhi.n	80092a6 <_dtoa_r+0x2c6>
 80091d2:	e8df f003 	tbb	[pc, r3]
 80091d6:	4e2c      	.short	0x4e2c
 80091d8:	5a4c      	.short	0x5a4c
 80091da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80091de:	441d      	add	r5, r3
 80091e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091e4:	2b20      	cmp	r3, #32
 80091e6:	bfc1      	itttt	gt
 80091e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80091f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80091f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80091f8:	bfda      	itte	le
 80091fa:	f1c3 0320 	rsble	r3, r3, #32
 80091fe:	fa06 f003 	lslle.w	r0, r6, r3
 8009202:	4318      	orrgt	r0, r3
 8009204:	f7f7 f986 	bl	8000514 <__aeabi_ui2d>
 8009208:	2301      	movs	r3, #1
 800920a:	4606      	mov	r6, r0
 800920c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009210:	3d01      	subs	r5, #1
 8009212:	9310      	str	r3, [sp, #64]	; 0x40
 8009214:	e771      	b.n	80090fa <_dtoa_r+0x11a>
 8009216:	2301      	movs	r3, #1
 8009218:	e7b6      	b.n	8009188 <_dtoa_r+0x1a8>
 800921a:	900e      	str	r0, [sp, #56]	; 0x38
 800921c:	e7b5      	b.n	800918a <_dtoa_r+0x1aa>
 800921e:	f1ca 0300 	rsb	r3, sl, #0
 8009222:	9306      	str	r3, [sp, #24]
 8009224:	2300      	movs	r3, #0
 8009226:	eba8 080a 	sub.w	r8, r8, sl
 800922a:	930d      	str	r3, [sp, #52]	; 0x34
 800922c:	e7c2      	b.n	80091b4 <_dtoa_r+0x1d4>
 800922e:	2300      	movs	r3, #0
 8009230:	9308      	str	r3, [sp, #32]
 8009232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009234:	2b00      	cmp	r3, #0
 8009236:	dc39      	bgt.n	80092ac <_dtoa_r+0x2cc>
 8009238:	f04f 0901 	mov.w	r9, #1
 800923c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009240:	464b      	mov	r3, r9
 8009242:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009246:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009248:	2200      	movs	r2, #0
 800924a:	6042      	str	r2, [r0, #4]
 800924c:	2204      	movs	r2, #4
 800924e:	f102 0614 	add.w	r6, r2, #20
 8009252:	429e      	cmp	r6, r3
 8009254:	6841      	ldr	r1, [r0, #4]
 8009256:	d92f      	bls.n	80092b8 <_dtoa_r+0x2d8>
 8009258:	4620      	mov	r0, r4
 800925a:	f000 fcb9 	bl	8009bd0 <_Balloc>
 800925e:	9000      	str	r0, [sp, #0]
 8009260:	2800      	cmp	r0, #0
 8009262:	d14b      	bne.n	80092fc <_dtoa_r+0x31c>
 8009264:	4b24      	ldr	r3, [pc, #144]	; (80092f8 <_dtoa_r+0x318>)
 8009266:	4602      	mov	r2, r0
 8009268:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800926c:	e6d1      	b.n	8009012 <_dtoa_r+0x32>
 800926e:	2301      	movs	r3, #1
 8009270:	e7de      	b.n	8009230 <_dtoa_r+0x250>
 8009272:	2300      	movs	r3, #0
 8009274:	9308      	str	r3, [sp, #32]
 8009276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009278:	eb0a 0903 	add.w	r9, sl, r3
 800927c:	f109 0301 	add.w	r3, r9, #1
 8009280:	2b01      	cmp	r3, #1
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	bfb8      	it	lt
 8009286:	2301      	movlt	r3, #1
 8009288:	e7dd      	b.n	8009246 <_dtoa_r+0x266>
 800928a:	2301      	movs	r3, #1
 800928c:	e7f2      	b.n	8009274 <_dtoa_r+0x294>
 800928e:	2501      	movs	r5, #1
 8009290:	2300      	movs	r3, #0
 8009292:	9305      	str	r3, [sp, #20]
 8009294:	9508      	str	r5, [sp, #32]
 8009296:	f04f 39ff 	mov.w	r9, #4294967295
 800929a:	2200      	movs	r2, #0
 800929c:	f8cd 9004 	str.w	r9, [sp, #4]
 80092a0:	2312      	movs	r3, #18
 80092a2:	9209      	str	r2, [sp, #36]	; 0x24
 80092a4:	e7cf      	b.n	8009246 <_dtoa_r+0x266>
 80092a6:	2301      	movs	r3, #1
 80092a8:	9308      	str	r3, [sp, #32]
 80092aa:	e7f4      	b.n	8009296 <_dtoa_r+0x2b6>
 80092ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80092b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80092b4:	464b      	mov	r3, r9
 80092b6:	e7c6      	b.n	8009246 <_dtoa_r+0x266>
 80092b8:	3101      	adds	r1, #1
 80092ba:	6041      	str	r1, [r0, #4]
 80092bc:	0052      	lsls	r2, r2, #1
 80092be:	e7c6      	b.n	800924e <_dtoa_r+0x26e>
 80092c0:	636f4361 	.word	0x636f4361
 80092c4:	3fd287a7 	.word	0x3fd287a7
 80092c8:	8b60c8b3 	.word	0x8b60c8b3
 80092cc:	3fc68a28 	.word	0x3fc68a28
 80092d0:	509f79fb 	.word	0x509f79fb
 80092d4:	3fd34413 	.word	0x3fd34413
 80092d8:	0800b7ed 	.word	0x0800b7ed
 80092dc:	0800b804 	.word	0x0800b804
 80092e0:	7ff00000 	.word	0x7ff00000
 80092e4:	0800b7e9 	.word	0x0800b7e9
 80092e8:	0800b7e0 	.word	0x0800b7e0
 80092ec:	0800b7bd 	.word	0x0800b7bd
 80092f0:	3ff80000 	.word	0x3ff80000
 80092f4:	0800b900 	.word	0x0800b900
 80092f8:	0800b863 	.word	0x0800b863
 80092fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092fe:	9a00      	ldr	r2, [sp, #0]
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	9b01      	ldr	r3, [sp, #4]
 8009304:	2b0e      	cmp	r3, #14
 8009306:	f200 80ad 	bhi.w	8009464 <_dtoa_r+0x484>
 800930a:	2d00      	cmp	r5, #0
 800930c:	f000 80aa 	beq.w	8009464 <_dtoa_r+0x484>
 8009310:	f1ba 0f00 	cmp.w	sl, #0
 8009314:	dd36      	ble.n	8009384 <_dtoa_r+0x3a4>
 8009316:	4ac3      	ldr	r2, [pc, #780]	; (8009624 <_dtoa_r+0x644>)
 8009318:	f00a 030f 	and.w	r3, sl, #15
 800931c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009320:	ed93 7b00 	vldr	d7, [r3]
 8009324:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009328:	ea4f 172a 	mov.w	r7, sl, asr #4
 800932c:	eeb0 8a47 	vmov.f32	s16, s14
 8009330:	eef0 8a67 	vmov.f32	s17, s15
 8009334:	d016      	beq.n	8009364 <_dtoa_r+0x384>
 8009336:	4bbc      	ldr	r3, [pc, #752]	; (8009628 <_dtoa_r+0x648>)
 8009338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800933c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009340:	f7f7 fa8c 	bl	800085c <__aeabi_ddiv>
 8009344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009348:	f007 070f 	and.w	r7, r7, #15
 800934c:	2503      	movs	r5, #3
 800934e:	4eb6      	ldr	r6, [pc, #728]	; (8009628 <_dtoa_r+0x648>)
 8009350:	b957      	cbnz	r7, 8009368 <_dtoa_r+0x388>
 8009352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009356:	ec53 2b18 	vmov	r2, r3, d8
 800935a:	f7f7 fa7f 	bl	800085c <__aeabi_ddiv>
 800935e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009362:	e029      	b.n	80093b8 <_dtoa_r+0x3d8>
 8009364:	2502      	movs	r5, #2
 8009366:	e7f2      	b.n	800934e <_dtoa_r+0x36e>
 8009368:	07f9      	lsls	r1, r7, #31
 800936a:	d508      	bpl.n	800937e <_dtoa_r+0x39e>
 800936c:	ec51 0b18 	vmov	r0, r1, d8
 8009370:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009374:	f7f7 f948 	bl	8000608 <__aeabi_dmul>
 8009378:	ec41 0b18 	vmov	d8, r0, r1
 800937c:	3501      	adds	r5, #1
 800937e:	107f      	asrs	r7, r7, #1
 8009380:	3608      	adds	r6, #8
 8009382:	e7e5      	b.n	8009350 <_dtoa_r+0x370>
 8009384:	f000 80a6 	beq.w	80094d4 <_dtoa_r+0x4f4>
 8009388:	f1ca 0600 	rsb	r6, sl, #0
 800938c:	4ba5      	ldr	r3, [pc, #660]	; (8009624 <_dtoa_r+0x644>)
 800938e:	4fa6      	ldr	r7, [pc, #664]	; (8009628 <_dtoa_r+0x648>)
 8009390:	f006 020f 	and.w	r2, r6, #15
 8009394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093a0:	f7f7 f932 	bl	8000608 <__aeabi_dmul>
 80093a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093a8:	1136      	asrs	r6, r6, #4
 80093aa:	2300      	movs	r3, #0
 80093ac:	2502      	movs	r5, #2
 80093ae:	2e00      	cmp	r6, #0
 80093b0:	f040 8085 	bne.w	80094be <_dtoa_r+0x4de>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1d2      	bne.n	800935e <_dtoa_r+0x37e>
 80093b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 808c 	beq.w	80094d8 <_dtoa_r+0x4f8>
 80093c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093c4:	4b99      	ldr	r3, [pc, #612]	; (800962c <_dtoa_r+0x64c>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	4630      	mov	r0, r6
 80093ca:	4639      	mov	r1, r7
 80093cc:	f7f7 fb8e 	bl	8000aec <__aeabi_dcmplt>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	f000 8081 	beq.w	80094d8 <_dtoa_r+0x4f8>
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d07d      	beq.n	80094d8 <_dtoa_r+0x4f8>
 80093dc:	f1b9 0f00 	cmp.w	r9, #0
 80093e0:	dd3c      	ble.n	800945c <_dtoa_r+0x47c>
 80093e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80093e6:	9307      	str	r3, [sp, #28]
 80093e8:	2200      	movs	r2, #0
 80093ea:	4b91      	ldr	r3, [pc, #580]	; (8009630 <_dtoa_r+0x650>)
 80093ec:	4630      	mov	r0, r6
 80093ee:	4639      	mov	r1, r7
 80093f0:	f7f7 f90a 	bl	8000608 <__aeabi_dmul>
 80093f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093f8:	3501      	adds	r5, #1
 80093fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80093fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009402:	4628      	mov	r0, r5
 8009404:	f7f7 f896 	bl	8000534 <__aeabi_i2d>
 8009408:	4632      	mov	r2, r6
 800940a:	463b      	mov	r3, r7
 800940c:	f7f7 f8fc 	bl	8000608 <__aeabi_dmul>
 8009410:	4b88      	ldr	r3, [pc, #544]	; (8009634 <_dtoa_r+0x654>)
 8009412:	2200      	movs	r2, #0
 8009414:	f7f6 ff42 	bl	800029c <__adddf3>
 8009418:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800941c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009420:	9303      	str	r3, [sp, #12]
 8009422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009424:	2b00      	cmp	r3, #0
 8009426:	d15c      	bne.n	80094e2 <_dtoa_r+0x502>
 8009428:	4b83      	ldr	r3, [pc, #524]	; (8009638 <_dtoa_r+0x658>)
 800942a:	2200      	movs	r2, #0
 800942c:	4630      	mov	r0, r6
 800942e:	4639      	mov	r1, r7
 8009430:	f7f6 ff32 	bl	8000298 <__aeabi_dsub>
 8009434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009438:	4606      	mov	r6, r0
 800943a:	460f      	mov	r7, r1
 800943c:	f7f7 fb74 	bl	8000b28 <__aeabi_dcmpgt>
 8009440:	2800      	cmp	r0, #0
 8009442:	f040 8296 	bne.w	8009972 <_dtoa_r+0x992>
 8009446:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800944a:	4630      	mov	r0, r6
 800944c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009450:	4639      	mov	r1, r7
 8009452:	f7f7 fb4b 	bl	8000aec <__aeabi_dcmplt>
 8009456:	2800      	cmp	r0, #0
 8009458:	f040 8288 	bne.w	800996c <_dtoa_r+0x98c>
 800945c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009460:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009466:	2b00      	cmp	r3, #0
 8009468:	f2c0 8158 	blt.w	800971c <_dtoa_r+0x73c>
 800946c:	f1ba 0f0e 	cmp.w	sl, #14
 8009470:	f300 8154 	bgt.w	800971c <_dtoa_r+0x73c>
 8009474:	4b6b      	ldr	r3, [pc, #428]	; (8009624 <_dtoa_r+0x644>)
 8009476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800947a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800947e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009480:	2b00      	cmp	r3, #0
 8009482:	f280 80e3 	bge.w	800964c <_dtoa_r+0x66c>
 8009486:	9b01      	ldr	r3, [sp, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	f300 80df 	bgt.w	800964c <_dtoa_r+0x66c>
 800948e:	f040 826d 	bne.w	800996c <_dtoa_r+0x98c>
 8009492:	4b69      	ldr	r3, [pc, #420]	; (8009638 <_dtoa_r+0x658>)
 8009494:	2200      	movs	r2, #0
 8009496:	4640      	mov	r0, r8
 8009498:	4649      	mov	r1, r9
 800949a:	f7f7 f8b5 	bl	8000608 <__aeabi_dmul>
 800949e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094a2:	f7f7 fb37 	bl	8000b14 <__aeabi_dcmpge>
 80094a6:	9e01      	ldr	r6, [sp, #4]
 80094a8:	4637      	mov	r7, r6
 80094aa:	2800      	cmp	r0, #0
 80094ac:	f040 8243 	bne.w	8009936 <_dtoa_r+0x956>
 80094b0:	9d00      	ldr	r5, [sp, #0]
 80094b2:	2331      	movs	r3, #49	; 0x31
 80094b4:	f805 3b01 	strb.w	r3, [r5], #1
 80094b8:	f10a 0a01 	add.w	sl, sl, #1
 80094bc:	e23f      	b.n	800993e <_dtoa_r+0x95e>
 80094be:	07f2      	lsls	r2, r6, #31
 80094c0:	d505      	bpl.n	80094ce <_dtoa_r+0x4ee>
 80094c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c6:	f7f7 f89f 	bl	8000608 <__aeabi_dmul>
 80094ca:	3501      	adds	r5, #1
 80094cc:	2301      	movs	r3, #1
 80094ce:	1076      	asrs	r6, r6, #1
 80094d0:	3708      	adds	r7, #8
 80094d2:	e76c      	b.n	80093ae <_dtoa_r+0x3ce>
 80094d4:	2502      	movs	r5, #2
 80094d6:	e76f      	b.n	80093b8 <_dtoa_r+0x3d8>
 80094d8:	9b01      	ldr	r3, [sp, #4]
 80094da:	f8cd a01c 	str.w	sl, [sp, #28]
 80094de:	930c      	str	r3, [sp, #48]	; 0x30
 80094e0:	e78d      	b.n	80093fe <_dtoa_r+0x41e>
 80094e2:	9900      	ldr	r1, [sp, #0]
 80094e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094e8:	4b4e      	ldr	r3, [pc, #312]	; (8009624 <_dtoa_r+0x644>)
 80094ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094ee:	4401      	add	r1, r0
 80094f0:	9102      	str	r1, [sp, #8]
 80094f2:	9908      	ldr	r1, [sp, #32]
 80094f4:	eeb0 8a47 	vmov.f32	s16, s14
 80094f8:	eef0 8a67 	vmov.f32	s17, s15
 80094fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009500:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009504:	2900      	cmp	r1, #0
 8009506:	d045      	beq.n	8009594 <_dtoa_r+0x5b4>
 8009508:	494c      	ldr	r1, [pc, #304]	; (800963c <_dtoa_r+0x65c>)
 800950a:	2000      	movs	r0, #0
 800950c:	f7f7 f9a6 	bl	800085c <__aeabi_ddiv>
 8009510:	ec53 2b18 	vmov	r2, r3, d8
 8009514:	f7f6 fec0 	bl	8000298 <__aeabi_dsub>
 8009518:	9d00      	ldr	r5, [sp, #0]
 800951a:	ec41 0b18 	vmov	d8, r0, r1
 800951e:	4639      	mov	r1, r7
 8009520:	4630      	mov	r0, r6
 8009522:	f7f7 fb21 	bl	8000b68 <__aeabi_d2iz>
 8009526:	900c      	str	r0, [sp, #48]	; 0x30
 8009528:	f7f7 f804 	bl	8000534 <__aeabi_i2d>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4630      	mov	r0, r6
 8009532:	4639      	mov	r1, r7
 8009534:	f7f6 feb0 	bl	8000298 <__aeabi_dsub>
 8009538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800953a:	3330      	adds	r3, #48	; 0x30
 800953c:	f805 3b01 	strb.w	r3, [r5], #1
 8009540:	ec53 2b18 	vmov	r2, r3, d8
 8009544:	4606      	mov	r6, r0
 8009546:	460f      	mov	r7, r1
 8009548:	f7f7 fad0 	bl	8000aec <__aeabi_dcmplt>
 800954c:	2800      	cmp	r0, #0
 800954e:	d165      	bne.n	800961c <_dtoa_r+0x63c>
 8009550:	4632      	mov	r2, r6
 8009552:	463b      	mov	r3, r7
 8009554:	4935      	ldr	r1, [pc, #212]	; (800962c <_dtoa_r+0x64c>)
 8009556:	2000      	movs	r0, #0
 8009558:	f7f6 fe9e 	bl	8000298 <__aeabi_dsub>
 800955c:	ec53 2b18 	vmov	r2, r3, d8
 8009560:	f7f7 fac4 	bl	8000aec <__aeabi_dcmplt>
 8009564:	2800      	cmp	r0, #0
 8009566:	f040 80b9 	bne.w	80096dc <_dtoa_r+0x6fc>
 800956a:	9b02      	ldr	r3, [sp, #8]
 800956c:	429d      	cmp	r5, r3
 800956e:	f43f af75 	beq.w	800945c <_dtoa_r+0x47c>
 8009572:	4b2f      	ldr	r3, [pc, #188]	; (8009630 <_dtoa_r+0x650>)
 8009574:	ec51 0b18 	vmov	r0, r1, d8
 8009578:	2200      	movs	r2, #0
 800957a:	f7f7 f845 	bl	8000608 <__aeabi_dmul>
 800957e:	4b2c      	ldr	r3, [pc, #176]	; (8009630 <_dtoa_r+0x650>)
 8009580:	ec41 0b18 	vmov	d8, r0, r1
 8009584:	2200      	movs	r2, #0
 8009586:	4630      	mov	r0, r6
 8009588:	4639      	mov	r1, r7
 800958a:	f7f7 f83d 	bl	8000608 <__aeabi_dmul>
 800958e:	4606      	mov	r6, r0
 8009590:	460f      	mov	r7, r1
 8009592:	e7c4      	b.n	800951e <_dtoa_r+0x53e>
 8009594:	ec51 0b17 	vmov	r0, r1, d7
 8009598:	f7f7 f836 	bl	8000608 <__aeabi_dmul>
 800959c:	9b02      	ldr	r3, [sp, #8]
 800959e:	9d00      	ldr	r5, [sp, #0]
 80095a0:	930c      	str	r3, [sp, #48]	; 0x30
 80095a2:	ec41 0b18 	vmov	d8, r0, r1
 80095a6:	4639      	mov	r1, r7
 80095a8:	4630      	mov	r0, r6
 80095aa:	f7f7 fadd 	bl	8000b68 <__aeabi_d2iz>
 80095ae:	9011      	str	r0, [sp, #68]	; 0x44
 80095b0:	f7f6 ffc0 	bl	8000534 <__aeabi_i2d>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4630      	mov	r0, r6
 80095ba:	4639      	mov	r1, r7
 80095bc:	f7f6 fe6c 	bl	8000298 <__aeabi_dsub>
 80095c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095c2:	3330      	adds	r3, #48	; 0x30
 80095c4:	f805 3b01 	strb.w	r3, [r5], #1
 80095c8:	9b02      	ldr	r3, [sp, #8]
 80095ca:	429d      	cmp	r5, r3
 80095cc:	4606      	mov	r6, r0
 80095ce:	460f      	mov	r7, r1
 80095d0:	f04f 0200 	mov.w	r2, #0
 80095d4:	d134      	bne.n	8009640 <_dtoa_r+0x660>
 80095d6:	4b19      	ldr	r3, [pc, #100]	; (800963c <_dtoa_r+0x65c>)
 80095d8:	ec51 0b18 	vmov	r0, r1, d8
 80095dc:	f7f6 fe5e 	bl	800029c <__adddf3>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	f7f7 fa9e 	bl	8000b28 <__aeabi_dcmpgt>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d175      	bne.n	80096dc <_dtoa_r+0x6fc>
 80095f0:	ec53 2b18 	vmov	r2, r3, d8
 80095f4:	4911      	ldr	r1, [pc, #68]	; (800963c <_dtoa_r+0x65c>)
 80095f6:	2000      	movs	r0, #0
 80095f8:	f7f6 fe4e 	bl	8000298 <__aeabi_dsub>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4630      	mov	r0, r6
 8009602:	4639      	mov	r1, r7
 8009604:	f7f7 fa72 	bl	8000aec <__aeabi_dcmplt>
 8009608:	2800      	cmp	r0, #0
 800960a:	f43f af27 	beq.w	800945c <_dtoa_r+0x47c>
 800960e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009610:	1e6b      	subs	r3, r5, #1
 8009612:	930c      	str	r3, [sp, #48]	; 0x30
 8009614:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009618:	2b30      	cmp	r3, #48	; 0x30
 800961a:	d0f8      	beq.n	800960e <_dtoa_r+0x62e>
 800961c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009620:	e04a      	b.n	80096b8 <_dtoa_r+0x6d8>
 8009622:	bf00      	nop
 8009624:	0800b900 	.word	0x0800b900
 8009628:	0800b8d8 	.word	0x0800b8d8
 800962c:	3ff00000 	.word	0x3ff00000
 8009630:	40240000 	.word	0x40240000
 8009634:	401c0000 	.word	0x401c0000
 8009638:	40140000 	.word	0x40140000
 800963c:	3fe00000 	.word	0x3fe00000
 8009640:	4baf      	ldr	r3, [pc, #700]	; (8009900 <_dtoa_r+0x920>)
 8009642:	f7f6 ffe1 	bl	8000608 <__aeabi_dmul>
 8009646:	4606      	mov	r6, r0
 8009648:	460f      	mov	r7, r1
 800964a:	e7ac      	b.n	80095a6 <_dtoa_r+0x5c6>
 800964c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009650:	9d00      	ldr	r5, [sp, #0]
 8009652:	4642      	mov	r2, r8
 8009654:	464b      	mov	r3, r9
 8009656:	4630      	mov	r0, r6
 8009658:	4639      	mov	r1, r7
 800965a:	f7f7 f8ff 	bl	800085c <__aeabi_ddiv>
 800965e:	f7f7 fa83 	bl	8000b68 <__aeabi_d2iz>
 8009662:	9002      	str	r0, [sp, #8]
 8009664:	f7f6 ff66 	bl	8000534 <__aeabi_i2d>
 8009668:	4642      	mov	r2, r8
 800966a:	464b      	mov	r3, r9
 800966c:	f7f6 ffcc 	bl	8000608 <__aeabi_dmul>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4630      	mov	r0, r6
 8009676:	4639      	mov	r1, r7
 8009678:	f7f6 fe0e 	bl	8000298 <__aeabi_dsub>
 800967c:	9e02      	ldr	r6, [sp, #8]
 800967e:	9f01      	ldr	r7, [sp, #4]
 8009680:	3630      	adds	r6, #48	; 0x30
 8009682:	f805 6b01 	strb.w	r6, [r5], #1
 8009686:	9e00      	ldr	r6, [sp, #0]
 8009688:	1bae      	subs	r6, r5, r6
 800968a:	42b7      	cmp	r7, r6
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	d137      	bne.n	8009702 <_dtoa_r+0x722>
 8009692:	f7f6 fe03 	bl	800029c <__adddf3>
 8009696:	4642      	mov	r2, r8
 8009698:	464b      	mov	r3, r9
 800969a:	4606      	mov	r6, r0
 800969c:	460f      	mov	r7, r1
 800969e:	f7f7 fa43 	bl	8000b28 <__aeabi_dcmpgt>
 80096a2:	b9c8      	cbnz	r0, 80096d8 <_dtoa_r+0x6f8>
 80096a4:	4642      	mov	r2, r8
 80096a6:	464b      	mov	r3, r9
 80096a8:	4630      	mov	r0, r6
 80096aa:	4639      	mov	r1, r7
 80096ac:	f7f7 fa14 	bl	8000ad8 <__aeabi_dcmpeq>
 80096b0:	b110      	cbz	r0, 80096b8 <_dtoa_r+0x6d8>
 80096b2:	9b02      	ldr	r3, [sp, #8]
 80096b4:	07d9      	lsls	r1, r3, #31
 80096b6:	d40f      	bmi.n	80096d8 <_dtoa_r+0x6f8>
 80096b8:	4620      	mov	r0, r4
 80096ba:	4659      	mov	r1, fp
 80096bc:	f000 fac8 	bl	8009c50 <_Bfree>
 80096c0:	2300      	movs	r3, #0
 80096c2:	702b      	strb	r3, [r5, #0]
 80096c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096c6:	f10a 0001 	add.w	r0, sl, #1
 80096ca:	6018      	str	r0, [r3, #0]
 80096cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f43f acd8 	beq.w	8009084 <_dtoa_r+0xa4>
 80096d4:	601d      	str	r5, [r3, #0]
 80096d6:	e4d5      	b.n	8009084 <_dtoa_r+0xa4>
 80096d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80096dc:	462b      	mov	r3, r5
 80096de:	461d      	mov	r5, r3
 80096e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096e4:	2a39      	cmp	r2, #57	; 0x39
 80096e6:	d108      	bne.n	80096fa <_dtoa_r+0x71a>
 80096e8:	9a00      	ldr	r2, [sp, #0]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d1f7      	bne.n	80096de <_dtoa_r+0x6fe>
 80096ee:	9a07      	ldr	r2, [sp, #28]
 80096f0:	9900      	ldr	r1, [sp, #0]
 80096f2:	3201      	adds	r2, #1
 80096f4:	9207      	str	r2, [sp, #28]
 80096f6:	2230      	movs	r2, #48	; 0x30
 80096f8:	700a      	strb	r2, [r1, #0]
 80096fa:	781a      	ldrb	r2, [r3, #0]
 80096fc:	3201      	adds	r2, #1
 80096fe:	701a      	strb	r2, [r3, #0]
 8009700:	e78c      	b.n	800961c <_dtoa_r+0x63c>
 8009702:	4b7f      	ldr	r3, [pc, #508]	; (8009900 <_dtoa_r+0x920>)
 8009704:	2200      	movs	r2, #0
 8009706:	f7f6 ff7f 	bl	8000608 <__aeabi_dmul>
 800970a:	2200      	movs	r2, #0
 800970c:	2300      	movs	r3, #0
 800970e:	4606      	mov	r6, r0
 8009710:	460f      	mov	r7, r1
 8009712:	f7f7 f9e1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009716:	2800      	cmp	r0, #0
 8009718:	d09b      	beq.n	8009652 <_dtoa_r+0x672>
 800971a:	e7cd      	b.n	80096b8 <_dtoa_r+0x6d8>
 800971c:	9a08      	ldr	r2, [sp, #32]
 800971e:	2a00      	cmp	r2, #0
 8009720:	f000 80c4 	beq.w	80098ac <_dtoa_r+0x8cc>
 8009724:	9a05      	ldr	r2, [sp, #20]
 8009726:	2a01      	cmp	r2, #1
 8009728:	f300 80a8 	bgt.w	800987c <_dtoa_r+0x89c>
 800972c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800972e:	2a00      	cmp	r2, #0
 8009730:	f000 80a0 	beq.w	8009874 <_dtoa_r+0x894>
 8009734:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009738:	9e06      	ldr	r6, [sp, #24]
 800973a:	4645      	mov	r5, r8
 800973c:	9a04      	ldr	r2, [sp, #16]
 800973e:	2101      	movs	r1, #1
 8009740:	441a      	add	r2, r3
 8009742:	4620      	mov	r0, r4
 8009744:	4498      	add	r8, r3
 8009746:	9204      	str	r2, [sp, #16]
 8009748:	f000 fb3e 	bl	8009dc8 <__i2b>
 800974c:	4607      	mov	r7, r0
 800974e:	2d00      	cmp	r5, #0
 8009750:	dd0b      	ble.n	800976a <_dtoa_r+0x78a>
 8009752:	9b04      	ldr	r3, [sp, #16]
 8009754:	2b00      	cmp	r3, #0
 8009756:	dd08      	ble.n	800976a <_dtoa_r+0x78a>
 8009758:	42ab      	cmp	r3, r5
 800975a:	9a04      	ldr	r2, [sp, #16]
 800975c:	bfa8      	it	ge
 800975e:	462b      	movge	r3, r5
 8009760:	eba8 0803 	sub.w	r8, r8, r3
 8009764:	1aed      	subs	r5, r5, r3
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	9304      	str	r3, [sp, #16]
 800976a:	9b06      	ldr	r3, [sp, #24]
 800976c:	b1fb      	cbz	r3, 80097ae <_dtoa_r+0x7ce>
 800976e:	9b08      	ldr	r3, [sp, #32]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f000 809f 	beq.w	80098b4 <_dtoa_r+0x8d4>
 8009776:	2e00      	cmp	r6, #0
 8009778:	dd11      	ble.n	800979e <_dtoa_r+0x7be>
 800977a:	4639      	mov	r1, r7
 800977c:	4632      	mov	r2, r6
 800977e:	4620      	mov	r0, r4
 8009780:	f000 fbde 	bl	8009f40 <__pow5mult>
 8009784:	465a      	mov	r2, fp
 8009786:	4601      	mov	r1, r0
 8009788:	4607      	mov	r7, r0
 800978a:	4620      	mov	r0, r4
 800978c:	f000 fb32 	bl	8009df4 <__multiply>
 8009790:	4659      	mov	r1, fp
 8009792:	9007      	str	r0, [sp, #28]
 8009794:	4620      	mov	r0, r4
 8009796:	f000 fa5b 	bl	8009c50 <_Bfree>
 800979a:	9b07      	ldr	r3, [sp, #28]
 800979c:	469b      	mov	fp, r3
 800979e:	9b06      	ldr	r3, [sp, #24]
 80097a0:	1b9a      	subs	r2, r3, r6
 80097a2:	d004      	beq.n	80097ae <_dtoa_r+0x7ce>
 80097a4:	4659      	mov	r1, fp
 80097a6:	4620      	mov	r0, r4
 80097a8:	f000 fbca 	bl	8009f40 <__pow5mult>
 80097ac:	4683      	mov	fp, r0
 80097ae:	2101      	movs	r1, #1
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 fb09 	bl	8009dc8 <__i2b>
 80097b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	4606      	mov	r6, r0
 80097bc:	dd7c      	ble.n	80098b8 <_dtoa_r+0x8d8>
 80097be:	461a      	mov	r2, r3
 80097c0:	4601      	mov	r1, r0
 80097c2:	4620      	mov	r0, r4
 80097c4:	f000 fbbc 	bl	8009f40 <__pow5mult>
 80097c8:	9b05      	ldr	r3, [sp, #20]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	4606      	mov	r6, r0
 80097ce:	dd76      	ble.n	80098be <_dtoa_r+0x8de>
 80097d0:	2300      	movs	r3, #0
 80097d2:	9306      	str	r3, [sp, #24]
 80097d4:	6933      	ldr	r3, [r6, #16]
 80097d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097da:	6918      	ldr	r0, [r3, #16]
 80097dc:	f000 faa4 	bl	8009d28 <__hi0bits>
 80097e0:	f1c0 0020 	rsb	r0, r0, #32
 80097e4:	9b04      	ldr	r3, [sp, #16]
 80097e6:	4418      	add	r0, r3
 80097e8:	f010 001f 	ands.w	r0, r0, #31
 80097ec:	f000 8086 	beq.w	80098fc <_dtoa_r+0x91c>
 80097f0:	f1c0 0320 	rsb	r3, r0, #32
 80097f4:	2b04      	cmp	r3, #4
 80097f6:	dd7f      	ble.n	80098f8 <_dtoa_r+0x918>
 80097f8:	f1c0 001c 	rsb	r0, r0, #28
 80097fc:	9b04      	ldr	r3, [sp, #16]
 80097fe:	4403      	add	r3, r0
 8009800:	4480      	add	r8, r0
 8009802:	4405      	add	r5, r0
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	f1b8 0f00 	cmp.w	r8, #0
 800980a:	dd05      	ble.n	8009818 <_dtoa_r+0x838>
 800980c:	4659      	mov	r1, fp
 800980e:	4642      	mov	r2, r8
 8009810:	4620      	mov	r0, r4
 8009812:	f000 fbef 	bl	8009ff4 <__lshift>
 8009816:	4683      	mov	fp, r0
 8009818:	9b04      	ldr	r3, [sp, #16]
 800981a:	2b00      	cmp	r3, #0
 800981c:	dd05      	ble.n	800982a <_dtoa_r+0x84a>
 800981e:	4631      	mov	r1, r6
 8009820:	461a      	mov	r2, r3
 8009822:	4620      	mov	r0, r4
 8009824:	f000 fbe6 	bl	8009ff4 <__lshift>
 8009828:	4606      	mov	r6, r0
 800982a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800982c:	2b00      	cmp	r3, #0
 800982e:	d069      	beq.n	8009904 <_dtoa_r+0x924>
 8009830:	4631      	mov	r1, r6
 8009832:	4658      	mov	r0, fp
 8009834:	f000 fc4a 	bl	800a0cc <__mcmp>
 8009838:	2800      	cmp	r0, #0
 800983a:	da63      	bge.n	8009904 <_dtoa_r+0x924>
 800983c:	2300      	movs	r3, #0
 800983e:	4659      	mov	r1, fp
 8009840:	220a      	movs	r2, #10
 8009842:	4620      	mov	r0, r4
 8009844:	f000 fa26 	bl	8009c94 <__multadd>
 8009848:	9b08      	ldr	r3, [sp, #32]
 800984a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800984e:	4683      	mov	fp, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	f000 818f 	beq.w	8009b74 <_dtoa_r+0xb94>
 8009856:	4639      	mov	r1, r7
 8009858:	2300      	movs	r3, #0
 800985a:	220a      	movs	r2, #10
 800985c:	4620      	mov	r0, r4
 800985e:	f000 fa19 	bl	8009c94 <__multadd>
 8009862:	f1b9 0f00 	cmp.w	r9, #0
 8009866:	4607      	mov	r7, r0
 8009868:	f300 808e 	bgt.w	8009988 <_dtoa_r+0x9a8>
 800986c:	9b05      	ldr	r3, [sp, #20]
 800986e:	2b02      	cmp	r3, #2
 8009870:	dc50      	bgt.n	8009914 <_dtoa_r+0x934>
 8009872:	e089      	b.n	8009988 <_dtoa_r+0x9a8>
 8009874:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800987a:	e75d      	b.n	8009738 <_dtoa_r+0x758>
 800987c:	9b01      	ldr	r3, [sp, #4]
 800987e:	1e5e      	subs	r6, r3, #1
 8009880:	9b06      	ldr	r3, [sp, #24]
 8009882:	42b3      	cmp	r3, r6
 8009884:	bfbf      	itttt	lt
 8009886:	9b06      	ldrlt	r3, [sp, #24]
 8009888:	9606      	strlt	r6, [sp, #24]
 800988a:	1af2      	sublt	r2, r6, r3
 800988c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800988e:	bfb6      	itet	lt
 8009890:	189b      	addlt	r3, r3, r2
 8009892:	1b9e      	subge	r6, r3, r6
 8009894:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009896:	9b01      	ldr	r3, [sp, #4]
 8009898:	bfb8      	it	lt
 800989a:	2600      	movlt	r6, #0
 800989c:	2b00      	cmp	r3, #0
 800989e:	bfb5      	itete	lt
 80098a0:	eba8 0503 	sublt.w	r5, r8, r3
 80098a4:	9b01      	ldrge	r3, [sp, #4]
 80098a6:	2300      	movlt	r3, #0
 80098a8:	4645      	movge	r5, r8
 80098aa:	e747      	b.n	800973c <_dtoa_r+0x75c>
 80098ac:	9e06      	ldr	r6, [sp, #24]
 80098ae:	9f08      	ldr	r7, [sp, #32]
 80098b0:	4645      	mov	r5, r8
 80098b2:	e74c      	b.n	800974e <_dtoa_r+0x76e>
 80098b4:	9a06      	ldr	r2, [sp, #24]
 80098b6:	e775      	b.n	80097a4 <_dtoa_r+0x7c4>
 80098b8:	9b05      	ldr	r3, [sp, #20]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	dc18      	bgt.n	80098f0 <_dtoa_r+0x910>
 80098be:	9b02      	ldr	r3, [sp, #8]
 80098c0:	b9b3      	cbnz	r3, 80098f0 <_dtoa_r+0x910>
 80098c2:	9b03      	ldr	r3, [sp, #12]
 80098c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098c8:	b9a3      	cbnz	r3, 80098f4 <_dtoa_r+0x914>
 80098ca:	9b03      	ldr	r3, [sp, #12]
 80098cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098d0:	0d1b      	lsrs	r3, r3, #20
 80098d2:	051b      	lsls	r3, r3, #20
 80098d4:	b12b      	cbz	r3, 80098e2 <_dtoa_r+0x902>
 80098d6:	9b04      	ldr	r3, [sp, #16]
 80098d8:	3301      	adds	r3, #1
 80098da:	9304      	str	r3, [sp, #16]
 80098dc:	f108 0801 	add.w	r8, r8, #1
 80098e0:	2301      	movs	r3, #1
 80098e2:	9306      	str	r3, [sp, #24]
 80098e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f47f af74 	bne.w	80097d4 <_dtoa_r+0x7f4>
 80098ec:	2001      	movs	r0, #1
 80098ee:	e779      	b.n	80097e4 <_dtoa_r+0x804>
 80098f0:	2300      	movs	r3, #0
 80098f2:	e7f6      	b.n	80098e2 <_dtoa_r+0x902>
 80098f4:	9b02      	ldr	r3, [sp, #8]
 80098f6:	e7f4      	b.n	80098e2 <_dtoa_r+0x902>
 80098f8:	d085      	beq.n	8009806 <_dtoa_r+0x826>
 80098fa:	4618      	mov	r0, r3
 80098fc:	301c      	adds	r0, #28
 80098fe:	e77d      	b.n	80097fc <_dtoa_r+0x81c>
 8009900:	40240000 	.word	0x40240000
 8009904:	9b01      	ldr	r3, [sp, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	dc38      	bgt.n	800997c <_dtoa_r+0x99c>
 800990a:	9b05      	ldr	r3, [sp, #20]
 800990c:	2b02      	cmp	r3, #2
 800990e:	dd35      	ble.n	800997c <_dtoa_r+0x99c>
 8009910:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009914:	f1b9 0f00 	cmp.w	r9, #0
 8009918:	d10d      	bne.n	8009936 <_dtoa_r+0x956>
 800991a:	4631      	mov	r1, r6
 800991c:	464b      	mov	r3, r9
 800991e:	2205      	movs	r2, #5
 8009920:	4620      	mov	r0, r4
 8009922:	f000 f9b7 	bl	8009c94 <__multadd>
 8009926:	4601      	mov	r1, r0
 8009928:	4606      	mov	r6, r0
 800992a:	4658      	mov	r0, fp
 800992c:	f000 fbce 	bl	800a0cc <__mcmp>
 8009930:	2800      	cmp	r0, #0
 8009932:	f73f adbd 	bgt.w	80094b0 <_dtoa_r+0x4d0>
 8009936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009938:	9d00      	ldr	r5, [sp, #0]
 800993a:	ea6f 0a03 	mvn.w	sl, r3
 800993e:	f04f 0800 	mov.w	r8, #0
 8009942:	4631      	mov	r1, r6
 8009944:	4620      	mov	r0, r4
 8009946:	f000 f983 	bl	8009c50 <_Bfree>
 800994a:	2f00      	cmp	r7, #0
 800994c:	f43f aeb4 	beq.w	80096b8 <_dtoa_r+0x6d8>
 8009950:	f1b8 0f00 	cmp.w	r8, #0
 8009954:	d005      	beq.n	8009962 <_dtoa_r+0x982>
 8009956:	45b8      	cmp	r8, r7
 8009958:	d003      	beq.n	8009962 <_dtoa_r+0x982>
 800995a:	4641      	mov	r1, r8
 800995c:	4620      	mov	r0, r4
 800995e:	f000 f977 	bl	8009c50 <_Bfree>
 8009962:	4639      	mov	r1, r7
 8009964:	4620      	mov	r0, r4
 8009966:	f000 f973 	bl	8009c50 <_Bfree>
 800996a:	e6a5      	b.n	80096b8 <_dtoa_r+0x6d8>
 800996c:	2600      	movs	r6, #0
 800996e:	4637      	mov	r7, r6
 8009970:	e7e1      	b.n	8009936 <_dtoa_r+0x956>
 8009972:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009974:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009978:	4637      	mov	r7, r6
 800997a:	e599      	b.n	80094b0 <_dtoa_r+0x4d0>
 800997c:	9b08      	ldr	r3, [sp, #32]
 800997e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 80fd 	beq.w	8009b82 <_dtoa_r+0xba2>
 8009988:	2d00      	cmp	r5, #0
 800998a:	dd05      	ble.n	8009998 <_dtoa_r+0x9b8>
 800998c:	4639      	mov	r1, r7
 800998e:	462a      	mov	r2, r5
 8009990:	4620      	mov	r0, r4
 8009992:	f000 fb2f 	bl	8009ff4 <__lshift>
 8009996:	4607      	mov	r7, r0
 8009998:	9b06      	ldr	r3, [sp, #24]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d05c      	beq.n	8009a58 <_dtoa_r+0xa78>
 800999e:	6879      	ldr	r1, [r7, #4]
 80099a0:	4620      	mov	r0, r4
 80099a2:	f000 f915 	bl	8009bd0 <_Balloc>
 80099a6:	4605      	mov	r5, r0
 80099a8:	b928      	cbnz	r0, 80099b6 <_dtoa_r+0x9d6>
 80099aa:	4b80      	ldr	r3, [pc, #512]	; (8009bac <_dtoa_r+0xbcc>)
 80099ac:	4602      	mov	r2, r0
 80099ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099b2:	f7ff bb2e 	b.w	8009012 <_dtoa_r+0x32>
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	3202      	adds	r2, #2
 80099ba:	0092      	lsls	r2, r2, #2
 80099bc:	f107 010c 	add.w	r1, r7, #12
 80099c0:	300c      	adds	r0, #12
 80099c2:	f7fe fde1 	bl	8008588 <memcpy>
 80099c6:	2201      	movs	r2, #1
 80099c8:	4629      	mov	r1, r5
 80099ca:	4620      	mov	r0, r4
 80099cc:	f000 fb12 	bl	8009ff4 <__lshift>
 80099d0:	9b00      	ldr	r3, [sp, #0]
 80099d2:	3301      	adds	r3, #1
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	9b00      	ldr	r3, [sp, #0]
 80099d8:	444b      	add	r3, r9
 80099da:	9307      	str	r3, [sp, #28]
 80099dc:	9b02      	ldr	r3, [sp, #8]
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	46b8      	mov	r8, r7
 80099e4:	9306      	str	r3, [sp, #24]
 80099e6:	4607      	mov	r7, r0
 80099e8:	9b01      	ldr	r3, [sp, #4]
 80099ea:	4631      	mov	r1, r6
 80099ec:	3b01      	subs	r3, #1
 80099ee:	4658      	mov	r0, fp
 80099f0:	9302      	str	r3, [sp, #8]
 80099f2:	f7ff fa69 	bl	8008ec8 <quorem>
 80099f6:	4603      	mov	r3, r0
 80099f8:	3330      	adds	r3, #48	; 0x30
 80099fa:	9004      	str	r0, [sp, #16]
 80099fc:	4641      	mov	r1, r8
 80099fe:	4658      	mov	r0, fp
 8009a00:	9308      	str	r3, [sp, #32]
 8009a02:	f000 fb63 	bl	800a0cc <__mcmp>
 8009a06:	463a      	mov	r2, r7
 8009a08:	4681      	mov	r9, r0
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f000 fb79 	bl	800a104 <__mdiff>
 8009a12:	68c2      	ldr	r2, [r0, #12]
 8009a14:	9b08      	ldr	r3, [sp, #32]
 8009a16:	4605      	mov	r5, r0
 8009a18:	bb02      	cbnz	r2, 8009a5c <_dtoa_r+0xa7c>
 8009a1a:	4601      	mov	r1, r0
 8009a1c:	4658      	mov	r0, fp
 8009a1e:	f000 fb55 	bl	800a0cc <__mcmp>
 8009a22:	9b08      	ldr	r3, [sp, #32]
 8009a24:	4602      	mov	r2, r0
 8009a26:	4629      	mov	r1, r5
 8009a28:	4620      	mov	r0, r4
 8009a2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009a2e:	f000 f90f 	bl	8009c50 <_Bfree>
 8009a32:	9b05      	ldr	r3, [sp, #20]
 8009a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a36:	9d01      	ldr	r5, [sp, #4]
 8009a38:	ea43 0102 	orr.w	r1, r3, r2
 8009a3c:	9b06      	ldr	r3, [sp, #24]
 8009a3e:	430b      	orrs	r3, r1
 8009a40:	9b08      	ldr	r3, [sp, #32]
 8009a42:	d10d      	bne.n	8009a60 <_dtoa_r+0xa80>
 8009a44:	2b39      	cmp	r3, #57	; 0x39
 8009a46:	d029      	beq.n	8009a9c <_dtoa_r+0xabc>
 8009a48:	f1b9 0f00 	cmp.w	r9, #0
 8009a4c:	dd01      	ble.n	8009a52 <_dtoa_r+0xa72>
 8009a4e:	9b04      	ldr	r3, [sp, #16]
 8009a50:	3331      	adds	r3, #49	; 0x31
 8009a52:	9a02      	ldr	r2, [sp, #8]
 8009a54:	7013      	strb	r3, [r2, #0]
 8009a56:	e774      	b.n	8009942 <_dtoa_r+0x962>
 8009a58:	4638      	mov	r0, r7
 8009a5a:	e7b9      	b.n	80099d0 <_dtoa_r+0x9f0>
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	e7e2      	b.n	8009a26 <_dtoa_r+0xa46>
 8009a60:	f1b9 0f00 	cmp.w	r9, #0
 8009a64:	db06      	blt.n	8009a74 <_dtoa_r+0xa94>
 8009a66:	9905      	ldr	r1, [sp, #20]
 8009a68:	ea41 0909 	orr.w	r9, r1, r9
 8009a6c:	9906      	ldr	r1, [sp, #24]
 8009a6e:	ea59 0101 	orrs.w	r1, r9, r1
 8009a72:	d120      	bne.n	8009ab6 <_dtoa_r+0xad6>
 8009a74:	2a00      	cmp	r2, #0
 8009a76:	ddec      	ble.n	8009a52 <_dtoa_r+0xa72>
 8009a78:	4659      	mov	r1, fp
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	9301      	str	r3, [sp, #4]
 8009a80:	f000 fab8 	bl	8009ff4 <__lshift>
 8009a84:	4631      	mov	r1, r6
 8009a86:	4683      	mov	fp, r0
 8009a88:	f000 fb20 	bl	800a0cc <__mcmp>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	9b01      	ldr	r3, [sp, #4]
 8009a90:	dc02      	bgt.n	8009a98 <_dtoa_r+0xab8>
 8009a92:	d1de      	bne.n	8009a52 <_dtoa_r+0xa72>
 8009a94:	07da      	lsls	r2, r3, #31
 8009a96:	d5dc      	bpl.n	8009a52 <_dtoa_r+0xa72>
 8009a98:	2b39      	cmp	r3, #57	; 0x39
 8009a9a:	d1d8      	bne.n	8009a4e <_dtoa_r+0xa6e>
 8009a9c:	9a02      	ldr	r2, [sp, #8]
 8009a9e:	2339      	movs	r3, #57	; 0x39
 8009aa0:	7013      	strb	r3, [r2, #0]
 8009aa2:	462b      	mov	r3, r5
 8009aa4:	461d      	mov	r5, r3
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009aac:	2a39      	cmp	r2, #57	; 0x39
 8009aae:	d050      	beq.n	8009b52 <_dtoa_r+0xb72>
 8009ab0:	3201      	adds	r2, #1
 8009ab2:	701a      	strb	r2, [r3, #0]
 8009ab4:	e745      	b.n	8009942 <_dtoa_r+0x962>
 8009ab6:	2a00      	cmp	r2, #0
 8009ab8:	dd03      	ble.n	8009ac2 <_dtoa_r+0xae2>
 8009aba:	2b39      	cmp	r3, #57	; 0x39
 8009abc:	d0ee      	beq.n	8009a9c <_dtoa_r+0xabc>
 8009abe:	3301      	adds	r3, #1
 8009ac0:	e7c7      	b.n	8009a52 <_dtoa_r+0xa72>
 8009ac2:	9a01      	ldr	r2, [sp, #4]
 8009ac4:	9907      	ldr	r1, [sp, #28]
 8009ac6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009aca:	428a      	cmp	r2, r1
 8009acc:	d02a      	beq.n	8009b24 <_dtoa_r+0xb44>
 8009ace:	4659      	mov	r1, fp
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	220a      	movs	r2, #10
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f000 f8dd 	bl	8009c94 <__multadd>
 8009ada:	45b8      	cmp	r8, r7
 8009adc:	4683      	mov	fp, r0
 8009ade:	f04f 0300 	mov.w	r3, #0
 8009ae2:	f04f 020a 	mov.w	r2, #10
 8009ae6:	4641      	mov	r1, r8
 8009ae8:	4620      	mov	r0, r4
 8009aea:	d107      	bne.n	8009afc <_dtoa_r+0xb1c>
 8009aec:	f000 f8d2 	bl	8009c94 <__multadd>
 8009af0:	4680      	mov	r8, r0
 8009af2:	4607      	mov	r7, r0
 8009af4:	9b01      	ldr	r3, [sp, #4]
 8009af6:	3301      	adds	r3, #1
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	e775      	b.n	80099e8 <_dtoa_r+0xa08>
 8009afc:	f000 f8ca 	bl	8009c94 <__multadd>
 8009b00:	4639      	mov	r1, r7
 8009b02:	4680      	mov	r8, r0
 8009b04:	2300      	movs	r3, #0
 8009b06:	220a      	movs	r2, #10
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 f8c3 	bl	8009c94 <__multadd>
 8009b0e:	4607      	mov	r7, r0
 8009b10:	e7f0      	b.n	8009af4 <_dtoa_r+0xb14>
 8009b12:	f1b9 0f00 	cmp.w	r9, #0
 8009b16:	9a00      	ldr	r2, [sp, #0]
 8009b18:	bfcc      	ite	gt
 8009b1a:	464d      	movgt	r5, r9
 8009b1c:	2501      	movle	r5, #1
 8009b1e:	4415      	add	r5, r2
 8009b20:	f04f 0800 	mov.w	r8, #0
 8009b24:	4659      	mov	r1, fp
 8009b26:	2201      	movs	r2, #1
 8009b28:	4620      	mov	r0, r4
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	f000 fa62 	bl	8009ff4 <__lshift>
 8009b30:	4631      	mov	r1, r6
 8009b32:	4683      	mov	fp, r0
 8009b34:	f000 faca 	bl	800a0cc <__mcmp>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	dcb2      	bgt.n	8009aa2 <_dtoa_r+0xac2>
 8009b3c:	d102      	bne.n	8009b44 <_dtoa_r+0xb64>
 8009b3e:	9b01      	ldr	r3, [sp, #4]
 8009b40:	07db      	lsls	r3, r3, #31
 8009b42:	d4ae      	bmi.n	8009aa2 <_dtoa_r+0xac2>
 8009b44:	462b      	mov	r3, r5
 8009b46:	461d      	mov	r5, r3
 8009b48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b4c:	2a30      	cmp	r2, #48	; 0x30
 8009b4e:	d0fa      	beq.n	8009b46 <_dtoa_r+0xb66>
 8009b50:	e6f7      	b.n	8009942 <_dtoa_r+0x962>
 8009b52:	9a00      	ldr	r2, [sp, #0]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d1a5      	bne.n	8009aa4 <_dtoa_r+0xac4>
 8009b58:	f10a 0a01 	add.w	sl, sl, #1
 8009b5c:	2331      	movs	r3, #49	; 0x31
 8009b5e:	e779      	b.n	8009a54 <_dtoa_r+0xa74>
 8009b60:	4b13      	ldr	r3, [pc, #76]	; (8009bb0 <_dtoa_r+0xbd0>)
 8009b62:	f7ff baaf 	b.w	80090c4 <_dtoa_r+0xe4>
 8009b66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f47f aa86 	bne.w	800907a <_dtoa_r+0x9a>
 8009b6e:	4b11      	ldr	r3, [pc, #68]	; (8009bb4 <_dtoa_r+0xbd4>)
 8009b70:	f7ff baa8 	b.w	80090c4 <_dtoa_r+0xe4>
 8009b74:	f1b9 0f00 	cmp.w	r9, #0
 8009b78:	dc03      	bgt.n	8009b82 <_dtoa_r+0xba2>
 8009b7a:	9b05      	ldr	r3, [sp, #20]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	f73f aec9 	bgt.w	8009914 <_dtoa_r+0x934>
 8009b82:	9d00      	ldr	r5, [sp, #0]
 8009b84:	4631      	mov	r1, r6
 8009b86:	4658      	mov	r0, fp
 8009b88:	f7ff f99e 	bl	8008ec8 <quorem>
 8009b8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009b90:	f805 3b01 	strb.w	r3, [r5], #1
 8009b94:	9a00      	ldr	r2, [sp, #0]
 8009b96:	1aaa      	subs	r2, r5, r2
 8009b98:	4591      	cmp	r9, r2
 8009b9a:	ddba      	ble.n	8009b12 <_dtoa_r+0xb32>
 8009b9c:	4659      	mov	r1, fp
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	220a      	movs	r2, #10
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f000 f876 	bl	8009c94 <__multadd>
 8009ba8:	4683      	mov	fp, r0
 8009baa:	e7eb      	b.n	8009b84 <_dtoa_r+0xba4>
 8009bac:	0800b863 	.word	0x0800b863
 8009bb0:	0800b7bc 	.word	0x0800b7bc
 8009bb4:	0800b7e0 	.word	0x0800b7e0

08009bb8 <_localeconv_r>:
 8009bb8:	4800      	ldr	r0, [pc, #0]	; (8009bbc <_localeconv_r+0x4>)
 8009bba:	4770      	bx	lr
 8009bbc:	200007b8 	.word	0x200007b8

08009bc0 <malloc>:
 8009bc0:	4b02      	ldr	r3, [pc, #8]	; (8009bcc <malloc+0xc>)
 8009bc2:	4601      	mov	r1, r0
 8009bc4:	6818      	ldr	r0, [r3, #0]
 8009bc6:	f000 bbe1 	b.w	800a38c <_malloc_r>
 8009bca:	bf00      	nop
 8009bcc:	20000664 	.word	0x20000664

08009bd0 <_Balloc>:
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	460d      	mov	r5, r1
 8009bd8:	b976      	cbnz	r6, 8009bf8 <_Balloc+0x28>
 8009bda:	2010      	movs	r0, #16
 8009bdc:	f7ff fff0 	bl	8009bc0 <malloc>
 8009be0:	4602      	mov	r2, r0
 8009be2:	6260      	str	r0, [r4, #36]	; 0x24
 8009be4:	b920      	cbnz	r0, 8009bf0 <_Balloc+0x20>
 8009be6:	4b18      	ldr	r3, [pc, #96]	; (8009c48 <_Balloc+0x78>)
 8009be8:	4818      	ldr	r0, [pc, #96]	; (8009c4c <_Balloc+0x7c>)
 8009bea:	2166      	movs	r1, #102	; 0x66
 8009bec:	f000 fd94 	bl	800a718 <__assert_func>
 8009bf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bf4:	6006      	str	r6, [r0, #0]
 8009bf6:	60c6      	str	r6, [r0, #12]
 8009bf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009bfa:	68f3      	ldr	r3, [r6, #12]
 8009bfc:	b183      	cbz	r3, 8009c20 <_Balloc+0x50>
 8009bfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c06:	b9b8      	cbnz	r0, 8009c38 <_Balloc+0x68>
 8009c08:	2101      	movs	r1, #1
 8009c0a:	fa01 f605 	lsl.w	r6, r1, r5
 8009c0e:	1d72      	adds	r2, r6, #5
 8009c10:	0092      	lsls	r2, r2, #2
 8009c12:	4620      	mov	r0, r4
 8009c14:	f000 fb5a 	bl	800a2cc <_calloc_r>
 8009c18:	b160      	cbz	r0, 8009c34 <_Balloc+0x64>
 8009c1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c1e:	e00e      	b.n	8009c3e <_Balloc+0x6e>
 8009c20:	2221      	movs	r2, #33	; 0x21
 8009c22:	2104      	movs	r1, #4
 8009c24:	4620      	mov	r0, r4
 8009c26:	f000 fb51 	bl	800a2cc <_calloc_r>
 8009c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c2c:	60f0      	str	r0, [r6, #12]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e4      	bne.n	8009bfe <_Balloc+0x2e>
 8009c34:	2000      	movs	r0, #0
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
 8009c38:	6802      	ldr	r2, [r0, #0]
 8009c3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c44:	e7f7      	b.n	8009c36 <_Balloc+0x66>
 8009c46:	bf00      	nop
 8009c48:	0800b7ed 	.word	0x0800b7ed
 8009c4c:	0800b874 	.word	0x0800b874

08009c50 <_Bfree>:
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c54:	4605      	mov	r5, r0
 8009c56:	460c      	mov	r4, r1
 8009c58:	b976      	cbnz	r6, 8009c78 <_Bfree+0x28>
 8009c5a:	2010      	movs	r0, #16
 8009c5c:	f7ff ffb0 	bl	8009bc0 <malloc>
 8009c60:	4602      	mov	r2, r0
 8009c62:	6268      	str	r0, [r5, #36]	; 0x24
 8009c64:	b920      	cbnz	r0, 8009c70 <_Bfree+0x20>
 8009c66:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <_Bfree+0x3c>)
 8009c68:	4809      	ldr	r0, [pc, #36]	; (8009c90 <_Bfree+0x40>)
 8009c6a:	218a      	movs	r1, #138	; 0x8a
 8009c6c:	f000 fd54 	bl	800a718 <__assert_func>
 8009c70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c74:	6006      	str	r6, [r0, #0]
 8009c76:	60c6      	str	r6, [r0, #12]
 8009c78:	b13c      	cbz	r4, 8009c8a <_Bfree+0x3a>
 8009c7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c7c:	6862      	ldr	r2, [r4, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c84:	6021      	str	r1, [r4, #0]
 8009c86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c8a:	bd70      	pop	{r4, r5, r6, pc}
 8009c8c:	0800b7ed 	.word	0x0800b7ed
 8009c90:	0800b874 	.word	0x0800b874

08009c94 <__multadd>:
 8009c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c98:	690e      	ldr	r6, [r1, #16]
 8009c9a:	4607      	mov	r7, r0
 8009c9c:	4698      	mov	r8, r3
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	f101 0014 	add.w	r0, r1, #20
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	6805      	ldr	r5, [r0, #0]
 8009ca8:	b2a9      	uxth	r1, r5
 8009caa:	fb02 8101 	mla	r1, r2, r1, r8
 8009cae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009cb2:	0c2d      	lsrs	r5, r5, #16
 8009cb4:	fb02 c505 	mla	r5, r2, r5, ip
 8009cb8:	b289      	uxth	r1, r1
 8009cba:	3301      	adds	r3, #1
 8009cbc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009cc0:	429e      	cmp	r6, r3
 8009cc2:	f840 1b04 	str.w	r1, [r0], #4
 8009cc6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009cca:	dcec      	bgt.n	8009ca6 <__multadd+0x12>
 8009ccc:	f1b8 0f00 	cmp.w	r8, #0
 8009cd0:	d022      	beq.n	8009d18 <__multadd+0x84>
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	42b3      	cmp	r3, r6
 8009cd6:	dc19      	bgt.n	8009d0c <__multadd+0x78>
 8009cd8:	6861      	ldr	r1, [r4, #4]
 8009cda:	4638      	mov	r0, r7
 8009cdc:	3101      	adds	r1, #1
 8009cde:	f7ff ff77 	bl	8009bd0 <_Balloc>
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	b928      	cbnz	r0, 8009cf2 <__multadd+0x5e>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	4b0d      	ldr	r3, [pc, #52]	; (8009d20 <__multadd+0x8c>)
 8009cea:	480e      	ldr	r0, [pc, #56]	; (8009d24 <__multadd+0x90>)
 8009cec:	21b5      	movs	r1, #181	; 0xb5
 8009cee:	f000 fd13 	bl	800a718 <__assert_func>
 8009cf2:	6922      	ldr	r2, [r4, #16]
 8009cf4:	3202      	adds	r2, #2
 8009cf6:	f104 010c 	add.w	r1, r4, #12
 8009cfa:	0092      	lsls	r2, r2, #2
 8009cfc:	300c      	adds	r0, #12
 8009cfe:	f7fe fc43 	bl	8008588 <memcpy>
 8009d02:	4621      	mov	r1, r4
 8009d04:	4638      	mov	r0, r7
 8009d06:	f7ff ffa3 	bl	8009c50 <_Bfree>
 8009d0a:	462c      	mov	r4, r5
 8009d0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009d10:	3601      	adds	r6, #1
 8009d12:	f8c3 8014 	str.w	r8, [r3, #20]
 8009d16:	6126      	str	r6, [r4, #16]
 8009d18:	4620      	mov	r0, r4
 8009d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d1e:	bf00      	nop
 8009d20:	0800b863 	.word	0x0800b863
 8009d24:	0800b874 	.word	0x0800b874

08009d28 <__hi0bits>:
 8009d28:	0c03      	lsrs	r3, r0, #16
 8009d2a:	041b      	lsls	r3, r3, #16
 8009d2c:	b9d3      	cbnz	r3, 8009d64 <__hi0bits+0x3c>
 8009d2e:	0400      	lsls	r0, r0, #16
 8009d30:	2310      	movs	r3, #16
 8009d32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d36:	bf04      	itt	eq
 8009d38:	0200      	lsleq	r0, r0, #8
 8009d3a:	3308      	addeq	r3, #8
 8009d3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d40:	bf04      	itt	eq
 8009d42:	0100      	lsleq	r0, r0, #4
 8009d44:	3304      	addeq	r3, #4
 8009d46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d4a:	bf04      	itt	eq
 8009d4c:	0080      	lsleq	r0, r0, #2
 8009d4e:	3302      	addeq	r3, #2
 8009d50:	2800      	cmp	r0, #0
 8009d52:	db05      	blt.n	8009d60 <__hi0bits+0x38>
 8009d54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d58:	f103 0301 	add.w	r3, r3, #1
 8009d5c:	bf08      	it	eq
 8009d5e:	2320      	moveq	r3, #32
 8009d60:	4618      	mov	r0, r3
 8009d62:	4770      	bx	lr
 8009d64:	2300      	movs	r3, #0
 8009d66:	e7e4      	b.n	8009d32 <__hi0bits+0xa>

08009d68 <__lo0bits>:
 8009d68:	6803      	ldr	r3, [r0, #0]
 8009d6a:	f013 0207 	ands.w	r2, r3, #7
 8009d6e:	4601      	mov	r1, r0
 8009d70:	d00b      	beq.n	8009d8a <__lo0bits+0x22>
 8009d72:	07da      	lsls	r2, r3, #31
 8009d74:	d424      	bmi.n	8009dc0 <__lo0bits+0x58>
 8009d76:	0798      	lsls	r0, r3, #30
 8009d78:	bf49      	itett	mi
 8009d7a:	085b      	lsrmi	r3, r3, #1
 8009d7c:	089b      	lsrpl	r3, r3, #2
 8009d7e:	2001      	movmi	r0, #1
 8009d80:	600b      	strmi	r3, [r1, #0]
 8009d82:	bf5c      	itt	pl
 8009d84:	600b      	strpl	r3, [r1, #0]
 8009d86:	2002      	movpl	r0, #2
 8009d88:	4770      	bx	lr
 8009d8a:	b298      	uxth	r0, r3
 8009d8c:	b9b0      	cbnz	r0, 8009dbc <__lo0bits+0x54>
 8009d8e:	0c1b      	lsrs	r3, r3, #16
 8009d90:	2010      	movs	r0, #16
 8009d92:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009d96:	bf04      	itt	eq
 8009d98:	0a1b      	lsreq	r3, r3, #8
 8009d9a:	3008      	addeq	r0, #8
 8009d9c:	071a      	lsls	r2, r3, #28
 8009d9e:	bf04      	itt	eq
 8009da0:	091b      	lsreq	r3, r3, #4
 8009da2:	3004      	addeq	r0, #4
 8009da4:	079a      	lsls	r2, r3, #30
 8009da6:	bf04      	itt	eq
 8009da8:	089b      	lsreq	r3, r3, #2
 8009daa:	3002      	addeq	r0, #2
 8009dac:	07da      	lsls	r2, r3, #31
 8009dae:	d403      	bmi.n	8009db8 <__lo0bits+0x50>
 8009db0:	085b      	lsrs	r3, r3, #1
 8009db2:	f100 0001 	add.w	r0, r0, #1
 8009db6:	d005      	beq.n	8009dc4 <__lo0bits+0x5c>
 8009db8:	600b      	str	r3, [r1, #0]
 8009dba:	4770      	bx	lr
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	e7e8      	b.n	8009d92 <__lo0bits+0x2a>
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	4770      	bx	lr
 8009dc4:	2020      	movs	r0, #32
 8009dc6:	4770      	bx	lr

08009dc8 <__i2b>:
 8009dc8:	b510      	push	{r4, lr}
 8009dca:	460c      	mov	r4, r1
 8009dcc:	2101      	movs	r1, #1
 8009dce:	f7ff feff 	bl	8009bd0 <_Balloc>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	b928      	cbnz	r0, 8009de2 <__i2b+0x1a>
 8009dd6:	4b05      	ldr	r3, [pc, #20]	; (8009dec <__i2b+0x24>)
 8009dd8:	4805      	ldr	r0, [pc, #20]	; (8009df0 <__i2b+0x28>)
 8009dda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009dde:	f000 fc9b 	bl	800a718 <__assert_func>
 8009de2:	2301      	movs	r3, #1
 8009de4:	6144      	str	r4, [r0, #20]
 8009de6:	6103      	str	r3, [r0, #16]
 8009de8:	bd10      	pop	{r4, pc}
 8009dea:	bf00      	nop
 8009dec:	0800b863 	.word	0x0800b863
 8009df0:	0800b874 	.word	0x0800b874

08009df4 <__multiply>:
 8009df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df8:	4614      	mov	r4, r2
 8009dfa:	690a      	ldr	r2, [r1, #16]
 8009dfc:	6923      	ldr	r3, [r4, #16]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	bfb8      	it	lt
 8009e02:	460b      	movlt	r3, r1
 8009e04:	460d      	mov	r5, r1
 8009e06:	bfbc      	itt	lt
 8009e08:	4625      	movlt	r5, r4
 8009e0a:	461c      	movlt	r4, r3
 8009e0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009e10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009e14:	68ab      	ldr	r3, [r5, #8]
 8009e16:	6869      	ldr	r1, [r5, #4]
 8009e18:	eb0a 0709 	add.w	r7, sl, r9
 8009e1c:	42bb      	cmp	r3, r7
 8009e1e:	b085      	sub	sp, #20
 8009e20:	bfb8      	it	lt
 8009e22:	3101      	addlt	r1, #1
 8009e24:	f7ff fed4 	bl	8009bd0 <_Balloc>
 8009e28:	b930      	cbnz	r0, 8009e38 <__multiply+0x44>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	4b42      	ldr	r3, [pc, #264]	; (8009f38 <__multiply+0x144>)
 8009e2e:	4843      	ldr	r0, [pc, #268]	; (8009f3c <__multiply+0x148>)
 8009e30:	f240 115d 	movw	r1, #349	; 0x15d
 8009e34:	f000 fc70 	bl	800a718 <__assert_func>
 8009e38:	f100 0614 	add.w	r6, r0, #20
 8009e3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009e40:	4633      	mov	r3, r6
 8009e42:	2200      	movs	r2, #0
 8009e44:	4543      	cmp	r3, r8
 8009e46:	d31e      	bcc.n	8009e86 <__multiply+0x92>
 8009e48:	f105 0c14 	add.w	ip, r5, #20
 8009e4c:	f104 0314 	add.w	r3, r4, #20
 8009e50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009e54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009e58:	9202      	str	r2, [sp, #8]
 8009e5a:	ebac 0205 	sub.w	r2, ip, r5
 8009e5e:	3a15      	subs	r2, #21
 8009e60:	f022 0203 	bic.w	r2, r2, #3
 8009e64:	3204      	adds	r2, #4
 8009e66:	f105 0115 	add.w	r1, r5, #21
 8009e6a:	458c      	cmp	ip, r1
 8009e6c:	bf38      	it	cc
 8009e6e:	2204      	movcc	r2, #4
 8009e70:	9201      	str	r2, [sp, #4]
 8009e72:	9a02      	ldr	r2, [sp, #8]
 8009e74:	9303      	str	r3, [sp, #12]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d808      	bhi.n	8009e8c <__multiply+0x98>
 8009e7a:	2f00      	cmp	r7, #0
 8009e7c:	dc55      	bgt.n	8009f2a <__multiply+0x136>
 8009e7e:	6107      	str	r7, [r0, #16]
 8009e80:	b005      	add	sp, #20
 8009e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e86:	f843 2b04 	str.w	r2, [r3], #4
 8009e8a:	e7db      	b.n	8009e44 <__multiply+0x50>
 8009e8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e90:	f1ba 0f00 	cmp.w	sl, #0
 8009e94:	d020      	beq.n	8009ed8 <__multiply+0xe4>
 8009e96:	f105 0e14 	add.w	lr, r5, #20
 8009e9a:	46b1      	mov	r9, r6
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009ea2:	f8d9 b000 	ldr.w	fp, [r9]
 8009ea6:	b2a1      	uxth	r1, r4
 8009ea8:	fa1f fb8b 	uxth.w	fp, fp
 8009eac:	fb0a b101 	mla	r1, sl, r1, fp
 8009eb0:	4411      	add	r1, r2
 8009eb2:	f8d9 2000 	ldr.w	r2, [r9]
 8009eb6:	0c24      	lsrs	r4, r4, #16
 8009eb8:	0c12      	lsrs	r2, r2, #16
 8009eba:	fb0a 2404 	mla	r4, sl, r4, r2
 8009ebe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009ec2:	b289      	uxth	r1, r1
 8009ec4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ec8:	45f4      	cmp	ip, lr
 8009eca:	f849 1b04 	str.w	r1, [r9], #4
 8009ece:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009ed2:	d8e4      	bhi.n	8009e9e <__multiply+0xaa>
 8009ed4:	9901      	ldr	r1, [sp, #4]
 8009ed6:	5072      	str	r2, [r6, r1]
 8009ed8:	9a03      	ldr	r2, [sp, #12]
 8009eda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	f1b9 0f00 	cmp.w	r9, #0
 8009ee4:	d01f      	beq.n	8009f26 <__multiply+0x132>
 8009ee6:	6834      	ldr	r4, [r6, #0]
 8009ee8:	f105 0114 	add.w	r1, r5, #20
 8009eec:	46b6      	mov	lr, r6
 8009eee:	f04f 0a00 	mov.w	sl, #0
 8009ef2:	880a      	ldrh	r2, [r1, #0]
 8009ef4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009ef8:	fb09 b202 	mla	r2, r9, r2, fp
 8009efc:	4492      	add	sl, r2
 8009efe:	b2a4      	uxth	r4, r4
 8009f00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009f04:	f84e 4b04 	str.w	r4, [lr], #4
 8009f08:	f851 4b04 	ldr.w	r4, [r1], #4
 8009f0c:	f8be 2000 	ldrh.w	r2, [lr]
 8009f10:	0c24      	lsrs	r4, r4, #16
 8009f12:	fb09 2404 	mla	r4, r9, r4, r2
 8009f16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009f1a:	458c      	cmp	ip, r1
 8009f1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009f20:	d8e7      	bhi.n	8009ef2 <__multiply+0xfe>
 8009f22:	9a01      	ldr	r2, [sp, #4]
 8009f24:	50b4      	str	r4, [r6, r2]
 8009f26:	3604      	adds	r6, #4
 8009f28:	e7a3      	b.n	8009e72 <__multiply+0x7e>
 8009f2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1a5      	bne.n	8009e7e <__multiply+0x8a>
 8009f32:	3f01      	subs	r7, #1
 8009f34:	e7a1      	b.n	8009e7a <__multiply+0x86>
 8009f36:	bf00      	nop
 8009f38:	0800b863 	.word	0x0800b863
 8009f3c:	0800b874 	.word	0x0800b874

08009f40 <__pow5mult>:
 8009f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f44:	4615      	mov	r5, r2
 8009f46:	f012 0203 	ands.w	r2, r2, #3
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	460f      	mov	r7, r1
 8009f4e:	d007      	beq.n	8009f60 <__pow5mult+0x20>
 8009f50:	4c25      	ldr	r4, [pc, #148]	; (8009fe8 <__pow5mult+0xa8>)
 8009f52:	3a01      	subs	r2, #1
 8009f54:	2300      	movs	r3, #0
 8009f56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f5a:	f7ff fe9b 	bl	8009c94 <__multadd>
 8009f5e:	4607      	mov	r7, r0
 8009f60:	10ad      	asrs	r5, r5, #2
 8009f62:	d03d      	beq.n	8009fe0 <__pow5mult+0xa0>
 8009f64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f66:	b97c      	cbnz	r4, 8009f88 <__pow5mult+0x48>
 8009f68:	2010      	movs	r0, #16
 8009f6a:	f7ff fe29 	bl	8009bc0 <malloc>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	6270      	str	r0, [r6, #36]	; 0x24
 8009f72:	b928      	cbnz	r0, 8009f80 <__pow5mult+0x40>
 8009f74:	4b1d      	ldr	r3, [pc, #116]	; (8009fec <__pow5mult+0xac>)
 8009f76:	481e      	ldr	r0, [pc, #120]	; (8009ff0 <__pow5mult+0xb0>)
 8009f78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f7c:	f000 fbcc 	bl	800a718 <__assert_func>
 8009f80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f84:	6004      	str	r4, [r0, #0]
 8009f86:	60c4      	str	r4, [r0, #12]
 8009f88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f90:	b94c      	cbnz	r4, 8009fa6 <__pow5mult+0x66>
 8009f92:	f240 2171 	movw	r1, #625	; 0x271
 8009f96:	4630      	mov	r0, r6
 8009f98:	f7ff ff16 	bl	8009dc8 <__i2b>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	f04f 0900 	mov.w	r9, #0
 8009faa:	07eb      	lsls	r3, r5, #31
 8009fac:	d50a      	bpl.n	8009fc4 <__pow5mult+0x84>
 8009fae:	4639      	mov	r1, r7
 8009fb0:	4622      	mov	r2, r4
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f7ff ff1e 	bl	8009df4 <__multiply>
 8009fb8:	4639      	mov	r1, r7
 8009fba:	4680      	mov	r8, r0
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f7ff fe47 	bl	8009c50 <_Bfree>
 8009fc2:	4647      	mov	r7, r8
 8009fc4:	106d      	asrs	r5, r5, #1
 8009fc6:	d00b      	beq.n	8009fe0 <__pow5mult+0xa0>
 8009fc8:	6820      	ldr	r0, [r4, #0]
 8009fca:	b938      	cbnz	r0, 8009fdc <__pow5mult+0x9c>
 8009fcc:	4622      	mov	r2, r4
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7ff ff0f 	bl	8009df4 <__multiply>
 8009fd6:	6020      	str	r0, [r4, #0]
 8009fd8:	f8c0 9000 	str.w	r9, [r0]
 8009fdc:	4604      	mov	r4, r0
 8009fde:	e7e4      	b.n	8009faa <__pow5mult+0x6a>
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fe6:	bf00      	nop
 8009fe8:	0800b9c8 	.word	0x0800b9c8
 8009fec:	0800b7ed 	.word	0x0800b7ed
 8009ff0:	0800b874 	.word	0x0800b874

08009ff4 <__lshift>:
 8009ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	6849      	ldr	r1, [r1, #4]
 8009ffc:	6923      	ldr	r3, [r4, #16]
 8009ffe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a002:	68a3      	ldr	r3, [r4, #8]
 800a004:	4607      	mov	r7, r0
 800a006:	4691      	mov	r9, r2
 800a008:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a00c:	f108 0601 	add.w	r6, r8, #1
 800a010:	42b3      	cmp	r3, r6
 800a012:	db0b      	blt.n	800a02c <__lshift+0x38>
 800a014:	4638      	mov	r0, r7
 800a016:	f7ff fddb 	bl	8009bd0 <_Balloc>
 800a01a:	4605      	mov	r5, r0
 800a01c:	b948      	cbnz	r0, 800a032 <__lshift+0x3e>
 800a01e:	4602      	mov	r2, r0
 800a020:	4b28      	ldr	r3, [pc, #160]	; (800a0c4 <__lshift+0xd0>)
 800a022:	4829      	ldr	r0, [pc, #164]	; (800a0c8 <__lshift+0xd4>)
 800a024:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a028:	f000 fb76 	bl	800a718 <__assert_func>
 800a02c:	3101      	adds	r1, #1
 800a02e:	005b      	lsls	r3, r3, #1
 800a030:	e7ee      	b.n	800a010 <__lshift+0x1c>
 800a032:	2300      	movs	r3, #0
 800a034:	f100 0114 	add.w	r1, r0, #20
 800a038:	f100 0210 	add.w	r2, r0, #16
 800a03c:	4618      	mov	r0, r3
 800a03e:	4553      	cmp	r3, sl
 800a040:	db33      	blt.n	800a0aa <__lshift+0xb6>
 800a042:	6920      	ldr	r0, [r4, #16]
 800a044:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a048:	f104 0314 	add.w	r3, r4, #20
 800a04c:	f019 091f 	ands.w	r9, r9, #31
 800a050:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a054:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a058:	d02b      	beq.n	800a0b2 <__lshift+0xbe>
 800a05a:	f1c9 0e20 	rsb	lr, r9, #32
 800a05e:	468a      	mov	sl, r1
 800a060:	2200      	movs	r2, #0
 800a062:	6818      	ldr	r0, [r3, #0]
 800a064:	fa00 f009 	lsl.w	r0, r0, r9
 800a068:	4302      	orrs	r2, r0
 800a06a:	f84a 2b04 	str.w	r2, [sl], #4
 800a06e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a072:	459c      	cmp	ip, r3
 800a074:	fa22 f20e 	lsr.w	r2, r2, lr
 800a078:	d8f3      	bhi.n	800a062 <__lshift+0x6e>
 800a07a:	ebac 0304 	sub.w	r3, ip, r4
 800a07e:	3b15      	subs	r3, #21
 800a080:	f023 0303 	bic.w	r3, r3, #3
 800a084:	3304      	adds	r3, #4
 800a086:	f104 0015 	add.w	r0, r4, #21
 800a08a:	4584      	cmp	ip, r0
 800a08c:	bf38      	it	cc
 800a08e:	2304      	movcc	r3, #4
 800a090:	50ca      	str	r2, [r1, r3]
 800a092:	b10a      	cbz	r2, 800a098 <__lshift+0xa4>
 800a094:	f108 0602 	add.w	r6, r8, #2
 800a098:	3e01      	subs	r6, #1
 800a09a:	4638      	mov	r0, r7
 800a09c:	612e      	str	r6, [r5, #16]
 800a09e:	4621      	mov	r1, r4
 800a0a0:	f7ff fdd6 	bl	8009c50 <_Bfree>
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	e7c5      	b.n	800a03e <__lshift+0x4a>
 800a0b2:	3904      	subs	r1, #4
 800a0b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0bc:	459c      	cmp	ip, r3
 800a0be:	d8f9      	bhi.n	800a0b4 <__lshift+0xc0>
 800a0c0:	e7ea      	b.n	800a098 <__lshift+0xa4>
 800a0c2:	bf00      	nop
 800a0c4:	0800b863 	.word	0x0800b863
 800a0c8:	0800b874 	.word	0x0800b874

0800a0cc <__mcmp>:
 800a0cc:	b530      	push	{r4, r5, lr}
 800a0ce:	6902      	ldr	r2, [r0, #16]
 800a0d0:	690c      	ldr	r4, [r1, #16]
 800a0d2:	1b12      	subs	r2, r2, r4
 800a0d4:	d10e      	bne.n	800a0f4 <__mcmp+0x28>
 800a0d6:	f100 0314 	add.w	r3, r0, #20
 800a0da:	3114      	adds	r1, #20
 800a0dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0ec:	42a5      	cmp	r5, r4
 800a0ee:	d003      	beq.n	800a0f8 <__mcmp+0x2c>
 800a0f0:	d305      	bcc.n	800a0fe <__mcmp+0x32>
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	bd30      	pop	{r4, r5, pc}
 800a0f8:	4283      	cmp	r3, r0
 800a0fa:	d3f3      	bcc.n	800a0e4 <__mcmp+0x18>
 800a0fc:	e7fa      	b.n	800a0f4 <__mcmp+0x28>
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a102:	e7f7      	b.n	800a0f4 <__mcmp+0x28>

0800a104 <__mdiff>:
 800a104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a108:	460c      	mov	r4, r1
 800a10a:	4606      	mov	r6, r0
 800a10c:	4611      	mov	r1, r2
 800a10e:	4620      	mov	r0, r4
 800a110:	4617      	mov	r7, r2
 800a112:	f7ff ffdb 	bl	800a0cc <__mcmp>
 800a116:	1e05      	subs	r5, r0, #0
 800a118:	d110      	bne.n	800a13c <__mdiff+0x38>
 800a11a:	4629      	mov	r1, r5
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7ff fd57 	bl	8009bd0 <_Balloc>
 800a122:	b930      	cbnz	r0, 800a132 <__mdiff+0x2e>
 800a124:	4b39      	ldr	r3, [pc, #228]	; (800a20c <__mdiff+0x108>)
 800a126:	4602      	mov	r2, r0
 800a128:	f240 2132 	movw	r1, #562	; 0x232
 800a12c:	4838      	ldr	r0, [pc, #224]	; (800a210 <__mdiff+0x10c>)
 800a12e:	f000 faf3 	bl	800a718 <__assert_func>
 800a132:	2301      	movs	r3, #1
 800a134:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13c:	bfa4      	itt	ge
 800a13e:	463b      	movge	r3, r7
 800a140:	4627      	movge	r7, r4
 800a142:	4630      	mov	r0, r6
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	bfa6      	itte	ge
 800a148:	461c      	movge	r4, r3
 800a14a:	2500      	movge	r5, #0
 800a14c:	2501      	movlt	r5, #1
 800a14e:	f7ff fd3f 	bl	8009bd0 <_Balloc>
 800a152:	b920      	cbnz	r0, 800a15e <__mdiff+0x5a>
 800a154:	4b2d      	ldr	r3, [pc, #180]	; (800a20c <__mdiff+0x108>)
 800a156:	4602      	mov	r2, r0
 800a158:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a15c:	e7e6      	b.n	800a12c <__mdiff+0x28>
 800a15e:	693e      	ldr	r6, [r7, #16]
 800a160:	60c5      	str	r5, [r0, #12]
 800a162:	6925      	ldr	r5, [r4, #16]
 800a164:	f107 0114 	add.w	r1, r7, #20
 800a168:	f104 0914 	add.w	r9, r4, #20
 800a16c:	f100 0e14 	add.w	lr, r0, #20
 800a170:	f107 0210 	add.w	r2, r7, #16
 800a174:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a178:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a17c:	46f2      	mov	sl, lr
 800a17e:	2700      	movs	r7, #0
 800a180:	f859 3b04 	ldr.w	r3, [r9], #4
 800a184:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a188:	fa1f f883 	uxth.w	r8, r3
 800a18c:	fa17 f78b 	uxtah	r7, r7, fp
 800a190:	0c1b      	lsrs	r3, r3, #16
 800a192:	eba7 0808 	sub.w	r8, r7, r8
 800a196:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a19a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a19e:	fa1f f888 	uxth.w	r8, r8
 800a1a2:	141f      	asrs	r7, r3, #16
 800a1a4:	454d      	cmp	r5, r9
 800a1a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a1aa:	f84a 3b04 	str.w	r3, [sl], #4
 800a1ae:	d8e7      	bhi.n	800a180 <__mdiff+0x7c>
 800a1b0:	1b2b      	subs	r3, r5, r4
 800a1b2:	3b15      	subs	r3, #21
 800a1b4:	f023 0303 	bic.w	r3, r3, #3
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	3415      	adds	r4, #21
 800a1bc:	42a5      	cmp	r5, r4
 800a1be:	bf38      	it	cc
 800a1c0:	2304      	movcc	r3, #4
 800a1c2:	4419      	add	r1, r3
 800a1c4:	4473      	add	r3, lr
 800a1c6:	469e      	mov	lr, r3
 800a1c8:	460d      	mov	r5, r1
 800a1ca:	4565      	cmp	r5, ip
 800a1cc:	d30e      	bcc.n	800a1ec <__mdiff+0xe8>
 800a1ce:	f10c 0203 	add.w	r2, ip, #3
 800a1d2:	1a52      	subs	r2, r2, r1
 800a1d4:	f022 0203 	bic.w	r2, r2, #3
 800a1d8:	3903      	subs	r1, #3
 800a1da:	458c      	cmp	ip, r1
 800a1dc:	bf38      	it	cc
 800a1de:	2200      	movcc	r2, #0
 800a1e0:	441a      	add	r2, r3
 800a1e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a1e6:	b17b      	cbz	r3, 800a208 <__mdiff+0x104>
 800a1e8:	6106      	str	r6, [r0, #16]
 800a1ea:	e7a5      	b.n	800a138 <__mdiff+0x34>
 800a1ec:	f855 8b04 	ldr.w	r8, [r5], #4
 800a1f0:	fa17 f488 	uxtah	r4, r7, r8
 800a1f4:	1422      	asrs	r2, r4, #16
 800a1f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a1fa:	b2a4      	uxth	r4, r4
 800a1fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a200:	f84e 4b04 	str.w	r4, [lr], #4
 800a204:	1417      	asrs	r7, r2, #16
 800a206:	e7e0      	b.n	800a1ca <__mdiff+0xc6>
 800a208:	3e01      	subs	r6, #1
 800a20a:	e7ea      	b.n	800a1e2 <__mdiff+0xde>
 800a20c:	0800b863 	.word	0x0800b863
 800a210:	0800b874 	.word	0x0800b874

0800a214 <__d2b>:
 800a214:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a218:	4689      	mov	r9, r1
 800a21a:	2101      	movs	r1, #1
 800a21c:	ec57 6b10 	vmov	r6, r7, d0
 800a220:	4690      	mov	r8, r2
 800a222:	f7ff fcd5 	bl	8009bd0 <_Balloc>
 800a226:	4604      	mov	r4, r0
 800a228:	b930      	cbnz	r0, 800a238 <__d2b+0x24>
 800a22a:	4602      	mov	r2, r0
 800a22c:	4b25      	ldr	r3, [pc, #148]	; (800a2c4 <__d2b+0xb0>)
 800a22e:	4826      	ldr	r0, [pc, #152]	; (800a2c8 <__d2b+0xb4>)
 800a230:	f240 310a 	movw	r1, #778	; 0x30a
 800a234:	f000 fa70 	bl	800a718 <__assert_func>
 800a238:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a23c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a240:	bb35      	cbnz	r5, 800a290 <__d2b+0x7c>
 800a242:	2e00      	cmp	r6, #0
 800a244:	9301      	str	r3, [sp, #4]
 800a246:	d028      	beq.n	800a29a <__d2b+0x86>
 800a248:	4668      	mov	r0, sp
 800a24a:	9600      	str	r6, [sp, #0]
 800a24c:	f7ff fd8c 	bl	8009d68 <__lo0bits>
 800a250:	9900      	ldr	r1, [sp, #0]
 800a252:	b300      	cbz	r0, 800a296 <__d2b+0x82>
 800a254:	9a01      	ldr	r2, [sp, #4]
 800a256:	f1c0 0320 	rsb	r3, r0, #32
 800a25a:	fa02 f303 	lsl.w	r3, r2, r3
 800a25e:	430b      	orrs	r3, r1
 800a260:	40c2      	lsrs	r2, r0
 800a262:	6163      	str	r3, [r4, #20]
 800a264:	9201      	str	r2, [sp, #4]
 800a266:	9b01      	ldr	r3, [sp, #4]
 800a268:	61a3      	str	r3, [r4, #24]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	bf14      	ite	ne
 800a26e:	2202      	movne	r2, #2
 800a270:	2201      	moveq	r2, #1
 800a272:	6122      	str	r2, [r4, #16]
 800a274:	b1d5      	cbz	r5, 800a2ac <__d2b+0x98>
 800a276:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a27a:	4405      	add	r5, r0
 800a27c:	f8c9 5000 	str.w	r5, [r9]
 800a280:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a284:	f8c8 0000 	str.w	r0, [r8]
 800a288:	4620      	mov	r0, r4
 800a28a:	b003      	add	sp, #12
 800a28c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a294:	e7d5      	b.n	800a242 <__d2b+0x2e>
 800a296:	6161      	str	r1, [r4, #20]
 800a298:	e7e5      	b.n	800a266 <__d2b+0x52>
 800a29a:	a801      	add	r0, sp, #4
 800a29c:	f7ff fd64 	bl	8009d68 <__lo0bits>
 800a2a0:	9b01      	ldr	r3, [sp, #4]
 800a2a2:	6163      	str	r3, [r4, #20]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	6122      	str	r2, [r4, #16]
 800a2a8:	3020      	adds	r0, #32
 800a2aa:	e7e3      	b.n	800a274 <__d2b+0x60>
 800a2ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2b4:	f8c9 0000 	str.w	r0, [r9]
 800a2b8:	6918      	ldr	r0, [r3, #16]
 800a2ba:	f7ff fd35 	bl	8009d28 <__hi0bits>
 800a2be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2c2:	e7df      	b.n	800a284 <__d2b+0x70>
 800a2c4:	0800b863 	.word	0x0800b863
 800a2c8:	0800b874 	.word	0x0800b874

0800a2cc <_calloc_r>:
 800a2cc:	b513      	push	{r0, r1, r4, lr}
 800a2ce:	434a      	muls	r2, r1
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	9201      	str	r2, [sp, #4]
 800a2d4:	f000 f85a 	bl	800a38c <_malloc_r>
 800a2d8:	4604      	mov	r4, r0
 800a2da:	b118      	cbz	r0, 800a2e4 <_calloc_r+0x18>
 800a2dc:	9a01      	ldr	r2, [sp, #4]
 800a2de:	2100      	movs	r1, #0
 800a2e0:	f7fe f960 	bl	80085a4 <memset>
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	b002      	add	sp, #8
 800a2e8:	bd10      	pop	{r4, pc}
	...

0800a2ec <_free_r>:
 800a2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ee:	2900      	cmp	r1, #0
 800a2f0:	d048      	beq.n	800a384 <_free_r+0x98>
 800a2f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2f6:	9001      	str	r0, [sp, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f1a1 0404 	sub.w	r4, r1, #4
 800a2fe:	bfb8      	it	lt
 800a300:	18e4      	addlt	r4, r4, r3
 800a302:	f000 fa65 	bl	800a7d0 <__malloc_lock>
 800a306:	4a20      	ldr	r2, [pc, #128]	; (800a388 <_free_r+0x9c>)
 800a308:	9801      	ldr	r0, [sp, #4]
 800a30a:	6813      	ldr	r3, [r2, #0]
 800a30c:	4615      	mov	r5, r2
 800a30e:	b933      	cbnz	r3, 800a31e <_free_r+0x32>
 800a310:	6063      	str	r3, [r4, #4]
 800a312:	6014      	str	r4, [r2, #0]
 800a314:	b003      	add	sp, #12
 800a316:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a31a:	f000 ba5f 	b.w	800a7dc <__malloc_unlock>
 800a31e:	42a3      	cmp	r3, r4
 800a320:	d90b      	bls.n	800a33a <_free_r+0x4e>
 800a322:	6821      	ldr	r1, [r4, #0]
 800a324:	1862      	adds	r2, r4, r1
 800a326:	4293      	cmp	r3, r2
 800a328:	bf04      	itt	eq
 800a32a:	681a      	ldreq	r2, [r3, #0]
 800a32c:	685b      	ldreq	r3, [r3, #4]
 800a32e:	6063      	str	r3, [r4, #4]
 800a330:	bf04      	itt	eq
 800a332:	1852      	addeq	r2, r2, r1
 800a334:	6022      	streq	r2, [r4, #0]
 800a336:	602c      	str	r4, [r5, #0]
 800a338:	e7ec      	b.n	800a314 <_free_r+0x28>
 800a33a:	461a      	mov	r2, r3
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	b10b      	cbz	r3, 800a344 <_free_r+0x58>
 800a340:	42a3      	cmp	r3, r4
 800a342:	d9fa      	bls.n	800a33a <_free_r+0x4e>
 800a344:	6811      	ldr	r1, [r2, #0]
 800a346:	1855      	adds	r5, r2, r1
 800a348:	42a5      	cmp	r5, r4
 800a34a:	d10b      	bne.n	800a364 <_free_r+0x78>
 800a34c:	6824      	ldr	r4, [r4, #0]
 800a34e:	4421      	add	r1, r4
 800a350:	1854      	adds	r4, r2, r1
 800a352:	42a3      	cmp	r3, r4
 800a354:	6011      	str	r1, [r2, #0]
 800a356:	d1dd      	bne.n	800a314 <_free_r+0x28>
 800a358:	681c      	ldr	r4, [r3, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	6053      	str	r3, [r2, #4]
 800a35e:	4421      	add	r1, r4
 800a360:	6011      	str	r1, [r2, #0]
 800a362:	e7d7      	b.n	800a314 <_free_r+0x28>
 800a364:	d902      	bls.n	800a36c <_free_r+0x80>
 800a366:	230c      	movs	r3, #12
 800a368:	6003      	str	r3, [r0, #0]
 800a36a:	e7d3      	b.n	800a314 <_free_r+0x28>
 800a36c:	6825      	ldr	r5, [r4, #0]
 800a36e:	1961      	adds	r1, r4, r5
 800a370:	428b      	cmp	r3, r1
 800a372:	bf04      	itt	eq
 800a374:	6819      	ldreq	r1, [r3, #0]
 800a376:	685b      	ldreq	r3, [r3, #4]
 800a378:	6063      	str	r3, [r4, #4]
 800a37a:	bf04      	itt	eq
 800a37c:	1949      	addeq	r1, r1, r5
 800a37e:	6021      	streq	r1, [r4, #0]
 800a380:	6054      	str	r4, [r2, #4]
 800a382:	e7c7      	b.n	800a314 <_free_r+0x28>
 800a384:	b003      	add	sp, #12
 800a386:	bd30      	pop	{r4, r5, pc}
 800a388:	20000864 	.word	0x20000864

0800a38c <_malloc_r>:
 800a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38e:	1ccd      	adds	r5, r1, #3
 800a390:	f025 0503 	bic.w	r5, r5, #3
 800a394:	3508      	adds	r5, #8
 800a396:	2d0c      	cmp	r5, #12
 800a398:	bf38      	it	cc
 800a39a:	250c      	movcc	r5, #12
 800a39c:	2d00      	cmp	r5, #0
 800a39e:	4606      	mov	r6, r0
 800a3a0:	db01      	blt.n	800a3a6 <_malloc_r+0x1a>
 800a3a2:	42a9      	cmp	r1, r5
 800a3a4:	d903      	bls.n	800a3ae <_malloc_r+0x22>
 800a3a6:	230c      	movs	r3, #12
 800a3a8:	6033      	str	r3, [r6, #0]
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3ae:	f000 fa0f 	bl	800a7d0 <__malloc_lock>
 800a3b2:	4921      	ldr	r1, [pc, #132]	; (800a438 <_malloc_r+0xac>)
 800a3b4:	680a      	ldr	r2, [r1, #0]
 800a3b6:	4614      	mov	r4, r2
 800a3b8:	b99c      	cbnz	r4, 800a3e2 <_malloc_r+0x56>
 800a3ba:	4f20      	ldr	r7, [pc, #128]	; (800a43c <_malloc_r+0xb0>)
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	b923      	cbnz	r3, 800a3ca <_malloc_r+0x3e>
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f000 f998 	bl	800a6f8 <_sbrk_r>
 800a3c8:	6038      	str	r0, [r7, #0]
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f000 f993 	bl	800a6f8 <_sbrk_r>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	d123      	bne.n	800a41e <_malloc_r+0x92>
 800a3d6:	230c      	movs	r3, #12
 800a3d8:	6033      	str	r3, [r6, #0]
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f000 f9fe 	bl	800a7dc <__malloc_unlock>
 800a3e0:	e7e3      	b.n	800a3aa <_malloc_r+0x1e>
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	1b5b      	subs	r3, r3, r5
 800a3e6:	d417      	bmi.n	800a418 <_malloc_r+0x8c>
 800a3e8:	2b0b      	cmp	r3, #11
 800a3ea:	d903      	bls.n	800a3f4 <_malloc_r+0x68>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	441c      	add	r4, r3
 800a3f0:	6025      	str	r5, [r4, #0]
 800a3f2:	e004      	b.n	800a3fe <_malloc_r+0x72>
 800a3f4:	6863      	ldr	r3, [r4, #4]
 800a3f6:	42a2      	cmp	r2, r4
 800a3f8:	bf0c      	ite	eq
 800a3fa:	600b      	streq	r3, [r1, #0]
 800a3fc:	6053      	strne	r3, [r2, #4]
 800a3fe:	4630      	mov	r0, r6
 800a400:	f000 f9ec 	bl	800a7dc <__malloc_unlock>
 800a404:	f104 000b 	add.w	r0, r4, #11
 800a408:	1d23      	adds	r3, r4, #4
 800a40a:	f020 0007 	bic.w	r0, r0, #7
 800a40e:	1ac2      	subs	r2, r0, r3
 800a410:	d0cc      	beq.n	800a3ac <_malloc_r+0x20>
 800a412:	1a1b      	subs	r3, r3, r0
 800a414:	50a3      	str	r3, [r4, r2]
 800a416:	e7c9      	b.n	800a3ac <_malloc_r+0x20>
 800a418:	4622      	mov	r2, r4
 800a41a:	6864      	ldr	r4, [r4, #4]
 800a41c:	e7cc      	b.n	800a3b8 <_malloc_r+0x2c>
 800a41e:	1cc4      	adds	r4, r0, #3
 800a420:	f024 0403 	bic.w	r4, r4, #3
 800a424:	42a0      	cmp	r0, r4
 800a426:	d0e3      	beq.n	800a3f0 <_malloc_r+0x64>
 800a428:	1a21      	subs	r1, r4, r0
 800a42a:	4630      	mov	r0, r6
 800a42c:	f000 f964 	bl	800a6f8 <_sbrk_r>
 800a430:	3001      	adds	r0, #1
 800a432:	d1dd      	bne.n	800a3f0 <_malloc_r+0x64>
 800a434:	e7cf      	b.n	800a3d6 <_malloc_r+0x4a>
 800a436:	bf00      	nop
 800a438:	20000864 	.word	0x20000864
 800a43c:	20000868 	.word	0x20000868

0800a440 <__ssputs_r>:
 800a440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a444:	688e      	ldr	r6, [r1, #8]
 800a446:	429e      	cmp	r6, r3
 800a448:	4682      	mov	sl, r0
 800a44a:	460c      	mov	r4, r1
 800a44c:	4690      	mov	r8, r2
 800a44e:	461f      	mov	r7, r3
 800a450:	d838      	bhi.n	800a4c4 <__ssputs_r+0x84>
 800a452:	898a      	ldrh	r2, [r1, #12]
 800a454:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a458:	d032      	beq.n	800a4c0 <__ssputs_r+0x80>
 800a45a:	6825      	ldr	r5, [r4, #0]
 800a45c:	6909      	ldr	r1, [r1, #16]
 800a45e:	eba5 0901 	sub.w	r9, r5, r1
 800a462:	6965      	ldr	r5, [r4, #20]
 800a464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a46c:	3301      	adds	r3, #1
 800a46e:	444b      	add	r3, r9
 800a470:	106d      	asrs	r5, r5, #1
 800a472:	429d      	cmp	r5, r3
 800a474:	bf38      	it	cc
 800a476:	461d      	movcc	r5, r3
 800a478:	0553      	lsls	r3, r2, #21
 800a47a:	d531      	bpl.n	800a4e0 <__ssputs_r+0xa0>
 800a47c:	4629      	mov	r1, r5
 800a47e:	f7ff ff85 	bl	800a38c <_malloc_r>
 800a482:	4606      	mov	r6, r0
 800a484:	b950      	cbnz	r0, 800a49c <__ssputs_r+0x5c>
 800a486:	230c      	movs	r3, #12
 800a488:	f8ca 3000 	str.w	r3, [sl]
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a492:	81a3      	strh	r3, [r4, #12]
 800a494:	f04f 30ff 	mov.w	r0, #4294967295
 800a498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a49c:	6921      	ldr	r1, [r4, #16]
 800a49e:	464a      	mov	r2, r9
 800a4a0:	f7fe f872 	bl	8008588 <memcpy>
 800a4a4:	89a3      	ldrh	r3, [r4, #12]
 800a4a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ae:	81a3      	strh	r3, [r4, #12]
 800a4b0:	6126      	str	r6, [r4, #16]
 800a4b2:	6165      	str	r5, [r4, #20]
 800a4b4:	444e      	add	r6, r9
 800a4b6:	eba5 0509 	sub.w	r5, r5, r9
 800a4ba:	6026      	str	r6, [r4, #0]
 800a4bc:	60a5      	str	r5, [r4, #8]
 800a4be:	463e      	mov	r6, r7
 800a4c0:	42be      	cmp	r6, r7
 800a4c2:	d900      	bls.n	800a4c6 <__ssputs_r+0x86>
 800a4c4:	463e      	mov	r6, r7
 800a4c6:	4632      	mov	r2, r6
 800a4c8:	6820      	ldr	r0, [r4, #0]
 800a4ca:	4641      	mov	r1, r8
 800a4cc:	f000 f966 	bl	800a79c <memmove>
 800a4d0:	68a3      	ldr	r3, [r4, #8]
 800a4d2:	6822      	ldr	r2, [r4, #0]
 800a4d4:	1b9b      	subs	r3, r3, r6
 800a4d6:	4432      	add	r2, r6
 800a4d8:	60a3      	str	r3, [r4, #8]
 800a4da:	6022      	str	r2, [r4, #0]
 800a4dc:	2000      	movs	r0, #0
 800a4de:	e7db      	b.n	800a498 <__ssputs_r+0x58>
 800a4e0:	462a      	mov	r2, r5
 800a4e2:	f000 f981 	bl	800a7e8 <_realloc_r>
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d1e1      	bne.n	800a4b0 <__ssputs_r+0x70>
 800a4ec:	6921      	ldr	r1, [r4, #16]
 800a4ee:	4650      	mov	r0, sl
 800a4f0:	f7ff fefc 	bl	800a2ec <_free_r>
 800a4f4:	e7c7      	b.n	800a486 <__ssputs_r+0x46>
	...

0800a4f8 <_svfiprintf_r>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	4698      	mov	r8, r3
 800a4fe:	898b      	ldrh	r3, [r1, #12]
 800a500:	061b      	lsls	r3, r3, #24
 800a502:	b09d      	sub	sp, #116	; 0x74
 800a504:	4607      	mov	r7, r0
 800a506:	460d      	mov	r5, r1
 800a508:	4614      	mov	r4, r2
 800a50a:	d50e      	bpl.n	800a52a <_svfiprintf_r+0x32>
 800a50c:	690b      	ldr	r3, [r1, #16]
 800a50e:	b963      	cbnz	r3, 800a52a <_svfiprintf_r+0x32>
 800a510:	2140      	movs	r1, #64	; 0x40
 800a512:	f7ff ff3b 	bl	800a38c <_malloc_r>
 800a516:	6028      	str	r0, [r5, #0]
 800a518:	6128      	str	r0, [r5, #16]
 800a51a:	b920      	cbnz	r0, 800a526 <_svfiprintf_r+0x2e>
 800a51c:	230c      	movs	r3, #12
 800a51e:	603b      	str	r3, [r7, #0]
 800a520:	f04f 30ff 	mov.w	r0, #4294967295
 800a524:	e0d1      	b.n	800a6ca <_svfiprintf_r+0x1d2>
 800a526:	2340      	movs	r3, #64	; 0x40
 800a528:	616b      	str	r3, [r5, #20]
 800a52a:	2300      	movs	r3, #0
 800a52c:	9309      	str	r3, [sp, #36]	; 0x24
 800a52e:	2320      	movs	r3, #32
 800a530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a534:	f8cd 800c 	str.w	r8, [sp, #12]
 800a538:	2330      	movs	r3, #48	; 0x30
 800a53a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a6e4 <_svfiprintf_r+0x1ec>
 800a53e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a542:	f04f 0901 	mov.w	r9, #1
 800a546:	4623      	mov	r3, r4
 800a548:	469a      	mov	sl, r3
 800a54a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a54e:	b10a      	cbz	r2, 800a554 <_svfiprintf_r+0x5c>
 800a550:	2a25      	cmp	r2, #37	; 0x25
 800a552:	d1f9      	bne.n	800a548 <_svfiprintf_r+0x50>
 800a554:	ebba 0b04 	subs.w	fp, sl, r4
 800a558:	d00b      	beq.n	800a572 <_svfiprintf_r+0x7a>
 800a55a:	465b      	mov	r3, fp
 800a55c:	4622      	mov	r2, r4
 800a55e:	4629      	mov	r1, r5
 800a560:	4638      	mov	r0, r7
 800a562:	f7ff ff6d 	bl	800a440 <__ssputs_r>
 800a566:	3001      	adds	r0, #1
 800a568:	f000 80aa 	beq.w	800a6c0 <_svfiprintf_r+0x1c8>
 800a56c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a56e:	445a      	add	r2, fp
 800a570:	9209      	str	r2, [sp, #36]	; 0x24
 800a572:	f89a 3000 	ldrb.w	r3, [sl]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 80a2 	beq.w	800a6c0 <_svfiprintf_r+0x1c8>
 800a57c:	2300      	movs	r3, #0
 800a57e:	f04f 32ff 	mov.w	r2, #4294967295
 800a582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a586:	f10a 0a01 	add.w	sl, sl, #1
 800a58a:	9304      	str	r3, [sp, #16]
 800a58c:	9307      	str	r3, [sp, #28]
 800a58e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a592:	931a      	str	r3, [sp, #104]	; 0x68
 800a594:	4654      	mov	r4, sl
 800a596:	2205      	movs	r2, #5
 800a598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59c:	4851      	ldr	r0, [pc, #324]	; (800a6e4 <_svfiprintf_r+0x1ec>)
 800a59e:	f7f5 fe27 	bl	80001f0 <memchr>
 800a5a2:	9a04      	ldr	r2, [sp, #16]
 800a5a4:	b9d8      	cbnz	r0, 800a5de <_svfiprintf_r+0xe6>
 800a5a6:	06d0      	lsls	r0, r2, #27
 800a5a8:	bf44      	itt	mi
 800a5aa:	2320      	movmi	r3, #32
 800a5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5b0:	0711      	lsls	r1, r2, #28
 800a5b2:	bf44      	itt	mi
 800a5b4:	232b      	movmi	r3, #43	; 0x2b
 800a5b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a5be:	2b2a      	cmp	r3, #42	; 0x2a
 800a5c0:	d015      	beq.n	800a5ee <_svfiprintf_r+0xf6>
 800a5c2:	9a07      	ldr	r2, [sp, #28]
 800a5c4:	4654      	mov	r4, sl
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	f04f 0c0a 	mov.w	ip, #10
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5d2:	3b30      	subs	r3, #48	; 0x30
 800a5d4:	2b09      	cmp	r3, #9
 800a5d6:	d94e      	bls.n	800a676 <_svfiprintf_r+0x17e>
 800a5d8:	b1b0      	cbz	r0, 800a608 <_svfiprintf_r+0x110>
 800a5da:	9207      	str	r2, [sp, #28]
 800a5dc:	e014      	b.n	800a608 <_svfiprintf_r+0x110>
 800a5de:	eba0 0308 	sub.w	r3, r0, r8
 800a5e2:	fa09 f303 	lsl.w	r3, r9, r3
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	9304      	str	r3, [sp, #16]
 800a5ea:	46a2      	mov	sl, r4
 800a5ec:	e7d2      	b.n	800a594 <_svfiprintf_r+0x9c>
 800a5ee:	9b03      	ldr	r3, [sp, #12]
 800a5f0:	1d19      	adds	r1, r3, #4
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	9103      	str	r1, [sp, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	bfbb      	ittet	lt
 800a5fa:	425b      	neglt	r3, r3
 800a5fc:	f042 0202 	orrlt.w	r2, r2, #2
 800a600:	9307      	strge	r3, [sp, #28]
 800a602:	9307      	strlt	r3, [sp, #28]
 800a604:	bfb8      	it	lt
 800a606:	9204      	strlt	r2, [sp, #16]
 800a608:	7823      	ldrb	r3, [r4, #0]
 800a60a:	2b2e      	cmp	r3, #46	; 0x2e
 800a60c:	d10c      	bne.n	800a628 <_svfiprintf_r+0x130>
 800a60e:	7863      	ldrb	r3, [r4, #1]
 800a610:	2b2a      	cmp	r3, #42	; 0x2a
 800a612:	d135      	bne.n	800a680 <_svfiprintf_r+0x188>
 800a614:	9b03      	ldr	r3, [sp, #12]
 800a616:	1d1a      	adds	r2, r3, #4
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	9203      	str	r2, [sp, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	bfb8      	it	lt
 800a620:	f04f 33ff 	movlt.w	r3, #4294967295
 800a624:	3402      	adds	r4, #2
 800a626:	9305      	str	r3, [sp, #20]
 800a628:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a6f4 <_svfiprintf_r+0x1fc>
 800a62c:	7821      	ldrb	r1, [r4, #0]
 800a62e:	2203      	movs	r2, #3
 800a630:	4650      	mov	r0, sl
 800a632:	f7f5 fddd 	bl	80001f0 <memchr>
 800a636:	b140      	cbz	r0, 800a64a <_svfiprintf_r+0x152>
 800a638:	2340      	movs	r3, #64	; 0x40
 800a63a:	eba0 000a 	sub.w	r0, r0, sl
 800a63e:	fa03 f000 	lsl.w	r0, r3, r0
 800a642:	9b04      	ldr	r3, [sp, #16]
 800a644:	4303      	orrs	r3, r0
 800a646:	3401      	adds	r4, #1
 800a648:	9304      	str	r3, [sp, #16]
 800a64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a64e:	4826      	ldr	r0, [pc, #152]	; (800a6e8 <_svfiprintf_r+0x1f0>)
 800a650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a654:	2206      	movs	r2, #6
 800a656:	f7f5 fdcb 	bl	80001f0 <memchr>
 800a65a:	2800      	cmp	r0, #0
 800a65c:	d038      	beq.n	800a6d0 <_svfiprintf_r+0x1d8>
 800a65e:	4b23      	ldr	r3, [pc, #140]	; (800a6ec <_svfiprintf_r+0x1f4>)
 800a660:	bb1b      	cbnz	r3, 800a6aa <_svfiprintf_r+0x1b2>
 800a662:	9b03      	ldr	r3, [sp, #12]
 800a664:	3307      	adds	r3, #7
 800a666:	f023 0307 	bic.w	r3, r3, #7
 800a66a:	3308      	adds	r3, #8
 800a66c:	9303      	str	r3, [sp, #12]
 800a66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a670:	4433      	add	r3, r6
 800a672:	9309      	str	r3, [sp, #36]	; 0x24
 800a674:	e767      	b.n	800a546 <_svfiprintf_r+0x4e>
 800a676:	fb0c 3202 	mla	r2, ip, r2, r3
 800a67a:	460c      	mov	r4, r1
 800a67c:	2001      	movs	r0, #1
 800a67e:	e7a5      	b.n	800a5cc <_svfiprintf_r+0xd4>
 800a680:	2300      	movs	r3, #0
 800a682:	3401      	adds	r4, #1
 800a684:	9305      	str	r3, [sp, #20]
 800a686:	4619      	mov	r1, r3
 800a688:	f04f 0c0a 	mov.w	ip, #10
 800a68c:	4620      	mov	r0, r4
 800a68e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a692:	3a30      	subs	r2, #48	; 0x30
 800a694:	2a09      	cmp	r2, #9
 800a696:	d903      	bls.n	800a6a0 <_svfiprintf_r+0x1a8>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d0c5      	beq.n	800a628 <_svfiprintf_r+0x130>
 800a69c:	9105      	str	r1, [sp, #20]
 800a69e:	e7c3      	b.n	800a628 <_svfiprintf_r+0x130>
 800a6a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e7f0      	b.n	800a68c <_svfiprintf_r+0x194>
 800a6aa:	ab03      	add	r3, sp, #12
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	462a      	mov	r2, r5
 800a6b0:	4b0f      	ldr	r3, [pc, #60]	; (800a6f0 <_svfiprintf_r+0x1f8>)
 800a6b2:	a904      	add	r1, sp, #16
 800a6b4:	4638      	mov	r0, r7
 800a6b6:	f7fe f81d 	bl	80086f4 <_printf_float>
 800a6ba:	1c42      	adds	r2, r0, #1
 800a6bc:	4606      	mov	r6, r0
 800a6be:	d1d6      	bne.n	800a66e <_svfiprintf_r+0x176>
 800a6c0:	89ab      	ldrh	r3, [r5, #12]
 800a6c2:	065b      	lsls	r3, r3, #25
 800a6c4:	f53f af2c 	bmi.w	800a520 <_svfiprintf_r+0x28>
 800a6c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6ca:	b01d      	add	sp, #116	; 0x74
 800a6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d0:	ab03      	add	r3, sp, #12
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	462a      	mov	r2, r5
 800a6d6:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <_svfiprintf_r+0x1f8>)
 800a6d8:	a904      	add	r1, sp, #16
 800a6da:	4638      	mov	r0, r7
 800a6dc:	f7fe faae 	bl	8008c3c <_printf_i>
 800a6e0:	e7eb      	b.n	800a6ba <_svfiprintf_r+0x1c2>
 800a6e2:	bf00      	nop
 800a6e4:	0800b9d4 	.word	0x0800b9d4
 800a6e8:	0800b9de 	.word	0x0800b9de
 800a6ec:	080086f5 	.word	0x080086f5
 800a6f0:	0800a441 	.word	0x0800a441
 800a6f4:	0800b9da 	.word	0x0800b9da

0800a6f8 <_sbrk_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d06      	ldr	r5, [pc, #24]	; (800a714 <_sbrk_r+0x1c>)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4604      	mov	r4, r0
 800a700:	4608      	mov	r0, r1
 800a702:	602b      	str	r3, [r5, #0]
 800a704:	f7fa f8da 	bl	80048bc <_sbrk>
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d102      	bne.n	800a712 <_sbrk_r+0x1a>
 800a70c:	682b      	ldr	r3, [r5, #0]
 800a70e:	b103      	cbz	r3, 800a712 <_sbrk_r+0x1a>
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	20001ce4 	.word	0x20001ce4

0800a718 <__assert_func>:
 800a718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a71a:	4614      	mov	r4, r2
 800a71c:	461a      	mov	r2, r3
 800a71e:	4b09      	ldr	r3, [pc, #36]	; (800a744 <__assert_func+0x2c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4605      	mov	r5, r0
 800a724:	68d8      	ldr	r0, [r3, #12]
 800a726:	b14c      	cbz	r4, 800a73c <__assert_func+0x24>
 800a728:	4b07      	ldr	r3, [pc, #28]	; (800a748 <__assert_func+0x30>)
 800a72a:	9100      	str	r1, [sp, #0]
 800a72c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a730:	4906      	ldr	r1, [pc, #24]	; (800a74c <__assert_func+0x34>)
 800a732:	462b      	mov	r3, r5
 800a734:	f000 f80e 	bl	800a754 <fiprintf>
 800a738:	f000 faa4 	bl	800ac84 <abort>
 800a73c:	4b04      	ldr	r3, [pc, #16]	; (800a750 <__assert_func+0x38>)
 800a73e:	461c      	mov	r4, r3
 800a740:	e7f3      	b.n	800a72a <__assert_func+0x12>
 800a742:	bf00      	nop
 800a744:	20000664 	.word	0x20000664
 800a748:	0800b9e5 	.word	0x0800b9e5
 800a74c:	0800b9f2 	.word	0x0800b9f2
 800a750:	0800ba20 	.word	0x0800ba20

0800a754 <fiprintf>:
 800a754:	b40e      	push	{r1, r2, r3}
 800a756:	b503      	push	{r0, r1, lr}
 800a758:	4601      	mov	r1, r0
 800a75a:	ab03      	add	r3, sp, #12
 800a75c:	4805      	ldr	r0, [pc, #20]	; (800a774 <fiprintf+0x20>)
 800a75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a762:	6800      	ldr	r0, [r0, #0]
 800a764:	9301      	str	r3, [sp, #4]
 800a766:	f000 f88f 	bl	800a888 <_vfiprintf_r>
 800a76a:	b002      	add	sp, #8
 800a76c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a770:	b003      	add	sp, #12
 800a772:	4770      	bx	lr
 800a774:	20000664 	.word	0x20000664

0800a778 <__ascii_mbtowc>:
 800a778:	b082      	sub	sp, #8
 800a77a:	b901      	cbnz	r1, 800a77e <__ascii_mbtowc+0x6>
 800a77c:	a901      	add	r1, sp, #4
 800a77e:	b142      	cbz	r2, 800a792 <__ascii_mbtowc+0x1a>
 800a780:	b14b      	cbz	r3, 800a796 <__ascii_mbtowc+0x1e>
 800a782:	7813      	ldrb	r3, [r2, #0]
 800a784:	600b      	str	r3, [r1, #0]
 800a786:	7812      	ldrb	r2, [r2, #0]
 800a788:	1e10      	subs	r0, r2, #0
 800a78a:	bf18      	it	ne
 800a78c:	2001      	movne	r0, #1
 800a78e:	b002      	add	sp, #8
 800a790:	4770      	bx	lr
 800a792:	4610      	mov	r0, r2
 800a794:	e7fb      	b.n	800a78e <__ascii_mbtowc+0x16>
 800a796:	f06f 0001 	mvn.w	r0, #1
 800a79a:	e7f8      	b.n	800a78e <__ascii_mbtowc+0x16>

0800a79c <memmove>:
 800a79c:	4288      	cmp	r0, r1
 800a79e:	b510      	push	{r4, lr}
 800a7a0:	eb01 0402 	add.w	r4, r1, r2
 800a7a4:	d902      	bls.n	800a7ac <memmove+0x10>
 800a7a6:	4284      	cmp	r4, r0
 800a7a8:	4623      	mov	r3, r4
 800a7aa:	d807      	bhi.n	800a7bc <memmove+0x20>
 800a7ac:	1e43      	subs	r3, r0, #1
 800a7ae:	42a1      	cmp	r1, r4
 800a7b0:	d008      	beq.n	800a7c4 <memmove+0x28>
 800a7b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7ba:	e7f8      	b.n	800a7ae <memmove+0x12>
 800a7bc:	4402      	add	r2, r0
 800a7be:	4601      	mov	r1, r0
 800a7c0:	428a      	cmp	r2, r1
 800a7c2:	d100      	bne.n	800a7c6 <memmove+0x2a>
 800a7c4:	bd10      	pop	{r4, pc}
 800a7c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7ce:	e7f7      	b.n	800a7c0 <memmove+0x24>

0800a7d0 <__malloc_lock>:
 800a7d0:	4801      	ldr	r0, [pc, #4]	; (800a7d8 <__malloc_lock+0x8>)
 800a7d2:	f000 bc17 	b.w	800b004 <__retarget_lock_acquire_recursive>
 800a7d6:	bf00      	nop
 800a7d8:	20001cec 	.word	0x20001cec

0800a7dc <__malloc_unlock>:
 800a7dc:	4801      	ldr	r0, [pc, #4]	; (800a7e4 <__malloc_unlock+0x8>)
 800a7de:	f000 bc12 	b.w	800b006 <__retarget_lock_release_recursive>
 800a7e2:	bf00      	nop
 800a7e4:	20001cec 	.word	0x20001cec

0800a7e8 <_realloc_r>:
 800a7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ea:	4607      	mov	r7, r0
 800a7ec:	4614      	mov	r4, r2
 800a7ee:	460e      	mov	r6, r1
 800a7f0:	b921      	cbnz	r1, 800a7fc <_realloc_r+0x14>
 800a7f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	f7ff bdc8 	b.w	800a38c <_malloc_r>
 800a7fc:	b922      	cbnz	r2, 800a808 <_realloc_r+0x20>
 800a7fe:	f7ff fd75 	bl	800a2ec <_free_r>
 800a802:	4625      	mov	r5, r4
 800a804:	4628      	mov	r0, r5
 800a806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a808:	f000 fc62 	bl	800b0d0 <_malloc_usable_size_r>
 800a80c:	42a0      	cmp	r0, r4
 800a80e:	d20f      	bcs.n	800a830 <_realloc_r+0x48>
 800a810:	4621      	mov	r1, r4
 800a812:	4638      	mov	r0, r7
 800a814:	f7ff fdba 	bl	800a38c <_malloc_r>
 800a818:	4605      	mov	r5, r0
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d0f2      	beq.n	800a804 <_realloc_r+0x1c>
 800a81e:	4631      	mov	r1, r6
 800a820:	4622      	mov	r2, r4
 800a822:	f7fd feb1 	bl	8008588 <memcpy>
 800a826:	4631      	mov	r1, r6
 800a828:	4638      	mov	r0, r7
 800a82a:	f7ff fd5f 	bl	800a2ec <_free_r>
 800a82e:	e7e9      	b.n	800a804 <_realloc_r+0x1c>
 800a830:	4635      	mov	r5, r6
 800a832:	e7e7      	b.n	800a804 <_realloc_r+0x1c>

0800a834 <__sfputc_r>:
 800a834:	6893      	ldr	r3, [r2, #8]
 800a836:	3b01      	subs	r3, #1
 800a838:	2b00      	cmp	r3, #0
 800a83a:	b410      	push	{r4}
 800a83c:	6093      	str	r3, [r2, #8]
 800a83e:	da08      	bge.n	800a852 <__sfputc_r+0x1e>
 800a840:	6994      	ldr	r4, [r2, #24]
 800a842:	42a3      	cmp	r3, r4
 800a844:	db01      	blt.n	800a84a <__sfputc_r+0x16>
 800a846:	290a      	cmp	r1, #10
 800a848:	d103      	bne.n	800a852 <__sfputc_r+0x1e>
 800a84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a84e:	f000 b94b 	b.w	800aae8 <__swbuf_r>
 800a852:	6813      	ldr	r3, [r2, #0]
 800a854:	1c58      	adds	r0, r3, #1
 800a856:	6010      	str	r0, [r2, #0]
 800a858:	7019      	strb	r1, [r3, #0]
 800a85a:	4608      	mov	r0, r1
 800a85c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <__sfputs_r>:
 800a862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a864:	4606      	mov	r6, r0
 800a866:	460f      	mov	r7, r1
 800a868:	4614      	mov	r4, r2
 800a86a:	18d5      	adds	r5, r2, r3
 800a86c:	42ac      	cmp	r4, r5
 800a86e:	d101      	bne.n	800a874 <__sfputs_r+0x12>
 800a870:	2000      	movs	r0, #0
 800a872:	e007      	b.n	800a884 <__sfputs_r+0x22>
 800a874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a878:	463a      	mov	r2, r7
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7ff ffda 	bl	800a834 <__sfputc_r>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d1f3      	bne.n	800a86c <__sfputs_r+0xa>
 800a884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a888 <_vfiprintf_r>:
 800a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	460d      	mov	r5, r1
 800a88e:	b09d      	sub	sp, #116	; 0x74
 800a890:	4614      	mov	r4, r2
 800a892:	4698      	mov	r8, r3
 800a894:	4606      	mov	r6, r0
 800a896:	b118      	cbz	r0, 800a8a0 <_vfiprintf_r+0x18>
 800a898:	6983      	ldr	r3, [r0, #24]
 800a89a:	b90b      	cbnz	r3, 800a8a0 <_vfiprintf_r+0x18>
 800a89c:	f000 fb14 	bl	800aec8 <__sinit>
 800a8a0:	4b89      	ldr	r3, [pc, #548]	; (800aac8 <_vfiprintf_r+0x240>)
 800a8a2:	429d      	cmp	r5, r3
 800a8a4:	d11b      	bne.n	800a8de <_vfiprintf_r+0x56>
 800a8a6:	6875      	ldr	r5, [r6, #4]
 800a8a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8aa:	07d9      	lsls	r1, r3, #31
 800a8ac:	d405      	bmi.n	800a8ba <_vfiprintf_r+0x32>
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	059a      	lsls	r2, r3, #22
 800a8b2:	d402      	bmi.n	800a8ba <_vfiprintf_r+0x32>
 800a8b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b6:	f000 fba5 	bl	800b004 <__retarget_lock_acquire_recursive>
 800a8ba:	89ab      	ldrh	r3, [r5, #12]
 800a8bc:	071b      	lsls	r3, r3, #28
 800a8be:	d501      	bpl.n	800a8c4 <_vfiprintf_r+0x3c>
 800a8c0:	692b      	ldr	r3, [r5, #16]
 800a8c2:	b9eb      	cbnz	r3, 800a900 <_vfiprintf_r+0x78>
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f000 f96e 	bl	800aba8 <__swsetup_r>
 800a8cc:	b1c0      	cbz	r0, 800a900 <_vfiprintf_r+0x78>
 800a8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8d0:	07dc      	lsls	r4, r3, #31
 800a8d2:	d50e      	bpl.n	800a8f2 <_vfiprintf_r+0x6a>
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d8:	b01d      	add	sp, #116	; 0x74
 800a8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8de:	4b7b      	ldr	r3, [pc, #492]	; (800aacc <_vfiprintf_r+0x244>)
 800a8e0:	429d      	cmp	r5, r3
 800a8e2:	d101      	bne.n	800a8e8 <_vfiprintf_r+0x60>
 800a8e4:	68b5      	ldr	r5, [r6, #8]
 800a8e6:	e7df      	b.n	800a8a8 <_vfiprintf_r+0x20>
 800a8e8:	4b79      	ldr	r3, [pc, #484]	; (800aad0 <_vfiprintf_r+0x248>)
 800a8ea:	429d      	cmp	r5, r3
 800a8ec:	bf08      	it	eq
 800a8ee:	68f5      	ldreq	r5, [r6, #12]
 800a8f0:	e7da      	b.n	800a8a8 <_vfiprintf_r+0x20>
 800a8f2:	89ab      	ldrh	r3, [r5, #12]
 800a8f4:	0598      	lsls	r0, r3, #22
 800a8f6:	d4ed      	bmi.n	800a8d4 <_vfiprintf_r+0x4c>
 800a8f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8fa:	f000 fb84 	bl	800b006 <__retarget_lock_release_recursive>
 800a8fe:	e7e9      	b.n	800a8d4 <_vfiprintf_r+0x4c>
 800a900:	2300      	movs	r3, #0
 800a902:	9309      	str	r3, [sp, #36]	; 0x24
 800a904:	2320      	movs	r3, #32
 800a906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a90a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a90e:	2330      	movs	r3, #48	; 0x30
 800a910:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aad4 <_vfiprintf_r+0x24c>
 800a914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a918:	f04f 0901 	mov.w	r9, #1
 800a91c:	4623      	mov	r3, r4
 800a91e:	469a      	mov	sl, r3
 800a920:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a924:	b10a      	cbz	r2, 800a92a <_vfiprintf_r+0xa2>
 800a926:	2a25      	cmp	r2, #37	; 0x25
 800a928:	d1f9      	bne.n	800a91e <_vfiprintf_r+0x96>
 800a92a:	ebba 0b04 	subs.w	fp, sl, r4
 800a92e:	d00b      	beq.n	800a948 <_vfiprintf_r+0xc0>
 800a930:	465b      	mov	r3, fp
 800a932:	4622      	mov	r2, r4
 800a934:	4629      	mov	r1, r5
 800a936:	4630      	mov	r0, r6
 800a938:	f7ff ff93 	bl	800a862 <__sfputs_r>
 800a93c:	3001      	adds	r0, #1
 800a93e:	f000 80aa 	beq.w	800aa96 <_vfiprintf_r+0x20e>
 800a942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a944:	445a      	add	r2, fp
 800a946:	9209      	str	r2, [sp, #36]	; 0x24
 800a948:	f89a 3000 	ldrb.w	r3, [sl]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f000 80a2 	beq.w	800aa96 <_vfiprintf_r+0x20e>
 800a952:	2300      	movs	r3, #0
 800a954:	f04f 32ff 	mov.w	r2, #4294967295
 800a958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a95c:	f10a 0a01 	add.w	sl, sl, #1
 800a960:	9304      	str	r3, [sp, #16]
 800a962:	9307      	str	r3, [sp, #28]
 800a964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a968:	931a      	str	r3, [sp, #104]	; 0x68
 800a96a:	4654      	mov	r4, sl
 800a96c:	2205      	movs	r2, #5
 800a96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a972:	4858      	ldr	r0, [pc, #352]	; (800aad4 <_vfiprintf_r+0x24c>)
 800a974:	f7f5 fc3c 	bl	80001f0 <memchr>
 800a978:	9a04      	ldr	r2, [sp, #16]
 800a97a:	b9d8      	cbnz	r0, 800a9b4 <_vfiprintf_r+0x12c>
 800a97c:	06d1      	lsls	r1, r2, #27
 800a97e:	bf44      	itt	mi
 800a980:	2320      	movmi	r3, #32
 800a982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a986:	0713      	lsls	r3, r2, #28
 800a988:	bf44      	itt	mi
 800a98a:	232b      	movmi	r3, #43	; 0x2b
 800a98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a990:	f89a 3000 	ldrb.w	r3, [sl]
 800a994:	2b2a      	cmp	r3, #42	; 0x2a
 800a996:	d015      	beq.n	800a9c4 <_vfiprintf_r+0x13c>
 800a998:	9a07      	ldr	r2, [sp, #28]
 800a99a:	4654      	mov	r4, sl
 800a99c:	2000      	movs	r0, #0
 800a99e:	f04f 0c0a 	mov.w	ip, #10
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9a8:	3b30      	subs	r3, #48	; 0x30
 800a9aa:	2b09      	cmp	r3, #9
 800a9ac:	d94e      	bls.n	800aa4c <_vfiprintf_r+0x1c4>
 800a9ae:	b1b0      	cbz	r0, 800a9de <_vfiprintf_r+0x156>
 800a9b0:	9207      	str	r2, [sp, #28]
 800a9b2:	e014      	b.n	800a9de <_vfiprintf_r+0x156>
 800a9b4:	eba0 0308 	sub.w	r3, r0, r8
 800a9b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	9304      	str	r3, [sp, #16]
 800a9c0:	46a2      	mov	sl, r4
 800a9c2:	e7d2      	b.n	800a96a <_vfiprintf_r+0xe2>
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	1d19      	adds	r1, r3, #4
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	9103      	str	r1, [sp, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	bfbb      	ittet	lt
 800a9d0:	425b      	neglt	r3, r3
 800a9d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a9d6:	9307      	strge	r3, [sp, #28]
 800a9d8:	9307      	strlt	r3, [sp, #28]
 800a9da:	bfb8      	it	lt
 800a9dc:	9204      	strlt	r2, [sp, #16]
 800a9de:	7823      	ldrb	r3, [r4, #0]
 800a9e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e2:	d10c      	bne.n	800a9fe <_vfiprintf_r+0x176>
 800a9e4:	7863      	ldrb	r3, [r4, #1]
 800a9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9e8:	d135      	bne.n	800aa56 <_vfiprintf_r+0x1ce>
 800a9ea:	9b03      	ldr	r3, [sp, #12]
 800a9ec:	1d1a      	adds	r2, r3, #4
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	9203      	str	r2, [sp, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	bfb8      	it	lt
 800a9f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9fa:	3402      	adds	r4, #2
 800a9fc:	9305      	str	r3, [sp, #20]
 800a9fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aae4 <_vfiprintf_r+0x25c>
 800aa02:	7821      	ldrb	r1, [r4, #0]
 800aa04:	2203      	movs	r2, #3
 800aa06:	4650      	mov	r0, sl
 800aa08:	f7f5 fbf2 	bl	80001f0 <memchr>
 800aa0c:	b140      	cbz	r0, 800aa20 <_vfiprintf_r+0x198>
 800aa0e:	2340      	movs	r3, #64	; 0x40
 800aa10:	eba0 000a 	sub.w	r0, r0, sl
 800aa14:	fa03 f000 	lsl.w	r0, r3, r0
 800aa18:	9b04      	ldr	r3, [sp, #16]
 800aa1a:	4303      	orrs	r3, r0
 800aa1c:	3401      	adds	r4, #1
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa24:	482c      	ldr	r0, [pc, #176]	; (800aad8 <_vfiprintf_r+0x250>)
 800aa26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa2a:	2206      	movs	r2, #6
 800aa2c:	f7f5 fbe0 	bl	80001f0 <memchr>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d03f      	beq.n	800aab4 <_vfiprintf_r+0x22c>
 800aa34:	4b29      	ldr	r3, [pc, #164]	; (800aadc <_vfiprintf_r+0x254>)
 800aa36:	bb1b      	cbnz	r3, 800aa80 <_vfiprintf_r+0x1f8>
 800aa38:	9b03      	ldr	r3, [sp, #12]
 800aa3a:	3307      	adds	r3, #7
 800aa3c:	f023 0307 	bic.w	r3, r3, #7
 800aa40:	3308      	adds	r3, #8
 800aa42:	9303      	str	r3, [sp, #12]
 800aa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa46:	443b      	add	r3, r7
 800aa48:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4a:	e767      	b.n	800a91c <_vfiprintf_r+0x94>
 800aa4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa50:	460c      	mov	r4, r1
 800aa52:	2001      	movs	r0, #1
 800aa54:	e7a5      	b.n	800a9a2 <_vfiprintf_r+0x11a>
 800aa56:	2300      	movs	r3, #0
 800aa58:	3401      	adds	r4, #1
 800aa5a:	9305      	str	r3, [sp, #20]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	f04f 0c0a 	mov.w	ip, #10
 800aa62:	4620      	mov	r0, r4
 800aa64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa68:	3a30      	subs	r2, #48	; 0x30
 800aa6a:	2a09      	cmp	r2, #9
 800aa6c:	d903      	bls.n	800aa76 <_vfiprintf_r+0x1ee>
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0c5      	beq.n	800a9fe <_vfiprintf_r+0x176>
 800aa72:	9105      	str	r1, [sp, #20]
 800aa74:	e7c3      	b.n	800a9fe <_vfiprintf_r+0x176>
 800aa76:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e7f0      	b.n	800aa62 <_vfiprintf_r+0x1da>
 800aa80:	ab03      	add	r3, sp, #12
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	462a      	mov	r2, r5
 800aa86:	4b16      	ldr	r3, [pc, #88]	; (800aae0 <_vfiprintf_r+0x258>)
 800aa88:	a904      	add	r1, sp, #16
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	f7fd fe32 	bl	80086f4 <_printf_float>
 800aa90:	4607      	mov	r7, r0
 800aa92:	1c78      	adds	r0, r7, #1
 800aa94:	d1d6      	bne.n	800aa44 <_vfiprintf_r+0x1bc>
 800aa96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa98:	07d9      	lsls	r1, r3, #31
 800aa9a:	d405      	bmi.n	800aaa8 <_vfiprintf_r+0x220>
 800aa9c:	89ab      	ldrh	r3, [r5, #12]
 800aa9e:	059a      	lsls	r2, r3, #22
 800aaa0:	d402      	bmi.n	800aaa8 <_vfiprintf_r+0x220>
 800aaa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaa4:	f000 faaf 	bl	800b006 <__retarget_lock_release_recursive>
 800aaa8:	89ab      	ldrh	r3, [r5, #12]
 800aaaa:	065b      	lsls	r3, r3, #25
 800aaac:	f53f af12 	bmi.w	800a8d4 <_vfiprintf_r+0x4c>
 800aab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab2:	e711      	b.n	800a8d8 <_vfiprintf_r+0x50>
 800aab4:	ab03      	add	r3, sp, #12
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	462a      	mov	r2, r5
 800aaba:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <_vfiprintf_r+0x258>)
 800aabc:	a904      	add	r1, sp, #16
 800aabe:	4630      	mov	r0, r6
 800aac0:	f7fe f8bc 	bl	8008c3c <_printf_i>
 800aac4:	e7e4      	b.n	800aa90 <_vfiprintf_r+0x208>
 800aac6:	bf00      	nop
 800aac8:	0800bb4c 	.word	0x0800bb4c
 800aacc:	0800bb6c 	.word	0x0800bb6c
 800aad0:	0800bb2c 	.word	0x0800bb2c
 800aad4:	0800b9d4 	.word	0x0800b9d4
 800aad8:	0800b9de 	.word	0x0800b9de
 800aadc:	080086f5 	.word	0x080086f5
 800aae0:	0800a863 	.word	0x0800a863
 800aae4:	0800b9da 	.word	0x0800b9da

0800aae8 <__swbuf_r>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	460e      	mov	r6, r1
 800aaec:	4614      	mov	r4, r2
 800aaee:	4605      	mov	r5, r0
 800aaf0:	b118      	cbz	r0, 800aafa <__swbuf_r+0x12>
 800aaf2:	6983      	ldr	r3, [r0, #24]
 800aaf4:	b90b      	cbnz	r3, 800aafa <__swbuf_r+0x12>
 800aaf6:	f000 f9e7 	bl	800aec8 <__sinit>
 800aafa:	4b21      	ldr	r3, [pc, #132]	; (800ab80 <__swbuf_r+0x98>)
 800aafc:	429c      	cmp	r4, r3
 800aafe:	d12b      	bne.n	800ab58 <__swbuf_r+0x70>
 800ab00:	686c      	ldr	r4, [r5, #4]
 800ab02:	69a3      	ldr	r3, [r4, #24]
 800ab04:	60a3      	str	r3, [r4, #8]
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	071a      	lsls	r2, r3, #28
 800ab0a:	d52f      	bpl.n	800ab6c <__swbuf_r+0x84>
 800ab0c:	6923      	ldr	r3, [r4, #16]
 800ab0e:	b36b      	cbz	r3, 800ab6c <__swbuf_r+0x84>
 800ab10:	6923      	ldr	r3, [r4, #16]
 800ab12:	6820      	ldr	r0, [r4, #0]
 800ab14:	1ac0      	subs	r0, r0, r3
 800ab16:	6963      	ldr	r3, [r4, #20]
 800ab18:	b2f6      	uxtb	r6, r6
 800ab1a:	4283      	cmp	r3, r0
 800ab1c:	4637      	mov	r7, r6
 800ab1e:	dc04      	bgt.n	800ab2a <__swbuf_r+0x42>
 800ab20:	4621      	mov	r1, r4
 800ab22:	4628      	mov	r0, r5
 800ab24:	f000 f93c 	bl	800ada0 <_fflush_r>
 800ab28:	bb30      	cbnz	r0, 800ab78 <__swbuf_r+0x90>
 800ab2a:	68a3      	ldr	r3, [r4, #8]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	60a3      	str	r3, [r4, #8]
 800ab30:	6823      	ldr	r3, [r4, #0]
 800ab32:	1c5a      	adds	r2, r3, #1
 800ab34:	6022      	str	r2, [r4, #0]
 800ab36:	701e      	strb	r6, [r3, #0]
 800ab38:	6963      	ldr	r3, [r4, #20]
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	4283      	cmp	r3, r0
 800ab3e:	d004      	beq.n	800ab4a <__swbuf_r+0x62>
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	07db      	lsls	r3, r3, #31
 800ab44:	d506      	bpl.n	800ab54 <__swbuf_r+0x6c>
 800ab46:	2e0a      	cmp	r6, #10
 800ab48:	d104      	bne.n	800ab54 <__swbuf_r+0x6c>
 800ab4a:	4621      	mov	r1, r4
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	f000 f927 	bl	800ada0 <_fflush_r>
 800ab52:	b988      	cbnz	r0, 800ab78 <__swbuf_r+0x90>
 800ab54:	4638      	mov	r0, r7
 800ab56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab58:	4b0a      	ldr	r3, [pc, #40]	; (800ab84 <__swbuf_r+0x9c>)
 800ab5a:	429c      	cmp	r4, r3
 800ab5c:	d101      	bne.n	800ab62 <__swbuf_r+0x7a>
 800ab5e:	68ac      	ldr	r4, [r5, #8]
 800ab60:	e7cf      	b.n	800ab02 <__swbuf_r+0x1a>
 800ab62:	4b09      	ldr	r3, [pc, #36]	; (800ab88 <__swbuf_r+0xa0>)
 800ab64:	429c      	cmp	r4, r3
 800ab66:	bf08      	it	eq
 800ab68:	68ec      	ldreq	r4, [r5, #12]
 800ab6a:	e7ca      	b.n	800ab02 <__swbuf_r+0x1a>
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	4628      	mov	r0, r5
 800ab70:	f000 f81a 	bl	800aba8 <__swsetup_r>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d0cb      	beq.n	800ab10 <__swbuf_r+0x28>
 800ab78:	f04f 37ff 	mov.w	r7, #4294967295
 800ab7c:	e7ea      	b.n	800ab54 <__swbuf_r+0x6c>
 800ab7e:	bf00      	nop
 800ab80:	0800bb4c 	.word	0x0800bb4c
 800ab84:	0800bb6c 	.word	0x0800bb6c
 800ab88:	0800bb2c 	.word	0x0800bb2c

0800ab8c <__ascii_wctomb>:
 800ab8c:	b149      	cbz	r1, 800aba2 <__ascii_wctomb+0x16>
 800ab8e:	2aff      	cmp	r2, #255	; 0xff
 800ab90:	bf85      	ittet	hi
 800ab92:	238a      	movhi	r3, #138	; 0x8a
 800ab94:	6003      	strhi	r3, [r0, #0]
 800ab96:	700a      	strbls	r2, [r1, #0]
 800ab98:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab9c:	bf98      	it	ls
 800ab9e:	2001      	movls	r0, #1
 800aba0:	4770      	bx	lr
 800aba2:	4608      	mov	r0, r1
 800aba4:	4770      	bx	lr
	...

0800aba8 <__swsetup_r>:
 800aba8:	4b32      	ldr	r3, [pc, #200]	; (800ac74 <__swsetup_r+0xcc>)
 800abaa:	b570      	push	{r4, r5, r6, lr}
 800abac:	681d      	ldr	r5, [r3, #0]
 800abae:	4606      	mov	r6, r0
 800abb0:	460c      	mov	r4, r1
 800abb2:	b125      	cbz	r5, 800abbe <__swsetup_r+0x16>
 800abb4:	69ab      	ldr	r3, [r5, #24]
 800abb6:	b913      	cbnz	r3, 800abbe <__swsetup_r+0x16>
 800abb8:	4628      	mov	r0, r5
 800abba:	f000 f985 	bl	800aec8 <__sinit>
 800abbe:	4b2e      	ldr	r3, [pc, #184]	; (800ac78 <__swsetup_r+0xd0>)
 800abc0:	429c      	cmp	r4, r3
 800abc2:	d10f      	bne.n	800abe4 <__swsetup_r+0x3c>
 800abc4:	686c      	ldr	r4, [r5, #4]
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abcc:	0719      	lsls	r1, r3, #28
 800abce:	d42c      	bmi.n	800ac2a <__swsetup_r+0x82>
 800abd0:	06dd      	lsls	r5, r3, #27
 800abd2:	d411      	bmi.n	800abf8 <__swsetup_r+0x50>
 800abd4:	2309      	movs	r3, #9
 800abd6:	6033      	str	r3, [r6, #0]
 800abd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abdc:	81a3      	strh	r3, [r4, #12]
 800abde:	f04f 30ff 	mov.w	r0, #4294967295
 800abe2:	e03e      	b.n	800ac62 <__swsetup_r+0xba>
 800abe4:	4b25      	ldr	r3, [pc, #148]	; (800ac7c <__swsetup_r+0xd4>)
 800abe6:	429c      	cmp	r4, r3
 800abe8:	d101      	bne.n	800abee <__swsetup_r+0x46>
 800abea:	68ac      	ldr	r4, [r5, #8]
 800abec:	e7eb      	b.n	800abc6 <__swsetup_r+0x1e>
 800abee:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <__swsetup_r+0xd8>)
 800abf0:	429c      	cmp	r4, r3
 800abf2:	bf08      	it	eq
 800abf4:	68ec      	ldreq	r4, [r5, #12]
 800abf6:	e7e6      	b.n	800abc6 <__swsetup_r+0x1e>
 800abf8:	0758      	lsls	r0, r3, #29
 800abfa:	d512      	bpl.n	800ac22 <__swsetup_r+0x7a>
 800abfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abfe:	b141      	cbz	r1, 800ac12 <__swsetup_r+0x6a>
 800ac00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac04:	4299      	cmp	r1, r3
 800ac06:	d002      	beq.n	800ac0e <__swsetup_r+0x66>
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f7ff fb6f 	bl	800a2ec <_free_r>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	6363      	str	r3, [r4, #52]	; 0x34
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	6063      	str	r3, [r4, #4]
 800ac1e:	6923      	ldr	r3, [r4, #16]
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	89a3      	ldrh	r3, [r4, #12]
 800ac24:	f043 0308 	orr.w	r3, r3, #8
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	6923      	ldr	r3, [r4, #16]
 800ac2c:	b94b      	cbnz	r3, 800ac42 <__swsetup_r+0x9a>
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac38:	d003      	beq.n	800ac42 <__swsetup_r+0x9a>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f000 fa07 	bl	800b050 <__smakebuf_r>
 800ac42:	89a0      	ldrh	r0, [r4, #12]
 800ac44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac48:	f010 0301 	ands.w	r3, r0, #1
 800ac4c:	d00a      	beq.n	800ac64 <__swsetup_r+0xbc>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	60a3      	str	r3, [r4, #8]
 800ac52:	6963      	ldr	r3, [r4, #20]
 800ac54:	425b      	negs	r3, r3
 800ac56:	61a3      	str	r3, [r4, #24]
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	b943      	cbnz	r3, 800ac6e <__swsetup_r+0xc6>
 800ac5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac60:	d1ba      	bne.n	800abd8 <__swsetup_r+0x30>
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	0781      	lsls	r1, r0, #30
 800ac66:	bf58      	it	pl
 800ac68:	6963      	ldrpl	r3, [r4, #20]
 800ac6a:	60a3      	str	r3, [r4, #8]
 800ac6c:	e7f4      	b.n	800ac58 <__swsetup_r+0xb0>
 800ac6e:	2000      	movs	r0, #0
 800ac70:	e7f7      	b.n	800ac62 <__swsetup_r+0xba>
 800ac72:	bf00      	nop
 800ac74:	20000664 	.word	0x20000664
 800ac78:	0800bb4c 	.word	0x0800bb4c
 800ac7c:	0800bb6c 	.word	0x0800bb6c
 800ac80:	0800bb2c 	.word	0x0800bb2c

0800ac84 <abort>:
 800ac84:	b508      	push	{r3, lr}
 800ac86:	2006      	movs	r0, #6
 800ac88:	f000 fa52 	bl	800b130 <raise>
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	f7f9 fde5 	bl	800485c <_exit>
	...

0800ac94 <__sflush_r>:
 800ac94:	898a      	ldrh	r2, [r1, #12]
 800ac96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	0710      	lsls	r0, r2, #28
 800ac9e:	460c      	mov	r4, r1
 800aca0:	d458      	bmi.n	800ad54 <__sflush_r+0xc0>
 800aca2:	684b      	ldr	r3, [r1, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	dc05      	bgt.n	800acb4 <__sflush_r+0x20>
 800aca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acaa:	2b00      	cmp	r3, #0
 800acac:	dc02      	bgt.n	800acb4 <__sflush_r+0x20>
 800acae:	2000      	movs	r0, #0
 800acb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acb6:	2e00      	cmp	r6, #0
 800acb8:	d0f9      	beq.n	800acae <__sflush_r+0x1a>
 800acba:	2300      	movs	r3, #0
 800acbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acc0:	682f      	ldr	r7, [r5, #0]
 800acc2:	602b      	str	r3, [r5, #0]
 800acc4:	d032      	beq.n	800ad2c <__sflush_r+0x98>
 800acc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	075a      	lsls	r2, r3, #29
 800accc:	d505      	bpl.n	800acda <__sflush_r+0x46>
 800acce:	6863      	ldr	r3, [r4, #4]
 800acd0:	1ac0      	subs	r0, r0, r3
 800acd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acd4:	b10b      	cbz	r3, 800acda <__sflush_r+0x46>
 800acd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acd8:	1ac0      	subs	r0, r0, r3
 800acda:	2300      	movs	r3, #0
 800acdc:	4602      	mov	r2, r0
 800acde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ace0:	6a21      	ldr	r1, [r4, #32]
 800ace2:	4628      	mov	r0, r5
 800ace4:	47b0      	blx	r6
 800ace6:	1c43      	adds	r3, r0, #1
 800ace8:	89a3      	ldrh	r3, [r4, #12]
 800acea:	d106      	bne.n	800acfa <__sflush_r+0x66>
 800acec:	6829      	ldr	r1, [r5, #0]
 800acee:	291d      	cmp	r1, #29
 800acf0:	d82c      	bhi.n	800ad4c <__sflush_r+0xb8>
 800acf2:	4a2a      	ldr	r2, [pc, #168]	; (800ad9c <__sflush_r+0x108>)
 800acf4:	40ca      	lsrs	r2, r1
 800acf6:	07d6      	lsls	r6, r2, #31
 800acf8:	d528      	bpl.n	800ad4c <__sflush_r+0xb8>
 800acfa:	2200      	movs	r2, #0
 800acfc:	6062      	str	r2, [r4, #4]
 800acfe:	04d9      	lsls	r1, r3, #19
 800ad00:	6922      	ldr	r2, [r4, #16]
 800ad02:	6022      	str	r2, [r4, #0]
 800ad04:	d504      	bpl.n	800ad10 <__sflush_r+0x7c>
 800ad06:	1c42      	adds	r2, r0, #1
 800ad08:	d101      	bne.n	800ad0e <__sflush_r+0x7a>
 800ad0a:	682b      	ldr	r3, [r5, #0]
 800ad0c:	b903      	cbnz	r3, 800ad10 <__sflush_r+0x7c>
 800ad0e:	6560      	str	r0, [r4, #84]	; 0x54
 800ad10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad12:	602f      	str	r7, [r5, #0]
 800ad14:	2900      	cmp	r1, #0
 800ad16:	d0ca      	beq.n	800acae <__sflush_r+0x1a>
 800ad18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad1c:	4299      	cmp	r1, r3
 800ad1e:	d002      	beq.n	800ad26 <__sflush_r+0x92>
 800ad20:	4628      	mov	r0, r5
 800ad22:	f7ff fae3 	bl	800a2ec <_free_r>
 800ad26:	2000      	movs	r0, #0
 800ad28:	6360      	str	r0, [r4, #52]	; 0x34
 800ad2a:	e7c1      	b.n	800acb0 <__sflush_r+0x1c>
 800ad2c:	6a21      	ldr	r1, [r4, #32]
 800ad2e:	2301      	movs	r3, #1
 800ad30:	4628      	mov	r0, r5
 800ad32:	47b0      	blx	r6
 800ad34:	1c41      	adds	r1, r0, #1
 800ad36:	d1c7      	bne.n	800acc8 <__sflush_r+0x34>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d0c4      	beq.n	800acc8 <__sflush_r+0x34>
 800ad3e:	2b1d      	cmp	r3, #29
 800ad40:	d001      	beq.n	800ad46 <__sflush_r+0xb2>
 800ad42:	2b16      	cmp	r3, #22
 800ad44:	d101      	bne.n	800ad4a <__sflush_r+0xb6>
 800ad46:	602f      	str	r7, [r5, #0]
 800ad48:	e7b1      	b.n	800acae <__sflush_r+0x1a>
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	e7ad      	b.n	800acb0 <__sflush_r+0x1c>
 800ad54:	690f      	ldr	r7, [r1, #16]
 800ad56:	2f00      	cmp	r7, #0
 800ad58:	d0a9      	beq.n	800acae <__sflush_r+0x1a>
 800ad5a:	0793      	lsls	r3, r2, #30
 800ad5c:	680e      	ldr	r6, [r1, #0]
 800ad5e:	bf08      	it	eq
 800ad60:	694b      	ldreq	r3, [r1, #20]
 800ad62:	600f      	str	r7, [r1, #0]
 800ad64:	bf18      	it	ne
 800ad66:	2300      	movne	r3, #0
 800ad68:	eba6 0807 	sub.w	r8, r6, r7
 800ad6c:	608b      	str	r3, [r1, #8]
 800ad6e:	f1b8 0f00 	cmp.w	r8, #0
 800ad72:	dd9c      	ble.n	800acae <__sflush_r+0x1a>
 800ad74:	6a21      	ldr	r1, [r4, #32]
 800ad76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad78:	4643      	mov	r3, r8
 800ad7a:	463a      	mov	r2, r7
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	47b0      	blx	r6
 800ad80:	2800      	cmp	r0, #0
 800ad82:	dc06      	bgt.n	800ad92 <__sflush_r+0xfe>
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad8a:	81a3      	strh	r3, [r4, #12]
 800ad8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad90:	e78e      	b.n	800acb0 <__sflush_r+0x1c>
 800ad92:	4407      	add	r7, r0
 800ad94:	eba8 0800 	sub.w	r8, r8, r0
 800ad98:	e7e9      	b.n	800ad6e <__sflush_r+0xda>
 800ad9a:	bf00      	nop
 800ad9c:	20400001 	.word	0x20400001

0800ada0 <_fflush_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	690b      	ldr	r3, [r1, #16]
 800ada4:	4605      	mov	r5, r0
 800ada6:	460c      	mov	r4, r1
 800ada8:	b913      	cbnz	r3, 800adb0 <_fflush_r+0x10>
 800adaa:	2500      	movs	r5, #0
 800adac:	4628      	mov	r0, r5
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	b118      	cbz	r0, 800adba <_fflush_r+0x1a>
 800adb2:	6983      	ldr	r3, [r0, #24]
 800adb4:	b90b      	cbnz	r3, 800adba <_fflush_r+0x1a>
 800adb6:	f000 f887 	bl	800aec8 <__sinit>
 800adba:	4b14      	ldr	r3, [pc, #80]	; (800ae0c <_fflush_r+0x6c>)
 800adbc:	429c      	cmp	r4, r3
 800adbe:	d11b      	bne.n	800adf8 <_fflush_r+0x58>
 800adc0:	686c      	ldr	r4, [r5, #4]
 800adc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d0ef      	beq.n	800adaa <_fflush_r+0xa>
 800adca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adcc:	07d0      	lsls	r0, r2, #31
 800adce:	d404      	bmi.n	800adda <_fflush_r+0x3a>
 800add0:	0599      	lsls	r1, r3, #22
 800add2:	d402      	bmi.n	800adda <_fflush_r+0x3a>
 800add4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800add6:	f000 f915 	bl	800b004 <__retarget_lock_acquire_recursive>
 800adda:	4628      	mov	r0, r5
 800addc:	4621      	mov	r1, r4
 800adde:	f7ff ff59 	bl	800ac94 <__sflush_r>
 800ade2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ade4:	07da      	lsls	r2, r3, #31
 800ade6:	4605      	mov	r5, r0
 800ade8:	d4e0      	bmi.n	800adac <_fflush_r+0xc>
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	059b      	lsls	r3, r3, #22
 800adee:	d4dd      	bmi.n	800adac <_fflush_r+0xc>
 800adf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adf2:	f000 f908 	bl	800b006 <__retarget_lock_release_recursive>
 800adf6:	e7d9      	b.n	800adac <_fflush_r+0xc>
 800adf8:	4b05      	ldr	r3, [pc, #20]	; (800ae10 <_fflush_r+0x70>)
 800adfa:	429c      	cmp	r4, r3
 800adfc:	d101      	bne.n	800ae02 <_fflush_r+0x62>
 800adfe:	68ac      	ldr	r4, [r5, #8]
 800ae00:	e7df      	b.n	800adc2 <_fflush_r+0x22>
 800ae02:	4b04      	ldr	r3, [pc, #16]	; (800ae14 <_fflush_r+0x74>)
 800ae04:	429c      	cmp	r4, r3
 800ae06:	bf08      	it	eq
 800ae08:	68ec      	ldreq	r4, [r5, #12]
 800ae0a:	e7da      	b.n	800adc2 <_fflush_r+0x22>
 800ae0c:	0800bb4c 	.word	0x0800bb4c
 800ae10:	0800bb6c 	.word	0x0800bb6c
 800ae14:	0800bb2c 	.word	0x0800bb2c

0800ae18 <std>:
 800ae18:	2300      	movs	r3, #0
 800ae1a:	b510      	push	{r4, lr}
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae26:	6083      	str	r3, [r0, #8]
 800ae28:	8181      	strh	r1, [r0, #12]
 800ae2a:	6643      	str	r3, [r0, #100]	; 0x64
 800ae2c:	81c2      	strh	r2, [r0, #14]
 800ae2e:	6183      	str	r3, [r0, #24]
 800ae30:	4619      	mov	r1, r3
 800ae32:	2208      	movs	r2, #8
 800ae34:	305c      	adds	r0, #92	; 0x5c
 800ae36:	f7fd fbb5 	bl	80085a4 <memset>
 800ae3a:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <std+0x38>)
 800ae3c:	6263      	str	r3, [r4, #36]	; 0x24
 800ae3e:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <std+0x3c>)
 800ae40:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae42:	4b05      	ldr	r3, [pc, #20]	; (800ae58 <std+0x40>)
 800ae44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae46:	4b05      	ldr	r3, [pc, #20]	; (800ae5c <std+0x44>)
 800ae48:	6224      	str	r4, [r4, #32]
 800ae4a:	6323      	str	r3, [r4, #48]	; 0x30
 800ae4c:	bd10      	pop	{r4, pc}
 800ae4e:	bf00      	nop
 800ae50:	0800b169 	.word	0x0800b169
 800ae54:	0800b18b 	.word	0x0800b18b
 800ae58:	0800b1c3 	.word	0x0800b1c3
 800ae5c:	0800b1e7 	.word	0x0800b1e7

0800ae60 <_cleanup_r>:
 800ae60:	4901      	ldr	r1, [pc, #4]	; (800ae68 <_cleanup_r+0x8>)
 800ae62:	f000 b8af 	b.w	800afc4 <_fwalk_reent>
 800ae66:	bf00      	nop
 800ae68:	0800ada1 	.word	0x0800ada1

0800ae6c <__sfmoreglue>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	1e4a      	subs	r2, r1, #1
 800ae70:	2568      	movs	r5, #104	; 0x68
 800ae72:	4355      	muls	r5, r2
 800ae74:	460e      	mov	r6, r1
 800ae76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae7a:	f7ff fa87 	bl	800a38c <_malloc_r>
 800ae7e:	4604      	mov	r4, r0
 800ae80:	b140      	cbz	r0, 800ae94 <__sfmoreglue+0x28>
 800ae82:	2100      	movs	r1, #0
 800ae84:	e9c0 1600 	strd	r1, r6, [r0]
 800ae88:	300c      	adds	r0, #12
 800ae8a:	60a0      	str	r0, [r4, #8]
 800ae8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae90:	f7fd fb88 	bl	80085a4 <memset>
 800ae94:	4620      	mov	r0, r4
 800ae96:	bd70      	pop	{r4, r5, r6, pc}

0800ae98 <__sfp_lock_acquire>:
 800ae98:	4801      	ldr	r0, [pc, #4]	; (800aea0 <__sfp_lock_acquire+0x8>)
 800ae9a:	f000 b8b3 	b.w	800b004 <__retarget_lock_acquire_recursive>
 800ae9e:	bf00      	nop
 800aea0:	20001cf0 	.word	0x20001cf0

0800aea4 <__sfp_lock_release>:
 800aea4:	4801      	ldr	r0, [pc, #4]	; (800aeac <__sfp_lock_release+0x8>)
 800aea6:	f000 b8ae 	b.w	800b006 <__retarget_lock_release_recursive>
 800aeaa:	bf00      	nop
 800aeac:	20001cf0 	.word	0x20001cf0

0800aeb0 <__sinit_lock_acquire>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	; (800aeb8 <__sinit_lock_acquire+0x8>)
 800aeb2:	f000 b8a7 	b.w	800b004 <__retarget_lock_acquire_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	20001ceb 	.word	0x20001ceb

0800aebc <__sinit_lock_release>:
 800aebc:	4801      	ldr	r0, [pc, #4]	; (800aec4 <__sinit_lock_release+0x8>)
 800aebe:	f000 b8a2 	b.w	800b006 <__retarget_lock_release_recursive>
 800aec2:	bf00      	nop
 800aec4:	20001ceb 	.word	0x20001ceb

0800aec8 <__sinit>:
 800aec8:	b510      	push	{r4, lr}
 800aeca:	4604      	mov	r4, r0
 800aecc:	f7ff fff0 	bl	800aeb0 <__sinit_lock_acquire>
 800aed0:	69a3      	ldr	r3, [r4, #24]
 800aed2:	b11b      	cbz	r3, 800aedc <__sinit+0x14>
 800aed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed8:	f7ff bff0 	b.w	800aebc <__sinit_lock_release>
 800aedc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aee0:	6523      	str	r3, [r4, #80]	; 0x50
 800aee2:	4b13      	ldr	r3, [pc, #76]	; (800af30 <__sinit+0x68>)
 800aee4:	4a13      	ldr	r2, [pc, #76]	; (800af34 <__sinit+0x6c>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	62a2      	str	r2, [r4, #40]	; 0x28
 800aeea:	42a3      	cmp	r3, r4
 800aeec:	bf04      	itt	eq
 800aeee:	2301      	moveq	r3, #1
 800aef0:	61a3      	streq	r3, [r4, #24]
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 f820 	bl	800af38 <__sfp>
 800aef8:	6060      	str	r0, [r4, #4]
 800aefa:	4620      	mov	r0, r4
 800aefc:	f000 f81c 	bl	800af38 <__sfp>
 800af00:	60a0      	str	r0, [r4, #8]
 800af02:	4620      	mov	r0, r4
 800af04:	f000 f818 	bl	800af38 <__sfp>
 800af08:	2200      	movs	r2, #0
 800af0a:	60e0      	str	r0, [r4, #12]
 800af0c:	2104      	movs	r1, #4
 800af0e:	6860      	ldr	r0, [r4, #4]
 800af10:	f7ff ff82 	bl	800ae18 <std>
 800af14:	68a0      	ldr	r0, [r4, #8]
 800af16:	2201      	movs	r2, #1
 800af18:	2109      	movs	r1, #9
 800af1a:	f7ff ff7d 	bl	800ae18 <std>
 800af1e:	68e0      	ldr	r0, [r4, #12]
 800af20:	2202      	movs	r2, #2
 800af22:	2112      	movs	r1, #18
 800af24:	f7ff ff78 	bl	800ae18 <std>
 800af28:	2301      	movs	r3, #1
 800af2a:	61a3      	str	r3, [r4, #24]
 800af2c:	e7d2      	b.n	800aed4 <__sinit+0xc>
 800af2e:	bf00      	nop
 800af30:	0800b7a8 	.word	0x0800b7a8
 800af34:	0800ae61 	.word	0x0800ae61

0800af38 <__sfp>:
 800af38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3a:	4607      	mov	r7, r0
 800af3c:	f7ff ffac 	bl	800ae98 <__sfp_lock_acquire>
 800af40:	4b1e      	ldr	r3, [pc, #120]	; (800afbc <__sfp+0x84>)
 800af42:	681e      	ldr	r6, [r3, #0]
 800af44:	69b3      	ldr	r3, [r6, #24]
 800af46:	b913      	cbnz	r3, 800af4e <__sfp+0x16>
 800af48:	4630      	mov	r0, r6
 800af4a:	f7ff ffbd 	bl	800aec8 <__sinit>
 800af4e:	3648      	adds	r6, #72	; 0x48
 800af50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af54:	3b01      	subs	r3, #1
 800af56:	d503      	bpl.n	800af60 <__sfp+0x28>
 800af58:	6833      	ldr	r3, [r6, #0]
 800af5a:	b30b      	cbz	r3, 800afa0 <__sfp+0x68>
 800af5c:	6836      	ldr	r6, [r6, #0]
 800af5e:	e7f7      	b.n	800af50 <__sfp+0x18>
 800af60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af64:	b9d5      	cbnz	r5, 800af9c <__sfp+0x64>
 800af66:	4b16      	ldr	r3, [pc, #88]	; (800afc0 <__sfp+0x88>)
 800af68:	60e3      	str	r3, [r4, #12]
 800af6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af6e:	6665      	str	r5, [r4, #100]	; 0x64
 800af70:	f000 f847 	bl	800b002 <__retarget_lock_init_recursive>
 800af74:	f7ff ff96 	bl	800aea4 <__sfp_lock_release>
 800af78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af80:	6025      	str	r5, [r4, #0]
 800af82:	61a5      	str	r5, [r4, #24]
 800af84:	2208      	movs	r2, #8
 800af86:	4629      	mov	r1, r5
 800af88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af8c:	f7fd fb0a 	bl	80085a4 <memset>
 800af90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af98:	4620      	mov	r0, r4
 800af9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af9c:	3468      	adds	r4, #104	; 0x68
 800af9e:	e7d9      	b.n	800af54 <__sfp+0x1c>
 800afa0:	2104      	movs	r1, #4
 800afa2:	4638      	mov	r0, r7
 800afa4:	f7ff ff62 	bl	800ae6c <__sfmoreglue>
 800afa8:	4604      	mov	r4, r0
 800afaa:	6030      	str	r0, [r6, #0]
 800afac:	2800      	cmp	r0, #0
 800afae:	d1d5      	bne.n	800af5c <__sfp+0x24>
 800afb0:	f7ff ff78 	bl	800aea4 <__sfp_lock_release>
 800afb4:	230c      	movs	r3, #12
 800afb6:	603b      	str	r3, [r7, #0]
 800afb8:	e7ee      	b.n	800af98 <__sfp+0x60>
 800afba:	bf00      	nop
 800afbc:	0800b7a8 	.word	0x0800b7a8
 800afc0:	ffff0001 	.word	0xffff0001

0800afc4 <_fwalk_reent>:
 800afc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc8:	4606      	mov	r6, r0
 800afca:	4688      	mov	r8, r1
 800afcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afd0:	2700      	movs	r7, #0
 800afd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afd6:	f1b9 0901 	subs.w	r9, r9, #1
 800afda:	d505      	bpl.n	800afe8 <_fwalk_reent+0x24>
 800afdc:	6824      	ldr	r4, [r4, #0]
 800afde:	2c00      	cmp	r4, #0
 800afe0:	d1f7      	bne.n	800afd2 <_fwalk_reent+0xe>
 800afe2:	4638      	mov	r0, r7
 800afe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe8:	89ab      	ldrh	r3, [r5, #12]
 800afea:	2b01      	cmp	r3, #1
 800afec:	d907      	bls.n	800affe <_fwalk_reent+0x3a>
 800afee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aff2:	3301      	adds	r3, #1
 800aff4:	d003      	beq.n	800affe <_fwalk_reent+0x3a>
 800aff6:	4629      	mov	r1, r5
 800aff8:	4630      	mov	r0, r6
 800affa:	47c0      	blx	r8
 800affc:	4307      	orrs	r7, r0
 800affe:	3568      	adds	r5, #104	; 0x68
 800b000:	e7e9      	b.n	800afd6 <_fwalk_reent+0x12>

0800b002 <__retarget_lock_init_recursive>:
 800b002:	4770      	bx	lr

0800b004 <__retarget_lock_acquire_recursive>:
 800b004:	4770      	bx	lr

0800b006 <__retarget_lock_release_recursive>:
 800b006:	4770      	bx	lr

0800b008 <__swhatbuf_r>:
 800b008:	b570      	push	{r4, r5, r6, lr}
 800b00a:	460e      	mov	r6, r1
 800b00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b010:	2900      	cmp	r1, #0
 800b012:	b096      	sub	sp, #88	; 0x58
 800b014:	4614      	mov	r4, r2
 800b016:	461d      	mov	r5, r3
 800b018:	da07      	bge.n	800b02a <__swhatbuf_r+0x22>
 800b01a:	2300      	movs	r3, #0
 800b01c:	602b      	str	r3, [r5, #0]
 800b01e:	89b3      	ldrh	r3, [r6, #12]
 800b020:	061a      	lsls	r2, r3, #24
 800b022:	d410      	bmi.n	800b046 <__swhatbuf_r+0x3e>
 800b024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b028:	e00e      	b.n	800b048 <__swhatbuf_r+0x40>
 800b02a:	466a      	mov	r2, sp
 800b02c:	f000 f902 	bl	800b234 <_fstat_r>
 800b030:	2800      	cmp	r0, #0
 800b032:	dbf2      	blt.n	800b01a <__swhatbuf_r+0x12>
 800b034:	9a01      	ldr	r2, [sp, #4]
 800b036:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b03a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b03e:	425a      	negs	r2, r3
 800b040:	415a      	adcs	r2, r3
 800b042:	602a      	str	r2, [r5, #0]
 800b044:	e7ee      	b.n	800b024 <__swhatbuf_r+0x1c>
 800b046:	2340      	movs	r3, #64	; 0x40
 800b048:	2000      	movs	r0, #0
 800b04a:	6023      	str	r3, [r4, #0]
 800b04c:	b016      	add	sp, #88	; 0x58
 800b04e:	bd70      	pop	{r4, r5, r6, pc}

0800b050 <__smakebuf_r>:
 800b050:	898b      	ldrh	r3, [r1, #12]
 800b052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b054:	079d      	lsls	r5, r3, #30
 800b056:	4606      	mov	r6, r0
 800b058:	460c      	mov	r4, r1
 800b05a:	d507      	bpl.n	800b06c <__smakebuf_r+0x1c>
 800b05c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	6123      	str	r3, [r4, #16]
 800b064:	2301      	movs	r3, #1
 800b066:	6163      	str	r3, [r4, #20]
 800b068:	b002      	add	sp, #8
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	ab01      	add	r3, sp, #4
 800b06e:	466a      	mov	r2, sp
 800b070:	f7ff ffca 	bl	800b008 <__swhatbuf_r>
 800b074:	9900      	ldr	r1, [sp, #0]
 800b076:	4605      	mov	r5, r0
 800b078:	4630      	mov	r0, r6
 800b07a:	f7ff f987 	bl	800a38c <_malloc_r>
 800b07e:	b948      	cbnz	r0, 800b094 <__smakebuf_r+0x44>
 800b080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b084:	059a      	lsls	r2, r3, #22
 800b086:	d4ef      	bmi.n	800b068 <__smakebuf_r+0x18>
 800b088:	f023 0303 	bic.w	r3, r3, #3
 800b08c:	f043 0302 	orr.w	r3, r3, #2
 800b090:	81a3      	strh	r3, [r4, #12]
 800b092:	e7e3      	b.n	800b05c <__smakebuf_r+0xc>
 800b094:	4b0d      	ldr	r3, [pc, #52]	; (800b0cc <__smakebuf_r+0x7c>)
 800b096:	62b3      	str	r3, [r6, #40]	; 0x28
 800b098:	89a3      	ldrh	r3, [r4, #12]
 800b09a:	6020      	str	r0, [r4, #0]
 800b09c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0a0:	81a3      	strh	r3, [r4, #12]
 800b0a2:	9b00      	ldr	r3, [sp, #0]
 800b0a4:	6163      	str	r3, [r4, #20]
 800b0a6:	9b01      	ldr	r3, [sp, #4]
 800b0a8:	6120      	str	r0, [r4, #16]
 800b0aa:	b15b      	cbz	r3, 800b0c4 <__smakebuf_r+0x74>
 800b0ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	f000 f8d1 	bl	800b258 <_isatty_r>
 800b0b6:	b128      	cbz	r0, 800b0c4 <__smakebuf_r+0x74>
 800b0b8:	89a3      	ldrh	r3, [r4, #12]
 800b0ba:	f023 0303 	bic.w	r3, r3, #3
 800b0be:	f043 0301 	orr.w	r3, r3, #1
 800b0c2:	81a3      	strh	r3, [r4, #12]
 800b0c4:	89a0      	ldrh	r0, [r4, #12]
 800b0c6:	4305      	orrs	r5, r0
 800b0c8:	81a5      	strh	r5, [r4, #12]
 800b0ca:	e7cd      	b.n	800b068 <__smakebuf_r+0x18>
 800b0cc:	0800ae61 	.word	0x0800ae61

0800b0d0 <_malloc_usable_size_r>:
 800b0d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0d4:	1f18      	subs	r0, r3, #4
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	bfbc      	itt	lt
 800b0da:	580b      	ldrlt	r3, [r1, r0]
 800b0dc:	18c0      	addlt	r0, r0, r3
 800b0de:	4770      	bx	lr

0800b0e0 <_raise_r>:
 800b0e0:	291f      	cmp	r1, #31
 800b0e2:	b538      	push	{r3, r4, r5, lr}
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	460d      	mov	r5, r1
 800b0e8:	d904      	bls.n	800b0f4 <_raise_r+0x14>
 800b0ea:	2316      	movs	r3, #22
 800b0ec:	6003      	str	r3, [r0, #0]
 800b0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
 800b0f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0f6:	b112      	cbz	r2, 800b0fe <_raise_r+0x1e>
 800b0f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0fc:	b94b      	cbnz	r3, 800b112 <_raise_r+0x32>
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 f830 	bl	800b164 <_getpid_r>
 800b104:	462a      	mov	r2, r5
 800b106:	4601      	mov	r1, r0
 800b108:	4620      	mov	r0, r4
 800b10a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b10e:	f000 b817 	b.w	800b140 <_kill_r>
 800b112:	2b01      	cmp	r3, #1
 800b114:	d00a      	beq.n	800b12c <_raise_r+0x4c>
 800b116:	1c59      	adds	r1, r3, #1
 800b118:	d103      	bne.n	800b122 <_raise_r+0x42>
 800b11a:	2316      	movs	r3, #22
 800b11c:	6003      	str	r3, [r0, #0]
 800b11e:	2001      	movs	r0, #1
 800b120:	e7e7      	b.n	800b0f2 <_raise_r+0x12>
 800b122:	2400      	movs	r4, #0
 800b124:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b128:	4628      	mov	r0, r5
 800b12a:	4798      	blx	r3
 800b12c:	2000      	movs	r0, #0
 800b12e:	e7e0      	b.n	800b0f2 <_raise_r+0x12>

0800b130 <raise>:
 800b130:	4b02      	ldr	r3, [pc, #8]	; (800b13c <raise+0xc>)
 800b132:	4601      	mov	r1, r0
 800b134:	6818      	ldr	r0, [r3, #0]
 800b136:	f7ff bfd3 	b.w	800b0e0 <_raise_r>
 800b13a:	bf00      	nop
 800b13c:	20000664 	.word	0x20000664

0800b140 <_kill_r>:
 800b140:	b538      	push	{r3, r4, r5, lr}
 800b142:	4d07      	ldr	r5, [pc, #28]	; (800b160 <_kill_r+0x20>)
 800b144:	2300      	movs	r3, #0
 800b146:	4604      	mov	r4, r0
 800b148:	4608      	mov	r0, r1
 800b14a:	4611      	mov	r1, r2
 800b14c:	602b      	str	r3, [r5, #0]
 800b14e:	f7f9 fb7d 	bl	800484c <_kill>
 800b152:	1c43      	adds	r3, r0, #1
 800b154:	d102      	bne.n	800b15c <_kill_r+0x1c>
 800b156:	682b      	ldr	r3, [r5, #0]
 800b158:	b103      	cbz	r3, 800b15c <_kill_r+0x1c>
 800b15a:	6023      	str	r3, [r4, #0]
 800b15c:	bd38      	pop	{r3, r4, r5, pc}
 800b15e:	bf00      	nop
 800b160:	20001ce4 	.word	0x20001ce4

0800b164 <_getpid_r>:
 800b164:	f7f9 bb70 	b.w	8004848 <_getpid>

0800b168 <__sread>:
 800b168:	b510      	push	{r4, lr}
 800b16a:	460c      	mov	r4, r1
 800b16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b170:	f000 f894 	bl	800b29c <_read_r>
 800b174:	2800      	cmp	r0, #0
 800b176:	bfab      	itete	ge
 800b178:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b17a:	89a3      	ldrhlt	r3, [r4, #12]
 800b17c:	181b      	addge	r3, r3, r0
 800b17e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b182:	bfac      	ite	ge
 800b184:	6563      	strge	r3, [r4, #84]	; 0x54
 800b186:	81a3      	strhlt	r3, [r4, #12]
 800b188:	bd10      	pop	{r4, pc}

0800b18a <__swrite>:
 800b18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b18e:	461f      	mov	r7, r3
 800b190:	898b      	ldrh	r3, [r1, #12]
 800b192:	05db      	lsls	r3, r3, #23
 800b194:	4605      	mov	r5, r0
 800b196:	460c      	mov	r4, r1
 800b198:	4616      	mov	r6, r2
 800b19a:	d505      	bpl.n	800b1a8 <__swrite+0x1e>
 800b19c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f000 f868 	bl	800b278 <_lseek_r>
 800b1a8:	89a3      	ldrh	r3, [r4, #12]
 800b1aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1b2:	81a3      	strh	r3, [r4, #12]
 800b1b4:	4632      	mov	r2, r6
 800b1b6:	463b      	mov	r3, r7
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1be:	f000 b817 	b.w	800b1f0 <_write_r>

0800b1c2 <__sseek>:
 800b1c2:	b510      	push	{r4, lr}
 800b1c4:	460c      	mov	r4, r1
 800b1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ca:	f000 f855 	bl	800b278 <_lseek_r>
 800b1ce:	1c43      	adds	r3, r0, #1
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	bf15      	itete	ne
 800b1d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1de:	81a3      	strheq	r3, [r4, #12]
 800b1e0:	bf18      	it	ne
 800b1e2:	81a3      	strhne	r3, [r4, #12]
 800b1e4:	bd10      	pop	{r4, pc}

0800b1e6 <__sclose>:
 800b1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ea:	f000 b813 	b.w	800b214 <_close_r>
	...

0800b1f0 <_write_r>:
 800b1f0:	b538      	push	{r3, r4, r5, lr}
 800b1f2:	4d07      	ldr	r5, [pc, #28]	; (800b210 <_write_r+0x20>)
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	4608      	mov	r0, r1
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	602a      	str	r2, [r5, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	f7f9 fb40 	bl	8004884 <_write>
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	d102      	bne.n	800b20e <_write_r+0x1e>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	b103      	cbz	r3, 800b20e <_write_r+0x1e>
 800b20c:	6023      	str	r3, [r4, #0]
 800b20e:	bd38      	pop	{r3, r4, r5, pc}
 800b210:	20001ce4 	.word	0x20001ce4

0800b214 <_close_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	4d06      	ldr	r5, [pc, #24]	; (800b230 <_close_r+0x1c>)
 800b218:	2300      	movs	r3, #0
 800b21a:	4604      	mov	r4, r0
 800b21c:	4608      	mov	r0, r1
 800b21e:	602b      	str	r3, [r5, #0]
 800b220:	f7f9 fb3e 	bl	80048a0 <_close>
 800b224:	1c43      	adds	r3, r0, #1
 800b226:	d102      	bne.n	800b22e <_close_r+0x1a>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	b103      	cbz	r3, 800b22e <_close_r+0x1a>
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	bd38      	pop	{r3, r4, r5, pc}
 800b230:	20001ce4 	.word	0x20001ce4

0800b234 <_fstat_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4d07      	ldr	r5, [pc, #28]	; (800b254 <_fstat_r+0x20>)
 800b238:	2300      	movs	r3, #0
 800b23a:	4604      	mov	r4, r0
 800b23c:	4608      	mov	r0, r1
 800b23e:	4611      	mov	r1, r2
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	f7f9 fb31 	bl	80048a8 <_fstat>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d102      	bne.n	800b250 <_fstat_r+0x1c>
 800b24a:	682b      	ldr	r3, [r5, #0]
 800b24c:	b103      	cbz	r3, 800b250 <_fstat_r+0x1c>
 800b24e:	6023      	str	r3, [r4, #0]
 800b250:	bd38      	pop	{r3, r4, r5, pc}
 800b252:	bf00      	nop
 800b254:	20001ce4 	.word	0x20001ce4

0800b258 <_isatty_r>:
 800b258:	b538      	push	{r3, r4, r5, lr}
 800b25a:	4d06      	ldr	r5, [pc, #24]	; (800b274 <_isatty_r+0x1c>)
 800b25c:	2300      	movs	r3, #0
 800b25e:	4604      	mov	r4, r0
 800b260:	4608      	mov	r0, r1
 800b262:	602b      	str	r3, [r5, #0]
 800b264:	f7f9 fb26 	bl	80048b4 <_isatty>
 800b268:	1c43      	adds	r3, r0, #1
 800b26a:	d102      	bne.n	800b272 <_isatty_r+0x1a>
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	b103      	cbz	r3, 800b272 <_isatty_r+0x1a>
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	bd38      	pop	{r3, r4, r5, pc}
 800b274:	20001ce4 	.word	0x20001ce4

0800b278 <_lseek_r>:
 800b278:	b538      	push	{r3, r4, r5, lr}
 800b27a:	4d07      	ldr	r5, [pc, #28]	; (800b298 <_lseek_r+0x20>)
 800b27c:	4604      	mov	r4, r0
 800b27e:	4608      	mov	r0, r1
 800b280:	4611      	mov	r1, r2
 800b282:	2200      	movs	r2, #0
 800b284:	602a      	str	r2, [r5, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	f7f9 fb16 	bl	80048b8 <_lseek>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	d102      	bne.n	800b296 <_lseek_r+0x1e>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	b103      	cbz	r3, 800b296 <_lseek_r+0x1e>
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	bd38      	pop	{r3, r4, r5, pc}
 800b298:	20001ce4 	.word	0x20001ce4

0800b29c <_read_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4d07      	ldr	r5, [pc, #28]	; (800b2bc <_read_r+0x20>)
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	4608      	mov	r0, r1
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	602a      	str	r2, [r5, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f7f9 fadc 	bl	8004868 <_read>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d102      	bne.n	800b2ba <_read_r+0x1e>
 800b2b4:	682b      	ldr	r3, [r5, #0]
 800b2b6:	b103      	cbz	r3, 800b2ba <_read_r+0x1e>
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	bd38      	pop	{r3, r4, r5, pc}
 800b2bc:	20001ce4 	.word	0x20001ce4

0800b2c0 <_init>:
 800b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c2:	bf00      	nop
 800b2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2c6:	bc08      	pop	{r3}
 800b2c8:	469e      	mov	lr, r3
 800b2ca:	4770      	bx	lr

0800b2cc <_fini>:
 800b2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ce:	bf00      	nop
 800b2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2d2:	bc08      	pop	{r3}
 800b2d4:	469e      	mov	lr, r3
 800b2d6:	4770      	bx	lr
